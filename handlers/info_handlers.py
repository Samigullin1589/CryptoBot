# handlers/info_handlers.py
import io
import logging
import matplotlib.pyplot as plt
from aiogram import F, Router
from aiogram.types import BufferedInputFile, CallbackQuery, ForceReply, Message

from services.api_client import ApiClient
from utils.helpers import sanitize_html
from utils.keyboards import (get_main_menu_keyboard, get_price_keyboard,
                             get_quiz_keyboard)

router = Router()
logger = logging.getLogger(__name__)

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
MENU_BUTTON_TEXTS = [
    "üíπ –ö—É—Ä—Å", "‚öôÔ∏è –¢–æ–ø ASIC", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏",
    "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üì° –°—Ç–∞—Ç—É—Å BTC", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"
]

async def show_main_menu(message: Message):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã –æ—Å—Ç–∞–≤–∏–º –µ–µ –∑–¥–µ—Å—å.
    # –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_asics")
async def handle_asics_menu(call: CallbackQuery, api_client: ApiClient):
    await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    asics = await api_client.get_profitable_asics()
    if not asics:
        await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ ASIC. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard())
        await call.answer()
        return
        
    text = "üèÜ <b>–¢–æ–ø-10 –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC:</b>\n\n"
    for miner in asics[:10]:
        text += (f"<b>{sanitize_html(miner.name)}</b>\n  –î–æ—Ö–æ–¥: <b>${miner.profitability:.2f}/–¥–µ–Ω—å</b>"
                 f"{f' | {miner.algorithm}' if miner.algorithm else ''}"
                 f"{f' | {miner.power}W' if miner.power else ''}\n")
    await call.message.edit_text(text, reply_markup=get_main_menu_keyboard())
    await call.answer()

@router.callback_query(F.data == "menu_price")
async def handle_price_menu(call: CallbackQuery):
    await call.message.edit_text("–ö—É—Ä—Å –∫–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=get_price_keyboard())
    await call.answer()

async def send_price_info(message: Message, query: str, api_client: ApiClient):
    coin = await api_client.get_crypto_price(query)
    if not coin:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ '{query}'.")
        return
    change = coin.price_change_24h or 0
    emoji = "üìà" if change >= 0 else "üìâ"
    text = (f"<b>{coin.name} ({coin.symbol})</b>\n"
            f"üíπ –ö—É—Ä—Å: <b>${coin.price:,.4f}</b>\n"
            f"{emoji} 24—á: <b>{change:.2f}%</b>\n")
    if coin.algorithm:
        text += f"‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <code>{coin.algorithm}</code>\n"
        logger.info(f"Searching for ASICs with algorithm: {coin.algorithm}")
        all_asics = await api_client.get_profitable_asics()
        normalized_coin_algo = coin.algorithm.lower().replace('-', '').replace('_', '')
        relevant_asics = [
            asic for asic in all_asics 
            if asic.algorithm and normalized_coin_algo in asic.algorithm.lower().replace('-', '').replace('_', '')
        ]
        if relevant_asics:
            sorted_relevant_asics = sorted(relevant_asics, key=lambda x: x.profitability, reverse=True)
            text += f"\n‚öôÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥ {coin.algorithm}:</b>\n"
            for asic in sorted_relevant_asics[:3]:
                text += f"  ‚Ä¢ <b>{sanitize_html(asic.name)}</b>: ${asic.profitability:.2f}/–¥–µ–Ω—å\n"
    await message.answer(text)

@router.callback_query(F.data.startswith("price_"))
async def handle_price_callback(call: CallbackQuery, api_client: ApiClient):
    action = call.data.split('_')[1]
    await call.message.delete()
    if action == "other":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä. Aleo):", reply_markup=ForceReply())
    else:
        await send_price_info(call.message, action, api_client)
        await show_main_menu(call.message)
    await call.answer()


@router.callback_query(F.data == "menu_news")
async def handle_news_menu(call: CallbackQuery, api_client: ApiClient):
    await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
    news = await api_client.fetch_latest_news()
    if not news:
        await call.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.", reply_markup=get_main_menu_keyboard())
        return
    text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(
        [f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news])
    await call.message.edit_text(text, disable_web_page_preview=True, reply_markup=get_main_menu_keyboard())
    await call.answer()

@router.callback_query(F.data == "menu_fear_greed")
async def handle_fear_greed_menu(call: CallbackQuery, api_client: ApiClient):
    await call.message.edit_text("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω–¥–µ–∫—Å...")
    index = await api_client.get_fear_and_greed_index()
    if not index:
        await call.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å.", reply_markup=get_main_menu_keyboard())
        return

    value, classification = int(index['value']), index['value_classification']
    plt.style.use('dark_background'); fig, ax = plt.subplots(figsize=(8, 4.5), subplot_kw={'projection': 'polar'})
    ax.set_yticklabels([]); ax.set_xticklabels([]); ax.grid(False); ax.spines['polar'].set_visible(False); ax.set_ylim(0, 1)
    colors = ['#d94b4b', '#e88452', '#ece36a', '#b7d968', '#73c269']
    for i in range(100): ax.barh(1, 0.0314, left=3.14-(i*0.0314), height=0.3, color=colors[min(4,int(i/25))])
    angle = 3.14 - (value * 0.0314)
    ax.annotate('', xy=(angle, 1), xytext=(0,0), arrowprops=dict(facecolor='white', shrink=0.05, width=4, headwidth=10))
    fig.text(0.5,0.5,f"{value}",ha='center',va='center',fontsize=48,color='white',weight='bold')
    fig.text(0.5,0.35,classification,ha='center',va='center',fontsize=20,color='white')
    
    buf = io.BytesIO(); plt.savefig(buf, format='png', dpi=150, transparent=True); buf.seek(0); plt.close(fig)
    caption = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>"
    
    await call.message.delete()
    await call.message.answer_photo(BufferedInputFile(buf.read(), "fng.png"), caption=caption)
    await show_main_menu(call.message)
    await call.answer()

@router.callback_query(F.data.in_({"menu_halving", "menu_btc_status", "menu_calculator"}))
async def handle_info_callbacks(call: CallbackQuery, api_client: ApiClient):
    await call.message.edit_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    text = "‚ùå –û—à–∏–±–∫–∞."
    if call.data == "menu_halving": text = await api_client.get_halving_info()
    elif call.data == "menu_btc_status": text = await api_client.get_btc_network_status()
    elif call.data == "menu_calculator":
        await call.message.edit_text("üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á:", reply_markup=ForceReply())
        await call.answer()
        return
    await call.message.edit_text(text, reply_markup=get_main_menu_keyboard())
    await call.answer()

@router.callback_query(F.data == "menu_quiz")
async def handle_quiz_menu(call: CallbackQuery, api_client: ApiClient):
    await call.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")
    quiz = await api_client.generate_quiz_question()
    if not quiz:
        await call.message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=get_main_menu_keyboard())
        return
    await call.message.delete()
    await call.message.answer_poll(
        question=quiz['question'], options=quiz['options'], type='quiz',
        correct_option_id=quiz['correct_option_index'], is_anonymous=False,
        reply_markup=get_quiz_keyboard()
    )
    await call.answer()


@router.message(F.text)
async def handle_text_message(message: Message, api_client: ApiClient):
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    if message.text and message.text.strip() in MENU_BUTTON_TEXTS:
        logger.info(f"Ignoring menu button text: {message.text}")
        return

    if message.reply_to_message and message.reply_to_message.from_user.id == message.bot.id:
        if "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä" in message.reply_to_message.text:
            await message.reply_to_message.delete()
            await send_price_info(message, message.text, api_client)
            await show_main_menu(message)
        elif "—Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏" in message.reply_to_message.text:
            await message.reply_to_message.delete()
            try:
                cost_rub = float(message.text.replace(',', '.'))
                rate_usd_rub = await api_client.get_usd_rub_rate()
                cost_usd = cost_rub / rate_usd_rub
                asics = await api_client.get_profitable_asics()
                res = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)</b>\n"]
                for asic in asics[:10]:
                    if asic.power:
                        profit = asic.profitability - ((asic.power / 1000) * 24 * cost_usd)
                        res.append(f"<b>{sanitize_html(asic.name)}</b>: ${profit:.2f}/–¥–µ–Ω—å")
                await message.answer("\n".join(res))
                await show_main_menu(message)
            except (ValueError, TypeError):
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä. 4.5).")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å
        await send_price_info(message, message.text, api_client)