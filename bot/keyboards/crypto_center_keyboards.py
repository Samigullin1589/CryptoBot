# =================================================================================
# –§–∞–π–ª: bot/keyboards/crypto_center_keyboards.py (–í–ï–†–°–ò–Ø "–ì–ï–ù–ò–ô 2.0" - –ì–û–¢–û–í–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞.
# =================================================================================

from typing import List, Dict, Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.models import AirdropProject, NewsArticle

# –ì–ª–∞–≤–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö callback-–¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
CC_CALLBACK_PREFIX = "cc" # Crypto Center

def get_crypto_center_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üíé Airdrop Alpha (–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ)", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:list:0"))
    builder.row(InlineKeyboardButton(text="‚öôÔ∏è Mining Alpha (–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ)", callback_data=f"{CC_CALLBACK_PREFIX}:mining:list:0"))
    builder.row(InlineKeyboardButton(text="üì∞ Live –õ–µ–Ω—Ç–∞ –ù–æ–≤–æ—Å—Ç–µ–π", callback_data=f"{CC_CALLBACK_PREFIX}:news:list:0"))
    return builder.as_markup()

def get_airdrop_list_keyboard(projects: List[AirdropProject], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º Airdrop-–ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    for project in projects:
        builder.row(InlineKeyboardButton(text=f"{project.name} ({project.status})", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:view:{project.id}"))
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:list:{page - 1}"))
    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="do_nothing"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:list:{page + 1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
        
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"{CC_CALLBACK_PREFIX}:main"))
    return builder.as_markup()

def get_airdrop_details_keyboard(project: AirdropProject, completed_tasks: List[int]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Airdrop-–ø—Ä–æ–µ–∫—Ç–∞ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º –∑–∞–¥–∞—á.
    """
    builder = InlineKeyboardBuilder()
    
    for i, task in enumerate(project.tasks):
        status_icon = "‚úÖ" if i in completed_tasks else "‚òëÔ∏è"
        button_text = f"{status_icon} {task}"
        callback_data = f"{CC_CALLBACK_PREFIX}:airdrops:task:{project.id}:{i}"
        builder.row(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    if project.guide_url:
        builder.row(InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥", url=project.guide_url))
        
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:list:0"))
    return builder.as_markup()

def get_mining_alpha_keyboard(signals: List[Dict[str, Any]], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤."""
    builder = InlineKeyboardBuilder()
    for signal in signals:
        builder.row(InlineKeyboardButton(text=f"{signal['name']} ({signal['algorithm']})", callback_data=f"{CC_CALLBACK_PREFIX}:mining:view:{signal['id']}"))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{CC_CALLBACK_PREFIX}:mining:list:{page - 1}"))
    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="do_nothing"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{CC_CALLBACK_PREFIX}:mining:list:{page + 1}"))
        
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"{CC_CALLBACK_PREFIX}:main"))
    return builder.as_markup()

def get_news_feed_keyboard(articles: List[NewsArticle], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç—ã."""
    builder = InlineKeyboardBuilder()
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"{CC_CALLBACK_PREFIX}:news:list:{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ ‚ñ∂Ô∏è", callback_data=f"{CC_CALLBACK_PREFIX}:news:list:{page + 1}"))

    if nav_buttons:
        builder.row(*nav_buttons)
        
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"{CC_CALLBACK_PREFIX}:main"))
    return builder.as_markup()