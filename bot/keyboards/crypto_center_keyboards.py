# ===============================================================
# –§–∞–π–ª: bot/keyboards/crypto_center_keyboards.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –û–ø–∏—Å–∞–Ω–∏–µ: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è
# –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞.
# ===============================================================
from typing import List, Dict, Set
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup

def get_crypto_center_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ö°Ô∏è –õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (AI-–ê–Ω–∞–ª–∏–∑)", callback_data="cc_nav:feed")
    builder.button(text="ü§ñ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ì–∞–π–¥—ã –æ—Ç AI", callback_data="cc_nav:guides_menu")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_crypto_center_guides_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–∞–π–¥–æ–≤."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üíß –û—Ö–æ—Ç–∞ –∑–∞ Airdrop'–∞–º–∏", callback_data="cc_nav:airdrops_list:1")
    builder.button(text="‚õèÔ∏è –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤", callback_data="cc_nav:mining_signals")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data="cc_nav:main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_back_to_cc_menu_keyboard(level: str = "main_menu") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    builder = InlineKeyboardBuilder()
    if level == "guides_menu":
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="cc_nav:guides_menu")
    else:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data="cc_nav:main_menu")
    return builder.as_markup()

def get_live_feed_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="cc_nav:feed")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data="cc_nav:main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_airdrops_list_keyboard(airdrops_on_page: List[Dict], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ Airdrop'–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    for airdrop in airdrops_on_page:
        builder.button(
            text=f"{airdrop['name']} ({airdrop['progress_text']})",
            callback_data=f"cc_action:show_airdrop:{airdrop['id']}"
        )
    
    if total_pages > 1:
        prev_page = page - 1 if page > 1 else total_pages
        next_page = page + 1 if page < total_pages else 1
        builder.button(text="‚óÄÔ∏è", callback_data=f"cc_nav:airdrops_list:{prev_page}")
        builder.button(text=f"{page}/{total_pages}", callback_data="do_nothing")
        builder.button(text="‚ñ∂Ô∏è", callback_data=f"cc_nav:airdrops_list:{next_page}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="cc_nav:guides_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_airdrop_details_keyboard(airdrop: Dict, user_progress: Set[int]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ–∫–ª–∏—Å—Ç–æ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Airdrop'–∞."""
    builder = InlineKeyboardBuilder()
    airdrop_id = airdrop.get('id')
    for i, task in enumerate(airdrop.get('tasks', [])):
        status_emoji = "‚úÖ" if i in user_progress else "‚òëÔ∏è"
        builder.button(
            text=f"{status_emoji} {task['name']}",
            callback_data=f"cc_action:toggle_task:{airdrop_id}:{i}"
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É Airdrop'–æ–≤", callback_data="cc_nav:airdrops_list:1")
    builder.adjust(1)
    return builder.as_markup()
