# =================================================================================
# –§–∞–π–ª: bot/keyboards/crypto_center_keyboards.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –ù–û–í–´–ô)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä".
# =================================================================================
from typing import List
from math import ceil
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup

from bot.utils.models import AirdropProject, NewsArticle

CC_CALLBACK_PREFIX = "cc"
PAGE_SIZE = 5

def get_crypto_center_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üíé Airdrop Alpha", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:list:0")
    builder.button(text="‚öôÔ∏è Mining Alpha", callback_data=f"{CC_CALLBACK_PREFIX}:mining:list:0")
    builder.button(text="üì∞ Live –õ–µ–Ω—Ç–∞", callback_data=f"{CC_CALLBACK_PREFIX}:news:list:0")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_airdrop_list_keyboard(projects: List[AirdropProject], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ Airdrop-–ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    for project in projects:
        builder.button(text=f"üîπ {project.name}", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:view:{project.id}")
    builder.adjust(1)
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(builder.button(text="‚¨ÖÔ∏è", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:list:{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(builder.button(text="‚û°Ô∏è", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:list:{page + 1}"))
    if nav_buttons:
        builder.row(*nav_buttons)
        
    builder.row(builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data=f"{CC_CALLBACK_PREFIX}:main"))
    return builder.as_markup()

def get_airdrop_details_keyboard(project: AirdropProject, completed_tasks: List[int]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º –∑–∞–¥–∞—á –¥–ª—è Airdrop-–ø—Ä–æ–µ–∫—Ç–∞."""
    builder = InlineKeyboardBuilder()
    for i, task in enumerate(project.tasks):
        status_emoji = "‚úÖ" if i in completed_tasks else "‚òëÔ∏è"
        builder.button(text=f"{status_emoji} {task}", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:task:{project.id}:{i}")
    builder.adjust(1)
    if project.guide_url:
        builder.row(builder.button(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥", url=project.guide_url))
    builder.row(builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"{CC_CALLBACK_PREFIX}:airdrops:list:0"))
    return builder.as_markup()

def get_mining_alpha_keyboard(signals: List[dict], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤."""
    builder = InlineKeyboardBuilder()
    nav_buttons = []
    if page > 0:
        nav_buttons.append(builder.button(text="‚¨ÖÔ∏è", callback_data=f"{CC_CALLBACK_PREFIX}:mining:list:{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(builder.button(text="‚û°Ô∏è", callback_data=f"{CC_CALLBACK_PREFIX}:mining:list:{page + 1}"))
    if nav_buttons:
        builder.row(*nav_buttons)
    builder.row(builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data=f"{CC_CALLBACK_PREFIX}:main"))
    return builder.as_markup()

def get_news_feed_keyboard(articles: List[NewsArticle], page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç—ã."""
    builder = InlineKeyboardBuilder()
    nav_buttons = []
    if page > 0:
        nav_buttons.append(builder.button(text="‚¨ÖÔ∏è", callback_data=f"{CC_CALLBACK_PREFIX}:news:list:{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(builder.button(text="‚û°Ô∏è", callback_data=f"{CC_CALLBACK_PREFIX}:news:list:{page + 1}"))
    if nav_buttons:
        builder.row(*nav_buttons)
    builder.row(builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data=f"{CC_CALLBACK_PREFIX}:main"))
    return builder.as_markup()
