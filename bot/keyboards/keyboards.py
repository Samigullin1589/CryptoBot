import random
from typing import List, Dict, Any, Set
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config.settings import settings
from bot.utils.models import AsicMiner

PROMO_URL = "https://cutt.ly/5rWGcgYL"
PROMO_TEXTS = [
    "üéÅ –°—É–ø–µ—Ä—Ü–µ–Ω–∞ –Ω–∞ –º–∞–π–Ω–µ—Ä—ã ‚Äì50%", "üî• –ì–æ—Ä—è—á–∏–π –ø—Ä–∞–π—Å: —Å–∫–∏–¥–∫–∞ –¥–æ 30%",
    "‚è≥ –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ ASIC ‚Äì —É—Å–ø–µ–π —Å—Ö–≤–∞—Ç–∏—Ç—å!", "üìâ –¶–µ–Ω–∞-–ø—Ä–æ–≤–∞–ª: ASIC –ø–æ –¥–µ–º–æ-—Ç–∞—Ä–∏—Ñ—É",
    "üíé VIP-–ø—Ä–∞–π—Å —Å–æ —Å–∫–∏–¥–∫–æ–π 40%", "üöÄ –û–±–≤–∞–ª —Ü–µ–Ω: ASIC –æ—Ç 70% MSRP",
    "üè∑Ô∏è MEGA-Sale: ASIC –ø–æ –æ–ø—Ç–æ–≤–æ–π —Ü–µ–Ω–µ", "üí£ –¶–µ–Ω–æ–≤–æ–π –≤–∑—Ä—ã–≤: —Å–∫–∏–¥–∫–∞ –¥–æ 60%",
    "üí• –§–ª–µ—à-–ø—Ä–æ–¥–∞–∂–∞: ASIC –ø–æ —Ü–µ–Ω–µ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞", "üö® –°—Ä–æ—á–Ω–æ: –ø—Ä–∞–π—Å-–ª–æ–≤—É—à–∫–∞ ‚Äì –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!",
]
ITEMS_PER_PAGE = 5

def get_promo_button() -> InlineKeyboardButton:
    return InlineKeyboardButton(text=random.choice(PROMO_TEXTS), url=PROMO_URL)

def get_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    buttons = {
        "üíπ –ö—É—Ä—Å": "menu_price", "‚öôÔ∏è –¢–æ–ø ASIC": "menu_asics",
        "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": "menu_calculator", "üì∞ –ù–æ–≤–æ—Å—Ç–∏": "menu_news",
        "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞": "menu_fear_greed", "‚è≥ –•–∞–ª–≤–∏–Ω–≥": "menu_halving",
        "üì° –°—Ç–∞—Ç—É—Å BTC": "menu_btc_status", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞": "menu_quiz",
        "üíé –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥": "menu_mining",
        "üíé –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä": "menu_crypto_center"
    }
    for text, data in buttons.items():
        builder.button(text=text, callback_data=data)
    builder.adjust(2, 2, 2, 2, 2) 
    builder.row(get_promo_button())
    return builder.as_markup()

def get_price_keyboard():
    builder = InlineKeyboardBuilder()
    for ticker in settings.popular_tickers:
        builder.button(text=ticker, callback_data=f"price_{ticker}")
    builder.adjust(len(settings.popular_tickers))
    builder.row(InlineKeyboardButton(text="‚û°Ô∏è –î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞", callback_data="price_other"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    builder.row(get_promo_button())
    return builder.as_markup()

def get_quiz_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è", callback_data="menu_quiz")
    builder.button(text="‚¨ÖÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="back_to_main_menu")
    builder.adjust(2)
    builder.row(get_promo_button())
    return builder.as_markup()

def get_mining_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üè™ –ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", callback_data="mining_shop")
    builder.button(text="üñ•Ô∏è –ú–æ—è —Ñ–µ—Ä–º–∞", callback_data="mining_my_farm")
    builder.button(text="‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", callback_data="mining_electricity")
    builder.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="mining_invite")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mining_stats")
    builder.button(text="üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="mining_withdraw")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(2, 2, 2, 1)
    builder.row(get_promo_button())
    return builder.as_markup()

def get_asic_shop_keyboard(asics: List[AsicMiner], page: int = 0):
    builder = InlineKeyboardBuilder()
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    for i, asic in enumerate(asics[start_index:end_index]):
        builder.button(
            text=f"‚ñ∂Ô∏è {asic.name} (${asic.profitability:.2f}/–¥–µ–Ω—å)",
            callback_data=f"start_mining_{i + start_index}"
        )
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"shop_page_{page - 1}"))
    if end_index < len(asics):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"shop_page_{page + 1}"))
    builder.adjust(1)
    builder.row(*nav_buttons)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="menu_mining"))
    builder.row(get_promo_button())
    return builder.as_markup()

def get_my_farm_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="menu_mining")
    builder.row(get_promo_button())
    return builder.as_markup()

def get_withdraw_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üéâ –ü–æ–ª—É—á–∏—Ç—å —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞", url=PROMO_URL)
    builder.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="menu_mining")
    builder.row(get_promo_button())
    return builder.as_markup()

def get_electricity_menu_keyboard(current_tariff_name: str, unlocked_tariffs: Set[str]):
    builder = InlineKeyboardBuilder()
    for name, details in settings.ELECTRICITY_TARIFFS.items():
        if name in unlocked_tariffs:
            text = f"‚úÖ {name}" if name == current_tariff_name else f"‚ñ∂Ô∏è {name}"
            callback_data = f"select_tariff_{name}"
            builder.button(text=text, callback_data=callback_data)
        else:
            price = details['unlock_price']
            text = f"üîí {name} (–∫—É–ø–∏—Ç—å –∑–∞ {price:.0f} –º–æ–Ω–µ—Ç)"
            callback_data = f"buy_tariff_{name}"
            builder.button(text=text, callback_data=callback_data)
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="menu_mining"))
    builder.row(get_promo_button())
    return builder.as_markup()

def get_after_action_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.row(get_promo_button())
    return builder.as_markup()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ö–†–ò–ü–¢–û-–¶–ï–ù–¢–†–ê ---

def get_crypto_center_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ö°Ô∏è –õ–µ–Ω—Ç–∞ –ù–æ–≤–æ—Å—Ç–µ–π (Live)", callback_data="crypto_center_feed")
    builder.button(text="ü§ñ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç AI", callback_data="crypto_center_guides")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    builder.row(get_promo_button())
    return builder.as_markup()

def get_crypto_center_guides_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üíß –û—Ö–æ—Ç–∞ –∑–∞ Airdrop'–∞–º–∏ (AI)", callback_data="guides_airdrops")
    builder.button(text="‚õèÔ∏è –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤ (AI)", callback_data="guides_mining")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data="back_to_crypto_center_main")
    builder.adjust(1)
    builder.row(get_promo_button())
    return builder.as_markup()

async def get_airdrops_list_keyboard(airdrops_with_progress: List[Dict[str, Any]]):
    builder = InlineKeyboardBuilder()
    for airdrop_data in airdrops_with_progress:
        builder.button(
            text=f"{airdrop_data['name']} ({airdrop_data['progress_text']})",
            callback_data=f"airdrop_details_{airdrop_data['id']}"
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="crypto_center_guides")
    builder.adjust(1)
    builder.row(get_promo_button())
    return builder.as_markup()

async def get_airdrop_details_keyboard(airdrop: Dict[str, Any], user_progress: List[int]):
    builder = InlineKeyboardBuilder()
    tasks = airdrop.get('tasks', [])
    for i, task_text in enumerate(tasks):
        status_emoji = "‚úÖ" if i in user_progress else "‚òëÔ∏è"
        builder.button(
            text=f"{status_emoji} {task_text}",
            callback_data=f"toggle_task_{airdrop['id']}_{i}"
        )
    if airdrop.get('guide_url'):
        builder.button(text="üîó –ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥", url=airdrop['guide_url'])
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_airdrops_list")
    builder.adjust(1)
    builder.row(get_promo_button())
    return builder.as_markup()
