import random
from typing import List, Dict, Any, Set
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from bot.services.crypto_center_service import CryptoCenterService
from bot.config.settings import settings
from bot.utils.models import AsicMiner

# --- –í–ê–® –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î (–û–°–¢–ê–í–õ–ï–ù –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---

PROMO_URL = "https://cutt.ly/5rWGcgYL"
PROMO_TEXTS = [
    "üéÅ –°—É–ø–µ—Ä—Ü–µ–Ω–∞ –Ω–∞ –º–∞–π–Ω–µ—Ä—ã ‚Äì50%",
    "üî• –ì–æ—Ä—è—á–∏–π –ø—Ä–∞–π—Å: —Å–∫–∏–¥–∫–∞ –¥–æ 30%",
    "‚è≥ –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ ASIC ‚Äì —É—Å–ø–µ–π —Å—Ö–≤–∞—Ç–∏—Ç—å!",
    "üìâ –¶–µ–Ω–∞-–ø—Ä–æ–≤–∞–ª: ASIC –ø–æ –¥–µ–º–æ-—Ç–∞—Ä–∏—Ñ—É",
    "üíé VIP-–ø—Ä–∞–π—Å —Å–æ —Å–∫–∏–¥–∫–æ–π 40%",
    "üöÄ –û–±–≤–∞–ª —Ü–µ–Ω: ASIC –æ—Ç 70% MSRP",
    "üè∑Ô∏è MEGA-Sale: ASIC –ø–æ –æ–ø—Ç–æ–≤–æ–π —Ü–µ–Ω–µ",
    "üí£ –¶–µ–Ω–æ–≤–æ–π –≤–∑—Ä—ã–≤: —Å–∫–∏–¥–∫–∞ –¥–æ 60%",
    "üí• –§–ª–µ—à-–ø—Ä–æ–¥–∞–∂–∞: ASIC –ø–æ —Ü–µ–Ω–µ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞",
    "üö® –°—Ä–æ—á–Ω–æ: –ø—Ä–∞–π—Å-–ª–æ–≤—É—à–∫–∞ ‚Äì –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!",
    "üïµÔ∏è –¢–∞–π–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ ASIC –≤–Ω—É—Ç—Ä–∏",
    "üéØ –ú–µ—Ç–∫–∏–π –ø—Ä–∞–π—Å: —Ü–µ–Ω—ã —Å–Ω–∏–∂–µ–Ω—ã –Ω–∞ 35%",
    "ü§ë ASIC –ø–æ —Ü–µ–Ω–∞–º –ß—ë—Ä–Ω–æ–π –ø—è—Ç–Ω–∏—Ü—ã",
    "üîì –£–∑–Ω–∞–π —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–Ω—É ‚Äì –º–∏–Ω—É—Å 45%",
    "üö™ –ó–∞–∫—Ä—ã—Ç–∞—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ ASIC ‚Äì –≤—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ",
    "üíå –ü—Ä–∞–π—Å-–ª–∏—Å—Ç VIP —Å –±–æ–Ω—É—Å–æ–º –≤–Ω—É—Ç—Ä–∏",
    "ü•∑ –ù–∏–Ω–¥–∑—è-–ø—Ä–∞–π—Å: —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ 40%",
    "üéâ Crazy Sale: ASIC –ø–æ —Å—É–ø–µ—Ä-—Ü–µ–Ω–∞–º",
    "üå™Ô∏è –¶–µ–Ω–æ–≤–æ–π —à—Ç–æ—Ä–º: —Å–∫–∏–¥–∫–∏ –¥–æ 55%",
    "‚è∞ –í—Ä–µ–º—è —Å–∫–∏–¥–æ–∫ –Ω–∞ ASIC –∏—Å—Ç–µ–∫–∞–µ—Ç!",
    "üíº PRO-–ø—Ä–∞–π—Å –¥–ª—è –º–∞–π–Ω–∏–Ω–≥-–ø—Ä–æ—Ñ–∏",
    "üß® –ë–æ–º–±–∞-—Å–∫–∏–¥–∫–∞: ASIC –¥–µ—à–µ–≤–ª–µ —Ä—ã–Ω–∫–∞",
    "üèÉ –£—Å–ø–µ–π –ø–æ–π–º–∞—Ç—å –≤—ã–≥–æ–¥–Ω—É—é —Ü–µ–Ω—É!",
    "üìÖ –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è: ASIC –ø–æ —Å–ø–µ—Ü—Ü–µ–Ω–µ",
    "üé≤ ASIC-—Ä—É–ª–µ—Ç–∫–∞: —Ü–µ–Ω—ã —É–ø–∞–ª–∏ –Ω–∞ 50%",
    "üîê –°–∫—Ä—ã—Ç–∞—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ ASIC",
    "üéà –õ—ë–≥–∫–∏–π –≤—Ö–æ–¥ –≤ –º–∞–π–Ω–∏–Ω–≥: ASIC –¥–µ—à–µ–≤–ª–µ",
    "ü•≥ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –ø—Ä–∞–π—Å-—à–æ–∫ –Ω–∞ ASIC",
    "üíπ Bull-–ø—Ä–∞–π—Å: –º–æ—â–Ω—ã–µ ASIC –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ"
]
ITEMS_PER_PAGE = 5

def get_promo_button() -> InlineKeyboardButton:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –ø—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç–æ–º."""
    return InlineKeyboardButton(text=random.choice(PROMO_TEXTS), url=PROMO_URL)

# --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í–ù–ï–°–ï–ù–´ –¢–û–õ–¨–ö–û –ó–î–ï–°–¨ ---

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    buttons = {
        "üíπ –ö—É—Ä—Å": "menu_price", "‚öôÔ∏è –¢–æ–ø ASIC": "menu_asics",
        "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": "menu_calculator", "üì∞ –ù–æ–≤–æ—Å—Ç–∏": "menu_news",
        "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞": "menu_fear_greed", "‚è≥ –•–∞–ª–≤–∏–Ω–≥": "menu_halving",
        "üì° –°—Ç–∞—Ç—É—Å BTC": "menu_btc_status", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞": "menu_quiz",
        "üíé –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥": "menu_mining",
        # üëá –î–û–ë–ê–í–õ–ï–ù–ê –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        "üíé –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä": "menu_crypto_center"
    }
    for text, data in buttons.items():
        builder.button(text=text, callback_data=data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à—É —Ä–∞—Å–∫–ª–∞–¥–∫—É, –¥–æ–±–∞–≤–∏–≤ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
    builder.adjust(2, 2, 2, 2, 2) 
    builder.row(get_promo_button())
    return builder.as_markup()

# --- –í–ê–® –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î (–û–°–¢–ê–í–õ–ï–ù –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---

def get_price_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç."""
    builder = InlineKeyboardBuilder()
    for ticker in settings.popular_tickers:
        builder.button(text=ticker, callback_data=f"price_{ticker}")
    builder.adjust(len(settings.popular_tickers))
    builder.row(InlineKeyboardButton(text="‚û°Ô∏è –î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞", callback_data="price_other"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    builder.row(get_promo_button())
    return builder.as_markup()

def get_quiz_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã—Ö–æ–¥–∞.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è", callback_data="menu_quiz")
    builder.button(text="‚¨ÖÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="back_to_main_menu")
    builder.adjust(2)
    builder.row(get_promo_button())
    return builder.as_markup()

def get_mining_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥'."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üè™ –ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", callback_data="mining_shop")
    builder.button(text="üñ•Ô∏è –ú–æ—è —Ñ–µ—Ä–º–∞", callback_data="mining_my_farm")
    builder.button(text="‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", callback_data="mining_electricity")
    builder.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="mining_invite")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mining_stats")
    builder.button(text="üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="mining_withdraw")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(2, 2, 2, 1)
    builder.row(get_promo_button())
    return builder.as_markup()

def get_asic_shop_keyboard(asics: List[AsicMiner], page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ASIC —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    for i, asic in enumerate(asics[start_index:end_index]):
        builder.button(
            text=f"‚ñ∂Ô∏è {asic.name} (${asic.profitability:.2f}/–¥–µ–Ω—å)",
            callback_data=f"start_mining_{i + start_index}"
        )
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"shop_page_{page - 1}"))
    if end_index < len(asics):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"shop_page_{page + 1}"))
    builder.adjust(1)
    builder.row(*nav_buttons)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="menu_mining"))
    builder.row(get_promo_button())
    return builder.as_markup()

def get_my_farm_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ—è —Ñ–µ—Ä–º–∞'."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="menu_mining")
    builder.row(get_promo_button())
    return builder.as_markup()

def get_withdraw_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üéâ –ü–æ–ª—É—á–∏—Ç—å —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞", url=PROMO_URL)
    builder.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="menu_mining")
    builder.row(get_promo_button())
    return builder.as_markup()

def get_electricity_menu_keyboard(current_tariff_name: str, unlocked_tariffs: Set[str]):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é."""
    builder = InlineKeyboardBuilder()
    for name, details in settings.ELECTRICITY_TARIFFS.items():
        if name in unlocked_tariffs:
            text = f"‚úÖ {name}" if name == current_tariff_name else f"‚ñ∂Ô∏è {name}"
            callback_data = f"select_tariff_{name}"
            builder.button(text=text, callback_data=callback_data)
        else:
            price = details['unlock_price']
            text = f"üîí {name} (–∫—É–ø–∏—Ç—å –∑–∞ {price:.0f} –º–æ–Ω–µ—Ç)"
            callback_data = f"buy_tariff_{name}"
            builder.button(text=text, callback_data=callback_data)
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="menu_mining"))
    builder.row(get_promo_button())
    return builder.as_markup()

def get_after_action_keyboard():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞ –∫—É—Ä—Å–∞).
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.row(get_promo_button())
    return builder.as_markup()

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–†–ò–ü–¢–û-–¶–ï–ù–¢–†–ê ---

def get_crypto_center_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ö°Ô∏è –õ–µ–Ω—Ç–∞ –ù–æ–≤–æ—Å—Ç–µ–π (Live)", callback_data="crypto_center_feed")
    builder.button(text="üìö –ö—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ì–∞–π–¥—ã", callback_data="crypto_center_guides")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    builder.row(get_promo_button())
    return builder.as_markup()

def get_crypto_center_guides_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –≥–∞–π–¥–æ–≤."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üíß –û—Ö–æ—Ç–∞ –∑–∞ Airdrop'–∞–º–∏", callback_data="guides_airdrops")
    builder.button(text="‚õèÔ∏è –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤", callback_data="guides_mining")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data="back_to_crypto_center_main")
    builder.adjust(1)
    builder.row(get_promo_button())
    return builder.as_markup()

async def get_airdrops_list_keyboard(crypto_center_service: CryptoCenterService, redis_client: redis.Redis, user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º Airdrop-–ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    builder = InlineKeyboardBuilder()
    airdrops = crypto_center_service.get_all_airdrops()
    
    for airdrop in airdrops:
        progress = await crypto_center_service.get_user_progress(user_id, airdrop['id'])
        total_tasks = len(airdrop['tasks'])
        progress_text = f"‚úÖ {len(progress)}/{total_tasks}"
        
        builder.button(
            text=f"{airdrop['name']} ({progress_text})",
            callback_data=f"airdrop_details_{airdrop['id']}"
        )
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–∞–π–¥–æ–≤", callback_data="crypto_center_guides")
    builder.adjust(1)
    builder.row(get_promo_button())
    return builder.as_markup()

async def get_airdrop_details_keyboard(airdrop: Dict[str, Any], user_progress: List[int]):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ–∫–ª–∏—Å—Ç–æ–º –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Airdrop."""
    builder = InlineKeyboardBuilder()
    
    for i, task_text in enumerate(airdrop['tasks']):
        status_emoji = "‚úÖ" if i in user_progress else "‚òëÔ∏è"
        builder.button(
            text=f"{status_emoji} {task_text}",
            callback_data=f"toggle_task_{airdrop['id']}_{i}"
        )
        
    if airdrop.get('guide_url'):
        builder.button(text="üîó –ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥", url=airdrop['guide_url'])
        
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_airdrops_list")
    builder.adjust(1)
    builder.row(get_promo_button())
    return builder.as_markup()
