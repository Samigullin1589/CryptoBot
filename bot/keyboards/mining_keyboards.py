# ===============================================================
# –§–∞–π–ª: bot/keyboards/mining_keyboards.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∏–≥—Ä—ã "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥".
# ===============================================================

from typing import List
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup

from bot.utils.models import AsicMiner
from bot.utils.text_utils import normalize_asic_name

PAGE_SIZE = 5 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Å–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞–≥–∞–∑–∏–Ω–∞

def get_mining_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="game_nav:shop")
    builder.button(text="üè† –ú–æ—è —Ñ–µ—Ä–º–∞", callback_data="game_nav:my_farm")
    builder.button(text="üí° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", callback_data="game_nav:electricity")
    builder.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="game_action:invite")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="nav:main_menu")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_shop_keyboard(asics: List[AsicMiner], page: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    start_offset = page * PAGE_SIZE
    end_offset = start_offset + PAGE_SIZE
    
    # –í—ã–≤–æ–¥–∏–º –∞—Å–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for asic in asics[start_offset:end_offset]:
        # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ –∏–Ω–¥–µ–∫—Å–∞ ---
        asic_id = normalize_asic_name(asic.name)
        builder.button(
            text=f"‚úÖ {asic.name} - {asic.profitability:,.2f}$/–¥–µ–Ω—å",
            callback_data=f"game_action:start:{asic_id}"
        )

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(("‚¨ÖÔ∏è", f"game_shop_page:{page - 1}"))
    if end_offset < len(asics):
        nav_buttons.append(("‚û°Ô∏è", f"game_shop_page:{page + 1}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    for text, callback_data in nav_buttons:
        builder.button(text=text, callback_data=callback_data)

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="nav:mining_game")
    builder.adjust(1) # –ö–∞–∂–¥—ã–π –∞—Å–∏–∫ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∑–∞—Ç–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
    return builder.as_markup()

def get_my_farm_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üí∞ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="game_action:withdraw")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="nav:mining_game")
    builder.adjust(1)
    return builder.as_markup()

def get_withdraw_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    builder.button(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", callback_data="nav:mining_game")
    return builder.as_markup()

def get_electricity_menu_keyboard(tariffs: dict, user_tariffs: List[str], current_tariff: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for name, info in tariffs.items():
        if name in user_tariffs:
            status = " (–í—ã–±—Ä–∞–Ω)" if name == current_tariff else " (–î–æ—Å—Ç—É–ø–µ–Ω)"
            callback = f"game_tariff_select:{name}"
        else:
            status = f" ({info['unlock_price']} –º–æ–Ω–µ—Ç)"
            callback = f"game_tariff_buy:{name}"
        builder.button(text=f"{name}{status}", callback_data=callback)
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="nav:mining_game")
    builder.adjust(1)
    return builder.as_markup()