# ===============================================================
# –§–∞–π–ª: bot/keyboards/mining_keyboards.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∏–≥—Ä—ã
# "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥" –∏ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.
# ===============================================================
from typing import List, Set
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config.settings import settings
from bot.utils.models import AsicMiner

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ú–∞–π–Ω–∏–Ω–≥–∞" ---

def get_mining_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏–≥—Ä—ã '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥'."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üè™ –ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", callback_data="game_nav:shop")
    builder.button(text="üñ•Ô∏è –ú–æ—è —Ñ–µ—Ä–º–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="game_nav:my_farm")
    builder.button(text="‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", callback_data="game_nav:electricity")
    builder.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="game_action:invite")
    builder.button(text="üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="game_action:withdraw")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav:main_menu")
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup()

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def get_shop_keyboard(asics: List[AsicMiner], page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    items_per_page = settings.game.items_per_page
    start_index = page * items_per_page
    end_index = start_index + items_per_page

    for i, asic in enumerate(asics[start_index:end_index]):
        builder.button(
            text=f"‚ñ∂Ô∏è {asic.name} (${asic.profitability:.2f}/–¥–µ–Ω—å)",
            callback_data=f"game_action:start:{i + start_index}"
        )
    builder.adjust(1)

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"game_shop_page:{page - 1}"))
    if end_index < len(asics):
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"game_shop_page:{page + 1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="nav:mining_game"))
    return builder.as_markup()
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

def get_my_farm_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ—è —Ñ–µ—Ä–º–∞'."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="nav:mining_game")
    return builder.as_markup()

def get_withdraw_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤."""
    builder = InlineKeyboardBuilder()
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ URL –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    partner_url = settings.game.partner_url
    if partner_url:
        builder.button(text="üéâ –ü–æ–ª—É—á–∏—Ç—å —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞", url=partner_url)
    builder.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="nav:mining_game")
    return builder.as_markup()

def get_electricity_menu_keyboard(current_tariff_name: str, unlocked_tariffs: Set[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é."""
    builder = InlineKeyboardBuilder()
    for name, details in settings.game.electricity_tariffs.items():
        if name in unlocked_tariffs:
            text = f"‚úÖ {name}" if name == current_tariff_name else f"‚ñ∂Ô∏è {name}"
            callback_data = f"game_tariff_select:{name}"
            builder.button(text=text, callback_data=callback_data)
        else:
            price = details['unlock_price']
            text = f"üîí {name} (–∫—É–ø–∏—Ç—å –∑–∞ {price:.0f} –º–æ–Ω–µ—Ç)"
            callback_data = f"game_tariff_buy:{name}"
            builder.button(text=text, callback_data=callback_data)
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞", callback_data="nav:mining_game"))
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---

def get_calculator_cancel_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="calc_action:cancel")
    return builder.as_markup()

def get_currency_selection_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ."""
    builder = InlineKeyboardBuilder()
    builder.button(text="USD ($)", callback_data="calc_currency:usd")
    builder.button(text="RUB (‚ÇΩ)", callback_data="calc_currency:rub")
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="calc_action:cancel"))
    return builder.as_markup()

def get_asic_selection_keyboard(asics: List[AsicMiner], page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ ASIC –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    items_per_page = 8
    start = page * items_per_page
    end = start + items_per_page

    for i, asic in enumerate(asics[start:end]):
        builder.button(text=f"‚úÖ {asic.name}", callback_data=f"calc_select_asic:{i + start}")
    
    builder.adjust(2)
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"calc_page:{page - 1}"))
    if end < len(asics):
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"calc_page:{page + 1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
        
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="calc_action:cancel"))
    return builder.as_markup()
