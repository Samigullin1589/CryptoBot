# =================================================================================
# –§–∞–π–ª: bot/keyboards/game_keyboards.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–õ–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥".
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫ CallbackData.
# =================================================================================
from typing import List, Dict
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.utils.models import AsicMiner
from bot.config.settings import ElectricityTariff
from .callback_factories import GameCallback, MenuCallback

ASICS_PER_PAGE = 5

def get_game_main_menu_keyboard(is_session_active: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
    builder = InlineKeyboardBuilder()
    if not is_session_active:
        builder.button(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data=GameCallback(action="start_session").pack())
    
    builder.button(text="üõ† –ê–Ω–≥–∞—Ä", callback_data=GameCallback(action="hangar", page=0).pack())
    builder.button(text="üõí –†—ã–Ω–æ–∫", callback_data=GameCallback(action="market").pack())
    builder.button(text="üí° –¢–∞—Ä–∏—Ñ—ã —ç/—ç", callback_data=GameCallback(action="tariffs").pack())
    builder.button(text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data=GameCallback(action="leaderboard").pack())
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=MenuCallback(level=0, action="main").pack())
    
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_hangar_keyboard(asics: List[AsicMiner], page: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–Ω–≥–∞—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º ASIC –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏."""
    builder = InlineKeyboardBuilder()
    
    total_pages = (len(asics) + ASICS_PER_PAGE - 1) // ASICS_PER_PAGE
    start_index = page * ASICS_PER_PAGE
    end_index = start_index + ASICS_PER_PAGE

    if not asics:
        builder.button(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫", callback_data=GameCallback(action="market").pack())
    else:
        for asic in asics[start_index:end_index]:
            builder.button(text=f"‚ñ∂Ô∏è {asic.name}", callback_data=GameCallback(action="session_start_confirm", value=asic.id).pack())
    
    builder.adjust(1)

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=GameCallback(action="hangar", page=page - 1).pack()))
    if end_index < len(asics):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=GameCallback(action="hangar", page=page + 1).pack()))
    
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∏–≥—Ä—ã", callback_data=GameCallback(action="main_menu").pack())
    builder.adjust(1)
    return builder.as_markup()

def get_electricity_menu_keyboard(
    all_tariffs: Dict[str, ElectricityTariff],
    owned_tariffs: List[str],
    current_tariff: str
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é."""
    builder = InlineKeyboardBuilder()
    for name, tariff in all_tariffs.items():
        if name in owned_tariffs:
            status = " (–í—ã–±—Ä–∞–Ω)" if name == current_tariff else " (–î–æ—Å—Ç—É–ø–µ–Ω)"
            builder.button(text=f"‚úÖ {name}{status}", callback_data=GameCallback(action="tariff_select", value=name).pack())
        else:
            builder.button(text=f"üõí {name} ({tariff.unlock_price} –º–æ–Ω–µ—Ç)", callback_data=GameCallback(action="tariff_buy", value=name).pack())
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∏–≥—Ä—ã", callback_data=GameCallback(action="main_menu").pack())
    builder.adjust(1)
    return builder.as_markup()