# ===============================================================
# –§–∞–π–ª: bot/keyboards/asic_keyboards.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –û–ø–∏—Å–∞–Ω–∏–µ: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
# —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º ASIC.
# ===============================================================
from typing import List, Dict, Any
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup

def get_top_asics_keyboard(page: int, total_pages: int, sort_by: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç–æ–ø–∞ ASIC.
    
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :param total_pages: –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    :param sort_by: –¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    prev_page = page - 1 if page > 1 else total_pages
    next_page = page + 1 if page < total_pages else 1
    
    builder.button(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"top_asics:page:{prev_page}:{sort_by}")
    builder.button(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}", callback_data="do_nothing")
    builder.button(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"top_asics:page:{next_page}:{sort_by}")

    # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    new_sort_by = "efficiency" if sort_by == "profitability" else "profitability"
    sort_text = "‚ö°Ô∏è –ü–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" if sort_by == "profitability" else "üí∞ –ü–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"
    builder.button(text=sort_text, callback_data=f"top_asics:page:1:{new_sort_by}")
    
    builder.adjust(3, 1)
    return builder.as_markup()

def get_electricity_tariff_keyboard(tariffs: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é.
    
    :param tariffs: –°–ª–æ–≤–∞—Ä—å —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    builder = InlineKeyboardBuilder()
    for tariff_name in tariffs.keys():
        builder.button(text=tariff_name, callback_data=f"set_tariff:{tariff_name}")
    
    builder.adjust(1)
    return builder.as_markup()
