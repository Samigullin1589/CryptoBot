import logging
import redis.asyncio as redis
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.services.crypto_center_service import CryptoCenterService
from bot.services.admin_service import AdminService
from bot.keyboards.keyboards import (
    get_crypto_center_main_menu_keyboard, 
    get_crypto_center_guides_menu_keyboard,
    get_airdrops_list_keyboard, 
    get_airdrop_details_keyboard
)

router = Router()
logger = logging.getLogger(__name__)

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ö–†–ò–ü–¢–û-–¶–ï–ù–¢–†–ê ---

@router.message(F.text == "üíé –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä")
async def handle_crypto_center_menu(message: Message, admin_service: AdminService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–¥–µ–ª–æ–≤."""
    await admin_service.track_command_usage("üíé –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä")
    text = (
        "<b>üíé –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä</b>\n\n"
        "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª—å.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    )
    await message.answer(text, reply_markup=get_crypto_center_main_menu_keyboard())

@router.callback_query(F.data == "back_to_crypto_center_main")
async def back_to_crypto_center_main_menu(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    text = (
        "<b>üíé –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä</b>\n\n"
        "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª—å.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    )
    await call.message.edit_text(text, reply_markup=get_crypto_center_main_menu_keyboard())
    await call.answer()
    
# --- –†–ê–ó–î–ï–õ: –õ–ï–ù–¢–ê –ù–û–í–û–°–¢–ï–ô ---

@router.callback_query(F.data == "crypto_center_feed")
async def handle_live_feed(call: CallbackQuery, crypto_center_service: CryptoCenterService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∞–º–æ–æ–±–Ω–æ–≤–ª—è–µ–º—É—é –ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π."""
    await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    news_feed = await crypto_center_service.fetch_live_feed()
    
    if not news_feed:
        text = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        text = "<b>‚ö°Ô∏è –õ–µ–Ω—Ç–∞ –ö—Ä–∏–ø—Ç–æ-–ù–æ–≤–æ—Å—Ç–µ–π (Live)</b>\n\n"
        for item in news_feed:
            text += f"‚ñ™Ô∏è <a href='{item['url']}'>{item['title']}</a>\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–µ–Ω—Ç—É", callback_data="crypto_center_feed")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data="back_to_crypto_center_main")
    builder.adjust(1)
    
    await call.message.edit_text(text, reply_markup=builder.as_markup(), disable_web_page_preview=True)
    await call.answer()

# --- –†–ê–ó–î–ï–õ –ö–£–†–ê–¢–û–†–°–ö–ò–• –ì–ê–ô–î–û–í ---

@router.callback_query(F.data == "crypto_center_guides")
async def handle_guides_menu(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥–∞–π–¥–æ–≤."""
    text = "<b>üìö –ö—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ì–∞–π–¥—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await call.message.edit_text(text, reply_markup=get_crypto_center_guides_menu_keyboard())
    await call.answer()

# --- –ü–û–î–†–ê–ó–î–ï–õ AIRDROPS ---

@router.callback_query(F.data == "guides_airdrops")
async def handle_airdrops_list(call: CallbackQuery, crypto_center_service: CryptoCenterService, redis_client: redis.Redis):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Airdrop-–ø—Ä–æ–µ–∫—Ç–æ–≤."""
    text = (
        "<b>üíß –û—Ö–æ—Ç–∞ –∑–∞ Airdrop'–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —á–µ–∫–ª–∏—Å—Ç –∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å."
    )
    
    # --- –õ–û–ì–ò–ö–ê –ü–û–î–ì–û–¢–û–í–ö–ò –î–ê–ù–ù–´–• –ü–ï–†–ï–ù–ï–°–ï–ù–ê –°–Æ–î–ê –ò–ó KEYBOARDS.PY ---
    user_id = call.from_user.id
    all_airdrops = crypto_center_service.get_all_airdrops()
    airdrops_with_progress = []
    for airdrop in all_airdrops:
        progress = await crypto_center_service.get_user_progress(user_id, airdrop['id'])
        total_tasks = len(airdrop['tasks'])
        progress_text = f"‚úÖ {len(progress)}/{total_tasks}"
        airdrops_with_progress.append({
            "name": airdrop['name'],
            "id": airdrop['id'],
            "progress_text": progress_text
        })
    # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ü–û–î–ì–û–¢–û–í–ö–ò –î–ê–ù–ù–´–• ---

    # –ü–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = await get_airdrops_list_keyboard(airdrops_with_progress)
    
    await call.message.edit_text(text, reply_markup=keyboard)
    await call.answer()


@router.callback_query(F.data.startswith("airdrop_details_"))
async def show_airdrop_details(call: CallbackQuery, crypto_center_service: CryptoCenterService, redis_client: redis.Redis):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º Airdrop –ø—Ä–æ–µ–∫—Ç–µ."""
    airdrop_id = call.data.split("_")[2]
    airdrop = crypto_center_service.get_airdrop_by_id(airdrop_id)

    if not airdrop:
        await call.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    user_progress = await crypto_center_service.get_user_progress(call.from_user.id, airdrop_id)
    keyboard = await get_airdrop_details_keyboard(airdrop, user_progress)

    text = (
        f"<b>–ü—Ä–æ–µ–∫—Ç: {airdrop['name']}</b> ({airdrop['status']})\n\n"
        f"{airdrop['description']}\n\n"
        f"<b>–ß–µ–∫–ª–∏—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Airdrop:</b>"
    )
    
    await call.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    await call.answer()


@router.callback_query(F.data.startswith("toggle_task_"))
async def toggle_task(call: CallbackQuery, crypto_center_service: CryptoCenterService, redis_client: redis.Redis):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∑–∞–¥–∞—á—É –≤ —á–µ–∫–ª–∏—Å—Ç–µ."""
    try:
        _, airdrop_id, task_index_str = call.data.split("_")
        task_index = int(task_index_str)
    except (ValueError, IndexError):
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    airdrop = crypto_center_service.get_airdrop_by_id(airdrop_id)
    if not airdrop or task_index >= len(airdrop['tasks']):
        await call.answer("‚ùå –ó–∞–¥–∞—á–∞ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    await crypto_center_service.toggle_task_status(call.from_user.id, airdrop_id, task_index)
    
    user_progress = await crypto_center_service.get_user_progress(call.from_user.id, airdrop_id)
    new_keyboard = await get_airdrop_details_keyboard(airdrop, user_progress)

    await call.message.edit_reply_markup(reply_markup=new_keyboard)
    await call.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(F.data == "back_to_airdrops_list")
async def back_to_airdrops_list(call: CallbackQuery, crypto_center_service: CryptoCenterService, redis_client: redis.Redis):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É Airdrop –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    await handle_airdrops_list(call, crypto_center_service, redis_client)

# --- –ü–û–î–†–ê–ó–î–ï–õ MINING SIGNALS ---

@router.callback_query(F.data == "guides_mining")
async def handle_mining_signals_list(call: CallbackQuery, crypto_center_service: CryptoCenterService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤."""
    signals = crypto_center_service.get_all_mining_signals()
    
    if not signals:
        text = "<b>‚õèÔ∏è –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!"
    else:
        text = "<b>‚õèÔ∏è –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n"
        for signal in signals:
            text += (
                f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"<b>{signal['name']}</b> (–°—Ç–∞—Ç—É—Å: {signal['status']})\n"
                f"<i>{signal['description']}</i>\n"
                f"<b>–ê–ª–≥–æ—Ä–∏—Ç–º:</b> <code>{signal['algorithm']}</code>\n"
                f"<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {signal['hardware']}\n"
                f"<a href='{signal['guide_url']}'>–ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥</a>"
            )
            
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–∞–π–¥–æ–≤", callback_data="crypto_center_guides")
    
    await call.message.edit_text(text, reply_markup=builder.as_markup(), disable_web_page_preview=True)
    await call.answer()
