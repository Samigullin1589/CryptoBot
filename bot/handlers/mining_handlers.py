# ===============================================================
# –§–∞–π–ª: bot/handlers/mining_handlers.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–õ–¨–§–ê-–í–ï–†–°–ò–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã,
# –≤–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–∏ –ø—É–ª–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å–∏–∫–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö. –£–ª—É—á—à–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è.
# ===============================================================
import time
import logging
import re
from typing import Union, List
from math import floor
import redis.asyncio as redis
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from bot.config.settings import settings
from bot.services.asic_service import AsicService
from bot.services.admin_service import AdminService
from bot.services.mining_service import MiningService
from bot.services.market_data_service import MarketDataService
from bot.utils.states import ProfitCalculator
from bot.utils.models import AsicMiner
from bot.keyboards.keyboards import (
    get_mining_menu_keyboard, get_asic_shop_keyboard,
    get_my_farm_keyboard, get_withdraw_keyboard, get_electricity_menu_keyboard
)
from bot.utils.helpers import get_message_and_chat_id, sanitize_html

router = Router()
logger = logging.getLogger(__name__)

# ===============================================================
# --- –ë–õ–û–ö 1: –í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –§–ï–†–ú–ê (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
# ===============================================================

@router.callback_query(F.data == "menu_mining")
async def handle_mining_menu(call: CallbackQuery, admin_service: AdminService):
    await admin_service.track_command_usage("üíé –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥")
    text = "<b>üíé –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ú–∞–π–Ω–∏–Ω–≥–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await call.message.edit_text(text, reply_markup=get_mining_menu_keyboard())

async def show_shop_page(message: Message, asic_service: AsicService, page: int = 0):
    asics, _ = await asic_service.get_top_asics(count=1000, electricity_cost=0.0)
    if not asics:
        await message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_mining_menu_keyboard())
        return
    text = "üè™ <b>–ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ ASIC –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:"
    keyboard = get_asic_shop_keyboard(asics, page)
    await message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "mining_shop")
async def handle_shop_menu(call: CallbackQuery, asic_service: AsicService, admin_service: AdminService):
    await admin_service.track_command_usage("üè™ –ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
    await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ...")
    await show_shop_page(call.message, asic_service, 0)

@router.callback_query(F.data.startswith("shop_page_"))
async def handle_shop_pagination(call: CallbackQuery, asic_service: AsicService):
    page = int(call.data.split("_")[2])
    await show_shop_page(call.message, asic_service, page)

@router.callback_query(F.data.startswith("start_mining_"))
async def handle_start_mining(call: CallbackQuery, redis_client: redis.Redis, scheduler: AsyncIOScheduler, asic_service: AsicService, admin_service: AdminService):
    user_id = call.from_user.id
    if await redis_client.exists(f"mining:session:{user_id}"):
        await call.answer("‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –æ–¥–Ω–∞ –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.", show_alert=True)
        return
    
    asic_index = int(call.data.split("_")[2])
    all_asics, _ = await asic_service.get_top_asics(count=1000, electricity_cost=0.0)
    if asic_index >= len(all_asics):
        await call.answer("‚ùå –û—à–∏–±–∫–∞. –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω.", show_alert=True)
        return
        
    selected_asic = all_asics[asic_index]
    await admin_service.track_command_usage(f"–ó–∞–ø—É—Å–∫: {selected_asic.name}")
    run_date = datetime.now() + timedelta(seconds=settings.MINING_DURATION_SECONDS)
    job = scheduler.add_job(
        'bot.services.mining_tasks:end_mining_session', 'date',
        run_date=run_date, args=[user_id], id=f"mining_job_{user_id}", replace_existing=True
    )
    session_data = {
        "start_time": int(time.time()), "job_id": job.id, "asic_name": selected_asic.name,
        "asic_profitability_per_day": selected_asic.profitability, "asic_power": selected_asic.power or 0
    }
    await redis_client.hset(f"mining:session:{user_id}", mapping=session_data)
    await call.message.edit_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –Ω–∞ <b>{selected_asic.name}</b>!\n\n"
        f"–°–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–∏—Ç—Å—è {settings.MINING_DURATION_SECONDS / 3600:.0f} —á–∞—Å–æ–≤. "
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        reply_markup=get_mining_menu_keyboard()
    )
    logger.info(f"User {user_id} started mining session with ASIC: {selected_asic.name}")

@router.callback_query(F.data == "mining_my_farm")
async def handle_my_farm(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    await admin_service.track_command_usage("üñ•Ô∏è –ú–æ—è —Ñ–µ—Ä–º–∞")
    user_id = call.from_user.id
    session_data = await redis_client.hgetall(f"mining:session:{user_id}")
    if not session_data:
        text = "üñ•Ô∏è <b>–ú–æ—è —Ñ–µ—Ä–º–∞</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–π. –ó–∞–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ!"
        await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())
        return

    start_time_bytes = session_data.get(b"start_time")
    start_time = int(start_time_bytes) if start_time_bytes else 0
    profitability_per_day_bytes = session_data.get(b"asic_profitability_per_day")
    profitability_per_day = float(profitability_per_day_bytes) if profitability_per_day_bytes else 0.0
    asic_name_bytes = session_data.get(b'asic_name')
    asic_name = asic_name_bytes.decode('utf-8') if asic_name_bytes else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    elapsed_seconds = int(time.time()) - start_time
    remaining_seconds = max(0, settings.MINING_DURATION_SECONDS - elapsed_seconds)
    profit_per_second = profitability_per_day / (24 * 3600)
    earned_so_far = elapsed_seconds * profit_per_second
    m, s = divmod(remaining_seconds, 60)
    h, m = divmod(m, 60)
    remaining_time_str = f"{int(h):02d}:{int(m):02d}:{int(s):02d}"
    text = (
        f"üñ•Ô∏è <b>–ú–æ—è —Ñ–µ—Ä–º–∞</b>\n\n"
        f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–±–æ—Ç–µ\n"
        f"‚öôÔ∏è <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {sanitize_html(asic_name)}\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> <code>{remaining_time_str}</code>\n"
        f"üí∞ <b>–ù–∞–º–∞–π–Ω–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏:</b> ~${earned_so_far:.4f}"
    )
    await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())

@router.callback_query(F.data == "mining_withdraw")
async def handle_withdraw(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    await admin_service.track_command_usage("üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
    user_id = call.from_user.id
    if await redis_client.exists(f"mining:session:{user_id}"):
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º.", show_alert=True)
        return
    balance_bytes = await redis_client.get(f"user:{user_id}:balance")
    balance = float(balance_bytes) if balance_bytes else 0.0
    if balance < 1.0:
        await call.answer("‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –≤—ã–≤–æ–¥–∞. –ù–∞–∫–æ–ø–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –º–æ–Ω–µ—Ç—É.", show_alert=True)
        return
        
    DISCOUNT_COIN_RATIO = 50 
    base_discount = 1
    bonus_discount = floor(balance / DISCOUNT_COIN_RATIO)
    total_discount = min(10, base_discount + bonus_discount)
    text = (
        f"üéâ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
        f"–í—ã –æ–±–º–µ–Ω—è–ª–∏ <b>{balance:.2f} –º–æ–Ω–µ—Ç</b> –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É.\n\n"
        f"üî• –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞: <b>{total_discount}%</b>\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."
    )
    async with redis_client.pipeline() as pipe:
        pipe.set(f"user:{user_id}:balance", 0)
        pipe.incrbyfloat(f"user:{user_id}:total_withdrawn", balance)
        await pipe.execute()
    logger.info(f"User {user_id} withdrew {balance:.2f} coins for a {total_discount}% discount.")
    await call.message.edit_text(text, reply_markup=get_withdraw_keyboard())

@router.callback_query(F.data == "mining_invite")
async def handle_invite_friend(call: CallbackQuery, bot: Bot, admin_service: AdminService):
    await admin_service.track_command_usage("ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
    user_id = call.from_user.id
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    text = (
        f"ü§ù <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ "
        f"<b>{settings.REFERRAL_BONUS_AMOUNT} –º–æ–Ω–µ—Ç</b> –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!\n\n"
        f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
        f"<code>{referral_link}</code>"
    )
    await call.answer()
    await call.message.answer(text, reply_markup=get_mining_menu_keyboard())

@router.callback_query(F.data == "mining_stats")
async def handle_my_stats(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    await admin_service.track_command_usage("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ú–∞–π–Ω–∏–Ω–≥)")
    user_id = call.from_user.id
    async with redis_client.pipeline() as pipe:
        pipe.get(f"user:{user_id}:balance")
        pipe.get(f"user:{user_id}:total_earned")
        pipe.get(f"user:{user_id}:total_withdrawn")
        pipe.scard(f"user:{user_id}:referrals")
        results = await pipe.execute()
    
    balance = float(results[0]) if results[0] else 0.0
    total_earned = float(results[1]) if results[1] else 0.0
    total_withdrawn = float(results[2]) if results[2] else 0.0
    referrals_count = int(results[3]) if results[3] else 0
    text = (
        f"üìä <b>–í–∞—à–∞ –∏–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} –º–æ–Ω–µ—Ç</b>\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_earned:.2f} –º–æ–Ω–µ—Ç</b>\n"
        f"üìâ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: <b>{total_withdrawn:.2f} –º–æ–Ω–µ—Ç</b>\n"
        f"ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>"
    )
    await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())

@router.callback_query(F.data == "mining_electricity")
async def handle_electricity_menu(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    await admin_service.track_command_usage("‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    user_id = call.from_user.id
    
    current_tariff_bytes = await redis_client.get(f"user:{user_id}:tariff")
    current_tariff = current_tariff_bytes.decode('utf-8') if current_tariff_bytes else settings.DEFAULT_ELECTRICITY_TARIFF
    unlocked_tariffs_bytes = await redis_client.smembers(f"user:{user_id}:unlocked_tariffs")
    unlocked_tariffs = {t.decode('utf-8') for t in unlocked_tariffs_bytes}
    if not unlocked_tariffs:
        unlocked_tariffs = {settings.DEFAULT_ELECTRICITY_TARIFF}
    text = (
        f"‚ö°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–µ–π</b>\n\n"
        f"–ü–æ–∫—É–ø–∞–π—Ç–µ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞.\n\n"
        f"–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: <b>{current_tariff}</b>"
    )
    await call.message.edit_text(text, reply_markup=get_electricity_menu_keyboard(current_tariff, unlocked_tariffs))

@router.callback_query(F.data.startswith("select_tariff_"))
async def handle_select_tariff(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    user_id = call.from_user.id
    tariff_name = call.data[len("select_tariff_"):]
    unlocked_tariffs_bytes = await redis_client.smembers(f"user:{user_id}:unlocked_tariffs")
    unlocked_tariffs = {t.decode('utf-8') for t in unlocked_tariffs_bytes}
    if not unlocked_tariffs:
        unlocked_tariffs = {settings.DEFAULT_ELECTRICITY_TARIFF}
    if tariff_name not in unlocked_tariffs:
        await call.answer("üîí –≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –≤–∞–º –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –µ–≥–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å.", show_alert=True)
        return
    await redis_client.set(f"user:{user_id}:tariff", tariff_name)
    logger.info(f"User {user_id} selected new electricity tariff: {tariff_name}")
    await call.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ '{tariff_name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!")
    await handle_electricity_menu(call, redis_client, admin_service)

@router.callback_query(F.data.startswith("buy_tariff_"))
async def handle_buy_tariff(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    user_id = call.from_user.id
    tariff_name = call.data[len("buy_tariff_"):]
    tariff_info = settings.ELECTRICITY_TARIFFS.get(tariff_name)
    if not tariff_info:
        await call.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    unlock_price = tariff_info['unlock_price']
    balance_bytes = await redis_client.get(f"user:{user_id}:balance")
    balance = float(balance_bytes) if balance_bytes else 0.0
    if balance < unlock_price:
        await call.answer(f"‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {unlock_price:.0f} –º–æ–Ω–µ—Ç, —É –≤–∞—Å {balance:.2f}.", show_alert=True)
        return
    await admin_service.track_command_usage(f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞: {tariff_name}")
    async with redis_client.pipeline() as pipe:
        pipe.incrbyfloat(f"user:{user_id}:balance", -unlock_price)
        pipe.sadd(f"user:{user_id}:unlocked_tariffs", tariff_name)
        await pipe.execute()
    logger.info(f"User {user_id} bought new tariff '{tariff_name}' for {unlock_price} coins.")
    await call.answer(f"üéâ –¢–∞—Ä–∏—Ñ '{tariff_name}' —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞!", show_alert=True)
    await handle_electricity_menu(call, redis_client, admin_service)

@router.message(Command("tip"))
async def handle_tip_command(message: Message, command: CommandObject, redis_client: redis.Redis, admin_service: AdminService):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã.")
        return
    try:
        if command.args is None: raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞.")
        amount = float(command.args)
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (ValueError, TypeError):
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/tip [—Å—É–º–º–∞]</code>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/tip 10.5</code>")
        return
    sender = message.from_user
    recipient = message.reply_to_message.from_user
    if sender.id == recipient.id:
        await message.reply("üòÖ –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return
    if recipient.is_bot:
        await message.reply("ü§ñ –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –±–æ—Ç—É.")
        return
    sender_balance_bytes = await redis_client.get(f"user:{sender.id}:balance")
    sender_balance = float(sender_balance_bytes) if sender_balance_bytes else 0.0
    if sender_balance < amount:
        await message.reply(f"üòï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {sender_balance:.2f} –º–æ–Ω–µ—Ç.")
        return
    try:
        async with redis_client.pipeline() as pipe:
            pipe.incrbyfloat(f"user:{sender.id}:balance", -amount)
            pipe.incrbyfloat(f"user:{recipient.id}:balance", amount)
            pipe.incrbyfloat(f"user:{recipient.id}:total_earned", amount)
            await pipe.execute()
    except Exception as e:
        logger.error(f"Failed to process tip from {sender.id} to {recipient.id}: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    await admin_service.track_command_usage("/tip")
    sender_name = f"<a href='tg://user?id={sender.id}'>{sanitize_html(sender.full_name)}</a>"
    recipient_name = f"<a href='tg://user?id={recipient.id}'>{sanitize_html(recipient.full_name)}</a>"
    await message.reply(
        f"üí∏ {sender_name} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) <b>{amount:.2f} –º–æ–Ω–µ—Ç</b> –≤ –∫–∞—á–µ—Å—Ç–≤–µ —á–∞–µ–≤—ã—Ö {recipient_name}!",
        disable_web_page_preview=True
    )
    logger.info(f"User {sender.id} tipped {amount:.2f} to {recipient.id}")

# ===============================================================
# --- –ë–õ–û–ö 2: –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† (–ê–õ–¨–§–ê-–í–ï–†–°–ò–Ø) ---
# ===============================================================

def get_currency_selection_keyboard() -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.button(text="USD ($)", callback_data="calc_currency_usd")
    builder.button(text="RUB (‚ÇΩ)", callback_data="calc_currency_rub")
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="prof_calc_cancel"))
    return builder

def get_asic_selection_keyboard(asics: List[AsicMiner], page: int = 0) -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    items_per_page = 8
    start = page * items_per_page
    end = start + items_per_page
    for i, asic in enumerate(asics[start:end]):
        hash_rate_str = asic.hashrate
        is_valid = hash_rate_str and hash_rate_str.lower() != 'n/a' and re.search(r'[\d.]+', hash_rate_str)
        if is_valid:
            builder.button(text=f"‚úÖ {asic.name}", callback_data=f"prof_calc_select_{i + start}")
        else:
            builder.button(text=f"üö´ {asic.name} (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)", callback_data="prof_calc_nodata")

    builder.adjust(2)
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prof_calc_page_{page - 1}"))
    if end < len(asics):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"prof_calc_page_{page + 1}"))
    builder.row(*nav_buttons)
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="prof_calc_cancel"))
    return builder

@router.callback_query(F.data == "menu_calculator")
@router.message(F.text == "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def start_profit_calculator(update: Union[Message, CallbackQuery], state: FSMContext, admin_service: AdminService):
    await admin_service.track_command_usage("‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —É–∫–∞–∂–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:"
    keyboard = get_currency_selection_keyboard().as_markup()
    if isinstance(update, Message):
        await update.answer(text, reply_markup=keyboard)
    else:
        try:
            await update.message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest:
            await update.message.answer(text, reply_markup=keyboard)
        await update.answer()
    await state.set_state(ProfitCalculator.waiting_for_currency)

@router.callback_query(ProfitCalculator.waiting_for_currency, F.data.startswith("calc_currency_"))
async def process_currency_selection(call: CallbackQuery, state: FSMContext):
    currency = call.data.split("_")[-1]
    await state.update_data(currency=currency)
    prompt_text = ""
    if currency == "usd":
        prompt_text = "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>USD</b> –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>0.05</code>):"
    elif currency == "rub":
        prompt_text = "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>4.5</code>):"
    await call.message.edit_text(prompt_text)
    await state.set_state(ProfitCalculator.waiting_for_electricity_cost)
    await call.answer()

@router.message(ProfitCalculator.waiting_for_electricity_cost)
async def process_electricity_cost(message: Message, state: FSMContext, asic_service: AsicService, market_data_service: MarketDataService):
    try:
        cost = float(message.text.replace(',', '.').strip())
        if cost < 0:
            raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
        user_data = await state.get_data()
        currency = user_data.get("currency")
        cost_usd = cost
        if currency == "rub":
            await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB...")
            rate_usd_rub = await market_data_service.get_usd_rub_rate()
            if not rate_usd_rub or rate_usd_rub <= 0:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()
                return
            cost_usd = cost / rate_usd_rub
        
        await state.update_data(electricity_cost_usd=cost_usd)
        await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
        all_asics, _ = await asic_service.get_top_asics(count=1000, electricity_cost=0.0)
        if not all_asics:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        sorted_asics = [asic for asic in all_asics if asic.hashrate and re.search(r'[\d.]+', asic.hashrate)]
        if not sorted_asics:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ASIC —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ö–µ—à—Ä–µ–π—Ç–æ–º. –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        await state.update_data(asic_list=[asic.model_dump() for asic in sorted_asics])
        keyboard = get_asic_selection_keyboard(sorted_asics, page=0)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à ASIC-–º–∞–π–Ω–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(ProfitCalculator.waiting_for_asic_selection)
    except (ValueError, TypeError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>0.05</b> –∏–ª–∏ <b>4.5</b>).")
        return

@router.callback_query(ProfitCalculator.waiting_for_asic_selection, F.data == "prof_calc_nodata")
async def process_nodata_asic_selection(call: CallbackQuery):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∞—Å–∏–∫–∞."""
    await call.answer("‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ö–µ—à—Ä–µ–π—Ç–µ, —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.", show_alert=True)

@router.callback_query(ProfitCalculator.waiting_for_asic_selection, F.data.startswith("prof_calc_"))
async def process_asic_selection(call: CallbackQuery, state: FSMContext):
    action = call.data.split("_")[2]
    user_data = await state.get_data()
    asic_list = [AsicMiner(**data) for data in user_data.get("asic_list", [])]
    if action == "cancel":
        await call.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    if action == "page":
        page = int(call.data.split("_")[3])
        keyboard = get_asic_selection_keyboard(asic_list, page=page)
        try:
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à ASIC-–º–∞–π–Ω–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard.as_markup())
        except TelegramBadRequest:
            await call.answer()
        return
    if action == "select":
        asic_index = int(call.data.split("_")[3])
        if asic_index >= len(asic_list):
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return
        selected_asic = asic_list[asic_index]
        await state.update_data(selected_asic=selected_asic.model_dump())
        await call.message.edit_text("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤–∞—à–µ–≥–æ –ø—É–ª–∞ –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1</code> –∏–ª–∏ <code>1.5</code>):")
        await state.set_state(ProfitCalculator.waiting_for_pool_commission)
        await call.answer()

@router.message(ProfitCalculator.waiting_for_pool_commission)
async def process_pool_commission(message: Message, state: FSMContext, mining_service: MiningService):
    try:
        commission_percent = float(message.text.replace(',', '.').strip())
        if not (0 <= commission_percent < 100):
            raise ValueError("–ö–æ–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 99.9")

        await message.answer("‚è≥ –°—á–∏—Ç–∞—é...")
        user_data = await state.get_data()
        selected_asic_data = user_data.get("selected_asic")
        if not selected_asic_data:
            await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ–± ASIC –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        selected_asic = AsicMiner(**selected_asic_data)
        electricity_cost_usd = user_data.get("electricity_cost_usd")
        if not electricity_cost_usd or electricity_cost_usd < 0:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        hash_rate_str = selected_asic.hashrate.lower()
        if not hash_rate_str or hash_rate_str == 'n/a' or not re.search(r'[\d.]+', hash_rate_str):
            await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ ASIC –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ö–µ—à—Ä–µ–π—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            await state.clear()
            return
        hash_value_match = re.search(r'[\d.]+', hash_rate_str)
        hash_value = float(hash_value_match.group(0))
        if 'ph/s' in hash_rate_str:
            hash_value *= 1000
        elif 'gh/s' in hash_rate_str:
            hash_value /= 1000
        elif 'mh/s' in hash_rate_str:
            hash_value /= 1_000_000
        elif 'th/s' not in hash_rate_str:
            logger.warning(f"Unexpected hashrate unit in {hash_rate_str}, assuming TH/s")
            hash_value = hash_value  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º TH/s –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        result_text = await mining_service.calculate(
            hashrate_ths=hash_value,
            power_consumption_watts=selected_asic.power,
            electricity_cost=electricity_cost_usd,
            pool_commission=commission_percent
        )
        await message.answer(result_text, disable_web_page_preview=True)
    except (ValueError, TypeError) as e:
        logger.error(f"Error in final calculation: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1.5</code>).")
    except Exception as e:
        logger.error(f"Error in final calculation: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–∞—Å—á–µ—Ç–µ.")
    finally:
        await state.clear()