import time
import logging
from typing import Union
import redis.asyncio as redis
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from bot.config.settings import settings
from bot.services.asic_service import AsicService
from bot.keyboards.keyboards import get_mining_menu_keyboard, get_asic_shop_keyboard, get_my_farm_keyboard
from bot.utils.helpers import get_message_and_chat_id, sanitize_html

router = Router()
logger = logging.getLogger(__name__)

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –†–ê–ó–î–ï–õ–ê ---

@router.callback_query(F.data == "menu_mining")
async def handle_mining_menu(call: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥"."""
    text = "<b>üíé –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ú–∞–π–Ω–∏–Ω–≥–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await call.message.edit_text(text, reply_markup=get_mining_menu_keyboard())


# --- –õ–û–ì–ò–ö–ê –ú–ê–ì–ê–ó–ò–ù–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø ---

async def show_shop_page(message: Message, asic_service: AsicService, page: int = 0):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º."""
    asics = await asic_service.get_profitable_asics()
    if not asics:
        await message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_mining_menu_keyboard())
        return

    text = "üè™ <b>–ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ ASIC –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:"
    keyboard = get_asic_shop_keyboard(asics, page)
    await message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == "mining_shop")
async def handle_shop_menu(call: CallbackQuery, asic_service: AsicService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'."""
    await show_shop_page(call.message, asic_service, 0)


@router.callback_query(F.data.startswith("shop_page_"))
async def handle_shop_pagination(call: CallbackQuery, asic_service: AsicService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ."""
    page = int(call.data.split("_")[2])
    await show_shop_page(call.message, asic_service, page)


# --- –õ–û–ì–ò–ö–ê –ó–ê–ü–£–°–ö–ê –ú–ê–ô–ù–ò–ù–ì–ê ---

@router.callback_query(F.data.startswith("start_mining_"))
async def handle_start_mining(call: CallbackQuery, redis_client: redis.Redis, scheduler: AsyncIOScheduler, asic_service: AsicService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ ASIC –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞."""
    user_id = call.from_user.id

    if await redis_client.exists(f"mining:session:{user_id}"):
        await call.answer("‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –æ–¥–Ω–∞ –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.", show_alert=True)
        return
    
    asic_index = int(call.data.split("_")[2])
    all_asics = await asic_service.get_profitable_asics()

    if asic_index >= len(all_asics):
        await call.answer("‚ùå –û—à–∏–±–∫–∞. –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω.", show_alert=True)
        return
        
    selected_asic = all_asics[asic_index]
    
    run_date = datetime.now() + timedelta(seconds=settings.MINING_DURATION_SECONDS)
    
    job = scheduler.add_job(
        'bot.services.mining_tasks:end_mining_session',
        'date',
        run_date=run_date,
        args=[user_id],
        id=f"mining_job_{user_id}",
        replace_existing=True
    )

    session_data = {
        "start_time": int(time.time()),
        "job_id": job.id,
        "asic_name": selected_asic.name,
        "asic_profitability_per_day": selected_asic.profitability,
        "asic_power": selected_asic.power or 0
    }
    await redis_client.hset(f"mining:session:{user_id}", mapping=session_data)

    await call.message.edit_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –Ω–∞ <b>{selected_asic.name}</b>!\n\n"
        f"–°–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–∏—Ç—Å—è {settings.MINING_DURATION_SECONDS / 3600:.0f} —á–∞—Å–æ–≤. "
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        reply_markup=get_mining_menu_keyboard()
    )
    logger.info(f"User {user_id} started mining session with ASIC: {selected_asic.name}")


# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: '–ú–û–Ø –§–ï–†–ú–ê' ---

@router.callback_query(F.data == "mining_my_farm")
async def handle_my_farm(call: CallbackQuery, redis_client: redis.Redis):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–∏."""
    user_id = call.from_user.id
    session_data = await redis_client.hgetall(f"mining:session:{user_id}")

    if not session_data:
        text = "üñ•Ô∏è <b>–ú–æ—è —Ñ–µ—Ä–º–∞</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–π. –ó–∞–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ!"
        await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())
        return

    # –†–∞—Å—á–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ—Ö–æ–¥–∞
    start_time = int(session_data.get("start_time", 0))
    profitability_per_day = float(session_data.get("asic_profitability_per_day", 0))
    
    elapsed_seconds = int(time.time()) - start_time
    remaining_seconds = settings.MINING_DURATION_SECONDS - elapsed_seconds
    
    profit_per_second = profitability_per_day / (24 * 3600)
    earned_so_far = elapsed_seconds * profit_per_second

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    m, s = divmod(remaining_seconds, 60)
    h, m = divmod(m, 60)
    remaining_time_str = f"{h:02d}:{m:02d}:{s:02d}"

    text = (
        f"üñ•Ô∏è <b>–ú–æ—è —Ñ–µ—Ä–º–∞</b>\n\n"
        f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–±–æ—Ç–µ\n"
        f"‚öôÔ∏è <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {sanitize_html(session_data.get('asic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> <code>{remaining_time_str}</code>\n"
        f"üí∞ <b>–ù–∞–º–∞–π–Ω–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏:</b> ~${earned_so_far:.4f}"
    )
    
    await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())