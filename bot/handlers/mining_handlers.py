# ===============================================================
# –§–∞–π–ª: bot/handlers/mining_handlers.py (–ü–æ–ª–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# –û–ø–∏—Å–∞–Ω–∏–µ: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –∫–æ–¥ "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞".
# –õ–æ–≥–∏–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
# ===============================================================
import time
import logging
import re
from typing import Union, List
from math import floor
import redis.asyncio as redis
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from bot.config.settings import settings
from bot.services.asic_service import AsicService
from bot.services.admin_service import AdminService
from bot.services.mining_service import MiningService
from bot.services.market_data_service import MarketDataService
from bot.utils.states import ProfitCalculator
from bot.utils.models import AsicMiner
from bot.keyboards.keyboards import (
    get_mining_menu_keyboard, get_asic_shop_keyboard,
    get_my_farm_keyboard, get_withdraw_keyboard, get_electricity_menu_keyboard
)
from bot.utils.helpers import sanitize_html

router = Router()
logger = logging.getLogger(__name__)

# ===============================================================
# --- –ë–õ–û–ö 1: –í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –§–ï–†–ú–ê (–ü–û–õ–ù–û–°–¢–¨–Æ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù) ---
# ===============================================================

@router.callback_query(F.data == "menu_mining")
async def handle_mining_menu(call: CallbackQuery, admin_service: AdminService):
    await admin_service.track_command_usage("üíé –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥")
    text = "<b>üíé –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ú–∞–π–Ω–∏–Ω–≥–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await call.message.edit_text(text, reply_markup=get_mining_menu_keyboard())

async def show_shop_page(message: Message, asic_service: AsicService, page: int = 0):
    asics, _ = await asic_service.get_top_asics(count=1000, electricity_cost=0.0)
    if not asics:
        await message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=get_mining_menu_keyboard())
        return
    text = "üè™ <b>–ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ ASIC –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:"
    keyboard = get_asic_shop_keyboard(asics, page)
    await message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "mining_shop")
async def handle_shop_menu(call: CallbackQuery, asic_service: AsicService, admin_service: AdminService):
    await admin_service.track_command_usage("üè™ –ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
    await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ...")
    await show_shop_page(call.message, asic_service, 0)

@router.callback_query(F.data.startswith("shop_page_"))
async def handle_shop_pagination(call: CallbackQuery, asic_service: AsicService):
    page = int(call.data.split("_")[2])
    await show_shop_page(call.message, asic_service, page)

@router.callback_query(F.data.startswith("start_mining_"))
async def handle_start_mining(call: CallbackQuery, redis_client: redis.Redis, scheduler: AsyncIOScheduler, asic_service: AsicService, admin_service: AdminService):
    user_id = call.from_user.id
    if await redis_client.exists(f"mining:session:{user_id}"):
        await call.answer("‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –æ–¥–Ω–∞ –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.", show_alert=True)
        return
    
    asic_index = int(call.data.split("_")[2])
    all_asics, _ = await asic_service.get_top_asics(count=1000, electricity_cost=0.0)
    if asic_index >= len(all_asics):
        await call.answer("‚ùå –û—à–∏–±–∫–∞. –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω.", show_alert=True)
        return
        
    selected_asic = all_asics[asic_index]
    await admin_service.track_command_usage(f"–ó–∞–ø—É—Å–∫: {selected_asic.name}")
    run_date = datetime.now() + timedelta(seconds=settings.MINING_DURATION_SECONDS)
    job = scheduler.add_job(
        'bot.services.mining_tasks:end_mining_session', 'date',
        run_date=run_date, args=[user_id], id=f"mining_job_{user_id}", replace_existing=True
    )
    session_data = {
        "start_time": int(time.time()), "job_id": job.id, "asic_name": selected_asic.name,
        "asic_profitability_per_day": selected_asic.profitability, "asic_power": selected_asic.power or 0
    }
    await redis_client.hset(f"mining:session:{user_id}", mapping=session_data)
    await call.message.edit_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –Ω–∞ <b>{selected_asic.name}</b>!\n\n"
        f"–°–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–∏—Ç—Å—è {settings.MINING_DURATION_SECONDS / 3600:.0f} —á–∞—Å–æ–≤. "
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        reply_markup=get_mining_menu_keyboard()
    )
    logger.info(f"User {user_id} started mining session with ASIC: {selected_asic.name}")

@router.callback_query(F.data == "mining_my_farm")
async def handle_my_farm(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    await admin_service.track_command_usage("üñ•Ô∏è –ú–æ—è —Ñ–µ—Ä–º–∞")
    user_id = call.from_user.id
    session_data = await redis_client.hgetall(f"mining:session:{user_id}")
    if not session_data:
        text = "üñ•Ô∏è <b>–ú–æ—è —Ñ–µ—Ä–º–∞</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–π. –ó–∞–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ!"
        await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())
        return

    start_time_bytes = session_data.get(b"start_time")
    start_time = int(start_time_bytes) if start_time_bytes else 0
    profitability_per_day_bytes = session_data.get(b"asic_profitability_per_day")
    profitability_per_day = float(profitability_per_day_bytes) if profitability_per_day_bytes else 0.0
    asic_name_bytes = session_data.get(b'asic_name')
    asic_name = asic_name_bytes.decode('utf-8') if asic_name_bytes else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    elapsed_seconds = int(time.time()) - start_time
    remaining_seconds = max(0, settings.MINING_DURATION_SECONDS - elapsed_seconds)
    profit_per_second = profitability_per_day / (24 * 3600)
    earned_so_far = elapsed_seconds * profit_per_second
    m, s = divmod(remaining_seconds, 60)
    h, m = divmod(m, 60)
    remaining_time_str = f"{int(h):02d}:{int(m):02d}:{int(s):02d}"
    text = (
        f"üñ•Ô∏è <b>–ú–æ—è —Ñ–µ—Ä–º–∞</b>\n\n"
        f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–±–æ—Ç–µ\n"
        f"‚öôÔ∏è <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {sanitize_html(asic_name)}\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> <code>{remaining_time_str}</code>\n"
        f"üí∞ <b>–ù–∞–º–∞–π–Ω–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏:</b> ~${earned_so_far:.4f}"
    )
    await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())

@router.callback_query(F.data == "mining_withdraw")
async def handle_withdraw(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    await admin_service.track_command_usage("üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
    user_id = call.from_user.id
    if await redis_client.exists(f"mining:session:{user_id}"):
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º.", show_alert=True)
        return
    balance_bytes = await redis_client.get(f"user:{user_id}:balance")
    balance = float(balance_bytes) if balance_bytes else 0.0
    if balance < 1.0:
        await call.answer("‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –≤—ã–≤–æ–¥–∞. –ù–∞–∫–æ–ø–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –º–æ–Ω–µ—Ç—É.", show_alert=True)
        return
        
    DISCOUNT_COIN_RATIO = 50 
    base_discount = 1
    bonus_discount = floor(balance / DISCOUNT_COIN_RATIO)
    total_discount = min(10, base_discount + bonus_discount)
    text = (
        f"üéâ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
        f"–í—ã –æ–±–º–µ–Ω—è–ª–∏ <b>{balance:.2f} –º–æ–Ω–µ—Ç</b> –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É.\n\n"
        f"üî• –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞: <b>{total_discount}%</b>\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."
    )
    async with redis_client.pipeline() as pipe:
        pipe.set(f"user:{user_id}:balance", 0)
        pipe.incrbyfloat(f"user:{user_id}:total_withdrawn", balance)
        await pipe.execute()
    logger.info(f"User {user_id} withdrew {balance:.2f} coins for a {total_discount}% discount.")
    await call.message.edit_text(text, reply_markup=get_withdraw_keyboard())

@router.callback_query(F.data == "mining_invite")
async def handle_invite_friend(call: CallbackQuery, bot: Bot, admin_service: AdminService):
    await admin_service.track_command_usage("ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
    user_id = call.from_user.id
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    text = (
        f"ü§ù <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ "
        f"<b>{settings.REFERRAL_BONUS_AMOUNT} –º–æ–Ω–µ—Ç</b> –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!\n\n"
        f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
        f"<code>{referral_link}</code>"
    )
    await call.answer()
    await call.message.answer(text, reply_markup=get_mining_menu_keyboard())

@router.callback_query(F.data == "mining_stats")
async def handle_my_stats(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    await admin_service.track_command_usage("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ú–∞–π–Ω–∏–Ω–≥)")
    user_id = call.from_user.id
    async with redis_client.pipeline() as pipe:
        pipe.get(f"user:{user_id}:balance")
        pipe.get(f"user:{user_id}:total_earned")
        pipe.get(f"user:{user_id}:total_withdrawn")
        pipe.scard(f"user:{user_id}:referrals")
        results = await pipe.execute()
    
    balance = float(results[0]) if results[0] else 0.0
    total_earned = float(results[1]) if results[1] else 0.0
    total_withdrawn = float(results[2]) if results[2] else 0.0
    referrals_count = int(results[3]) if results[3] else 0
    text = (
        f"üìä <b>–í–∞—à–∞ –∏–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} –º–æ–Ω–µ—Ç</b>\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_earned:.2f} –º–æ–Ω–µ—Ç</b>\n"
        f"üìâ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: <b>{total_withdrawn:.2f} –º–æ–Ω–µ—Ç</b>\n"
        f"ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>"
    )
    await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())

@router.callback_query(F.data == "mining_electricity")
async def handle_electricity_menu(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    await admin_service.track_command_usage("‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
    user_id = call.from_user.id
    
    current_tariff_bytes = await redis_client.get(f"user:{user_id}:tariff")
    current_tariff = current_tariff_bytes.decode('utf-8') if current_tariff_bytes else settings.DEFAULT_ELECTRICITY_TARIFF
    unlocked_tariffs_bytes = await redis_client.smembers(f"user:{user_id}:unlocked_tariffs")
    unlocked_tariffs = {t.decode('utf-8') for t in unlocked_tariffs_bytes}
    if not unlocked_tariffs:
        unlocked_tariffs = {settings.DEFAULT_ELECTRICITY_TARIFF}
    text = (
        f"‚ö°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–µ–π</b>\n\n"
        f"–ü–æ–∫—É–ø–∞–π—Ç–µ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞.\n\n"
        f"–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: <b>{current_tariff}</b>"
    )
    await call.message.edit_text(text, reply_markup=get_electricity_menu_keyboard(current_tariff, unlocked_tariffs))

@router.callback_query(F.data.startswith("select_tariff_"))
async def handle_select_tariff(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    user_id = call.from_user.id
    tariff_name = call.data[len("select_tariff_"):]
    unlocked_tariffs_bytes = await redis_client.smembers(f"user:{user_id}:unlocked_tariffs")
    unlocked_tariffs = {t.decode('utf-8') for t in unlocked_tariffs_bytes}
    if not unlocked_tariffs:
        unlocked_tariffs = {settings.DEFAULT_ELECTRICITY_TARIFF}
    if tariff_name not in unlocked_tariffs:
        await call.answer("üîí –≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –≤–∞–º –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –µ–≥–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å.", show_alert=True)
        return
    await redis_client.set(f"user:{user_id}:tariff", tariff_name)
    logger.info(f"User {user_id} selected new electricity tariff: {tariff_name}")
    await call.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ '{tariff_name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!")
    await handle_electricity_menu(call, redis_client, admin_service)

@router.callback_query(F.data.startswith("buy_tariff_"))
async def handle_buy_tariff(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService):
    user_id = call.from_user.id
    tariff_name = call.data[len("buy_tariff_"):]
    tariff_info = settings.ELECTRICITY_TARIFFS.get(tariff_name)
    if not tariff_info:
        await call.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    unlock_price = tariff_info['unlock_price']
    balance_bytes = await redis_client.get(f"user:{user_id}:balance")
    balance = float(balance_bytes) if balance_bytes else 0.0
    if balance < unlock_price:
        await call.answer(f"‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {unlock_price:.0f} –º–æ–Ω–µ—Ç, —É –≤–∞—Å {balance:.2f}.", show_alert=True)
        return
    await admin_service.track_command_usage(f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞: {tariff_name}")
    async with redis_client.pipeline() as pipe:
        pipe.incrbyfloat(f"user:{user_id}:balance", -unlock_price)
        pipe.sadd(f"user:{user_id}:unlocked_tariffs", tariff_name)
        await pipe.execute()
    logger.info(f"User {user_id} bought new tariff '{tariff_name}' for {unlock_price} coins.")
    await call.answer(f"üéâ –¢–∞—Ä–∏—Ñ '{tariff_name}' —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞!", show_alert=True)
    await handle_electricity_menu(call, redis_client, admin_service)

@router.message(Command("tip"))
async def handle_tip_command(message: Message, command: CommandObject, redis_client: redis.Redis, admin_service: AdminService):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã.")
        return
    try:
        if command.args is None: raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞.")
        amount = float(command.args)
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (ValueError, TypeError):
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/tip [—Å—É–º–º–∞]</code>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/tip 10.5</code>")
        return
    sender = message.from_user
    recipient = message.reply_to_message.from_user
    if sender.id == recipient.id:
        await message.reply("üòÖ –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return
    if recipient.is_bot:
        await message.reply("ü§ñ –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –±–æ—Ç—É.")
        return
    sender_balance_bytes = await redis_client.get(f"user:{sender.id}:balance")
    sender_balance = float(sender_balance_bytes) if sender_balance_bytes else 0.0
    if sender_balance < amount:
        await message.reply(f"üòï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {sender_balance:.2f} –º–æ–Ω–µ—Ç.")
        return
    try:
        async with redis_client.pipeline() as pipe:
            pipe.incrbyfloat(f"user:{sender.id}:balance", -amount)
            pipe.incrbyfloat(f"user:{recipient.id}:balance", amount)
            pipe.incrbyfloat(f"user:{recipient.id}:total_earned", amount)
            await pipe.execute()
    except Exception as e:
        logger.error(f"Failed to process tip from {sender.id} to {recipient.id}: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    await admin_service.track_command_usage("/tip")
    sender_name = f"<a href='tg://user?id={sender.id}'>{sanitize_html(sender.full_name)}</a>"
    recipient_name = f"<a href='tg://user?id={recipient.id}'>{sanitize_html(recipient.full_name)}</a>"
    await message.reply(
        f"üí∏ {sender_name} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) <b>{amount:.2f} –º–æ–Ω–µ—Ç</b> –≤ –∫–∞—á–µ—Å—Ç–≤–µ —á–∞–µ–≤—ã—Ö {recipient_name}!",
        disable_web_page_preview=True
    )
    logger.info(f"User {sender.id} tipped {amount:.2f} to {recipient.id}")

# ===============================================================
# --- –ë–õ–û–ö 2: –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† (–ù–û–í–ê–Ø –ù–ê–î–ï–ñ–ù–ê–Ø –í–ï–†–°–ò–Ø) ---
# ===============================================================

def build_cancel_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
    return InlineKeyboardBuilder().button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="prof_calc_cancel").as_markup()

@router.callback_query(F.data == "menu_calculator")
@router.message(F.text == "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def start_profit_calculator(update: Union[Message, CallbackQuery], state: FSMContext, admin_service: AdminService):
    """–®–∞–≥ 0: –ó–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    await admin_service.track_command_usage("‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    await state.clear()
    logger.info(f"Calculator started by user {update.from_user.id}. State cleared.")
    
    builder = InlineKeyboardBuilder()
    builder.button(text="USD ($)", callback_data="calc_currency_usd")
    builder.button(text="RUB (‚ÇΩ)", callback_data="calc_currency_rub")
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="prof_calc_cancel"))
    
    text = "üí° –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:"
    keyboard = builder.as_markup()
    
    if isinstance(update, Message):
        await update.answer(text, reply_markup=keyboard)
    else:
        await update.message.edit_text(text, reply_markup=keyboard)
        await update.answer()
        
    await state.set_state(ProfitCalculator.waiting_for_currency)

@router.callback_query(ProfitCalculator.waiting_for_currency, F.data.startswith("calc_currency_"))
async def process_currency_selection(call: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã."""
    currency = call.data.split("_")[-1]
    await state.update_data(currency=currency)
    logger.info(f"User {call.from_user.id} selected currency: {currency}")
    
    prompts = {
        "usd": "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>USD</b> –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>0.05</code>):",
        "rub": "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>4.5</code>):"
    }
    await call.message.edit_text(prompts[currency], reply_markup=build_cancel_keyboard())
    await state.set_state(ProfitCalculator.waiting_for_electricity_cost)
    await call.answer()

@router.message(ProfitCalculator.waiting_for_electricity_cost)
async def process_electricity_cost(message: Message, state: FSMContext, asic_service: AsicService, market_data_service: MarketDataService):
    """–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –∏ –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ ASIC."""
    logger.info(f"User {message.from_user.id} entered electricity cost: '{message.text}'")
    try:
        cost = float(message.text.replace(',', '.').strip())
        if cost < 0: raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>4.5</b>).", reply_markup=build_cancel_keyboard())
        return

    msg = await message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
    user_data = await state.get_data()
    currency = user_data.get("currency")
    cost_usd = cost

    if currency == "rub":
        await msg.edit_text("‚è≥ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB...")
        rate_usd_rub = await market_data_service.get_usd_rub_rate()
        if not rate_usd_rub:
            await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=build_cancel_keyboard())
            await state.clear()
            return
        cost_usd = cost / rate_usd_rub
    
    await state.update_data(electricity_cost_usd=cost_usd)
    
    await msg.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
    all_asics, _ = await asic_service.get_top_asics(count=1000, electricity_cost=0.0)
    
    if not all_asics:
        await msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ ASIC. –†–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.", reply_markup=build_cancel_keyboard())
        await state.clear()
        return

    await state.update_data(asic_list=[asic.model_dump() for asic in all_asics])
    
    builder = InlineKeyboardBuilder()
    items_per_page, page = 8, 0
    start, end = page * items_per_page, page * items_per_page + items_per_page
    for i, asic in enumerate(all_asics[start:end]):
        builder.button(text=f"‚úÖ {asic.name}", callback_data=f"prof_calc_select_{i + start}")
    builder.adjust(2)
    if end < len(all_asics):
        builder.row(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"prof_calc_page_1"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="prof_calc_cancel"))

    await msg.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à ASIC-–º–∞–π–Ω–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=builder.as_markup())
    logger.info(f"User {message.from_user.id}: a list of ASICs is shown. Setting state to waiting_for_asic_selection.")
    await state.set_state(ProfitCalculator.waiting_for_asic_selection)

@router.callback_query(ProfitCalculator.waiting_for_asic_selection, F.data.startswith("prof_calc_"))
async def process_asic_selection(call: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ ASIC –∏–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    logger.info(f"User {call.from_user.id} interacted with ASIC list: {call.data}")
    user_data = await state.get_data()
    asic_list_data = user_data.get("asic_list", [])
    if not asic_list_data:
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ ASIC –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=build_cancel_keyboard())
        await state.clear()
        return
        
    all_asics = [AsicMiner(**data) for data in asic_list_data]
    action, _, value = call.data.partition("_")[2].partition("_")

    if action == "page":
        page = int(value)
        items_per_page = 8
        start, end = page * items_per_page, (page + 1) * items_per_page
        
        builder = InlineKeyboardBuilder()
        for i, asic in enumerate(all_asics[start:end]):
            builder.button(text=f"‚úÖ {asic.name}", callback_data=f"prof_calc_select_{i + start}")
        builder.adjust(2)
        
        nav_buttons = []
        if page > 0: nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prof_calc_page_{page - 1}"))
        if end < len(all_asics): nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"prof_calc_page_{page + 1}"))
        builder.row(*nav_buttons)
        builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="prof_calc_cancel"))
        
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à ASIC-–º–∞–π–Ω–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=builder.as_markup())
        await call.answer()
        return

    if action == "select":
        asic_index = int(value)
        selected_asic = all_asics[asic_index]
        
        if not all([selected_asic.hashrate, selected_asic.power, selected_asic.algorithm, selected_asic.hashrate.lower() != 'n/a', re.search(r'[\d.]+', selected_asic.hashrate), selected_asic.power > 0]):
             await call.answer("‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.", show_alert=True)
             return

        await state.update_data(selected_asic=selected_asic.model_dump())
        await call.message.edit_text("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤–∞—à–µ–≥–æ –ø—É–ª–∞ –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1</code> –∏–ª–∏ <code>1.5</code>):", reply_markup=build_cancel_keyboard())
        logger.info(f"User {call.from_user.id} selected ASIC: {selected_asic.name}. Setting state to waiting_for_pool_commission.")
        await state.set_state(ProfitCalculator.waiting_for_pool_commission)

    await call.answer()
    
@router.message(ProfitCalculator.waiting_for_pool_commission)
async def process_pool_commission(message: Message, state: FSMContext, mining_service: MiningService):
    """–®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç."""
    logger.info(f"User {message.from_user.id} entered pool commission: '{message.text}'")
    user_data = await state.get_data()
    selected_asic_data = user_data.get("selected_asic")
    electricity_cost_usd = user_data.get("electricity_cost_usd")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ª–∏ –º—ã —à–∞–≥
    if not selected_asic_data:
        logger.error(f"User {message.from_user.id} is in pool commission state, but no ASIC was selected.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω ASIC. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=build_cancel_keyboard())
        await state.clear()
        return

    try:
        commission_percent = float(message.text.replace(',', '.').strip())
        if not (0 <= commission_percent < 100):
            raise ValueError("–ö–æ–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 99.9")
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>1.5</b>).", reply_markup=build_cancel_keyboard())
        return

    msg = await message.answer("‚è≥ –°—á–∏—Ç–∞—é...")
    try:
        selected_asic = AsicMiner(**selected_asic_data)
        result_text = await mining_service.calculate(
            hashrate_str=selected_asic.hashrate,
            power_consumption_watts=selected_asic.power,
            electricity_cost=electricity_cost_usd,
            pool_commission=commission_percent,
            algorithm=selected_asic.algorithm
        )
        await msg.edit_text(result_text, disable_web_page_preview=True)
        logger.info(f"Calculation for user {message.from_user.id} is complete.")
    except Exception as e:
        logger.error(f"Error in final calculation for user {message.from_user.id}: {e}", exc_info=True)
        await msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=build_cancel_keyboard())
    finally:
        await state.clear()

# –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
@router.callback_query(ProfitCalculator, F.data == "prof_calc_cancel")
async def cancel_calculator(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚úÖ –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
    await call.answer()
    logger.info(f"User {call.from_user.id} cancelled the calculation.")
