import time
import logging
from typing import Union
from math import floor
import redis.asyncio as redis
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from bot.config.settings import settings
from bot.services.asic_service import AsicService
from bot.services.admin_service import AdminService  # <<< –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢
from bot.keyboards.keyboards import (
    get_mining_menu_keyboard, get_asic_shop_keyboard,
    get_my_farm_keyboard, get_withdraw_keyboard, get_electricity_menu_keyboard
)
from bot.utils.helpers import get_message_and_chat_id, sanitize_html

router = Router()
logger = logging.getLogger(__name__)

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –†–ê–ó–î–ï–õ–ê ---

@router.callback_query(F.data == "menu_mining")
async def handle_mining_menu(call: CallbackQuery, admin_service: AdminService): # <<< –î–û–ë–ê–í–õ–ï–ù admin_service
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥".
    """
    await admin_service.track_command_usage("üíé –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥") # <<< –î–û–ë–ê–í–õ–ï–ù–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
    text = "<b>üíé –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ú–∞–π–Ω–∏–Ω–≥–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await call.message.edit_text(text, reply_markup=get_mining_menu_keyboard())


# --- –õ–û–ì–ò–ö–ê –ú–ê–ì–ê–ó–ò–ù–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø ---

async def show_shop_page(message: Message, asic_service: AsicService, page: int = 0):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.
    """
    asics = await asic_service.get_profitable_asics()
    if not asics:
        await message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_mining_menu_keyboard())
        return

    text = "üè™ <b>–ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ ASIC –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:"
    keyboard = get_asic_shop_keyboard(asics, page)
    await message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == "mining_shop")
async def handle_shop_menu(call: CallbackQuery, asic_service: AsicService, admin_service: AdminService): # <<< –î–û–ë–ê–í–õ–ï–ù admin_service
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'.
    """
    await admin_service.track_command_usage("üè™ –ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è") # <<< –î–û–ë–ê–í–õ–ï–ù–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
    await show_shop_page(call.message, asic_service, 0)


@router.callback_query(F.data.startswith("shop_page_"))
async def handle_shop_pagination(call: CallbackQuery, asic_service: AsicService):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
    """
    page = int(call.data.split("_")[2])
    await show_shop_page(call.message, asic_service, page)


# --- –õ–û–ì–ò–ö–ê –ó–ê–ü–£–°–ö–ê –ú–ê–ô–ù–ò–ù–ì–ê ---

@router.callback_query(F.data.startswith("start_mining_"))
async def handle_start_mining(call: CallbackQuery, redis_client: redis.Redis, scheduler: AsyncIOScheduler, asic_service: AsicService, admin_service: AdminService): # <<< –î–û–ë–ê–í–õ–ï–ù admin_service
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ ASIC –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞.
    """
    user_id = call.from_user.id

    if await redis_client.exists(f"mining:session:{user_id}"):
        await call.answer("‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –æ–¥–Ω–∞ –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.", show_alert=True)
        return
    
    asic_index = int(call.data.split("_")[2])
    all_asics = await asic_service.get_profitable_asics()

    if asic_index >= len(all_asics):
        await call.answer("‚ùå –û—à–∏–±–∫–∞. –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω.", show_alert=True)
        return
        
    selected_asic = all_asics[asic_index]
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å–∏–∫–∞
    await admin_service.track_command_usage(f"–ó–∞–ø—É—Å–∫: {selected_asic.name}") # <<< –î–û–ë–ê–í–õ–ï–ù–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
    
    run_date = datetime.now() + timedelta(seconds=settings.MINING_DURATION_SECONDS)
    
    job = scheduler.add_job(
        'bot.services.mining_tasks:end_mining_session',
        'date',
        run_date=run_date,
        args=[user_id],
        id=f"mining_job_{user_id}",
        replace_existing=True
    )

    session_data = {
        "start_time": int(time.time()),
        "job_id": job.id,
        "asic_name": selected_asic.name,
        "asic_profitability_per_day": selected_asic.profitability,
        "asic_power": selected_asic.power or 0
    }
    await redis_client.hset(f"mining:session:{user_id}", mapping=session_data)

    await call.message.edit_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –Ω–∞ <b>{selected_asic.name}</b>!\n\n"
        f"–°–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–∏—Ç—Å—è {settings.MINING_DURATION_SECONDS / 3600:.0f} —á–∞—Å–æ–≤. "
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        reply_markup=get_mining_menu_keyboard()
    )
    logger.info(f"User {user_id} started mining session with ASIC: {selected_asic.name}")


# --- –õ–û–ì–ò–ö–ê "–ú–û–Ø –§–ï–†–ú–ê" ---

@router.callback_query(F.data == "mining_my_farm")
async def handle_my_farm(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService): # <<< –î–û–ë–ê–í–õ–ï–ù admin_service
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–∏.
    """
    await admin_service.track_command_usage("üñ•Ô∏è –ú–æ—è —Ñ–µ—Ä–º–∞") # <<< –î–û–ë–ê–í–õ–ï–ù–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
    user_id = call.from_user.id
    session_data = await redis_client.hgetall(f"mining:session:{user_id}")

    if not session_data:
        text = "üñ•Ô∏è <b>–ú–æ—è —Ñ–µ—Ä–º–∞</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–π. –ó–∞–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ!"
        await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())
        return

    start_time = int(session_data.get("start_time", 0))
    profitability_per_day = float(session_data.get("asic_profitability_per_day", 0))
    
    elapsed_seconds = int(time.time()) - start_time
    remaining_seconds = max(0, settings.MINING_DURATION_SECONDS - elapsed_seconds)
    
    profit_per_second = profitability_per_day / (24 * 3600)
    earned_so_far = elapsed_seconds * profit_per_second

    m, s = divmod(remaining_seconds, 60)
    h, m = divmod(m, 60)
    remaining_time_str = f"{int(h):02d}:{int(m):02d}:{int(s):02d}"

    text = (
        f"üñ•Ô∏è <b>–ú–æ—è —Ñ–µ—Ä–º–∞</b>\n\n"
        f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–±–æ—Ç–µ\n"
        f"‚öôÔ∏è <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {sanitize_html(session_data.get('asic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> <code>{remaining_time_str}</code>\n"
        f"üí∞ <b>–ù–∞–º–∞–π–Ω–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏:</b> ~${earned_so_far:.4f}"
    )
    
    await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())

# --- –õ–û–ì–ò–ö–ê "–í–´–í–û–î –°–†–ï–î–°–¢–í" ---

@router.callback_query(F.data == "mining_withdraw")
async def handle_withdraw(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService): # <<< –î–û–ë–ê–í–õ–ï–ù admin_service
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏ —Ä–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏.
    """
    await admin_service.track_command_usage("üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤") # <<< –î–û–ë–ê–í–õ–ï–ù–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
    user_id = call.from_user.id
    
    if await redis_client.exists(f"mining:session:{user_id}"):
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º.", show_alert=True)
        return

    balance_str = await redis_client.get(f"user:{user_id}:balance")
    balance = float(balance_str) if balance_str else 0

    if balance < 1.0:
        await call.answer("‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –≤—ã–≤–æ–¥–∞. –ù–∞–∫–æ–ø–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –º–æ–Ω–µ—Ç—É.", show_alert=True)
        return
        
    DISCOUNT_COIN_RATIO = 50 
    base_discount = 1
    bonus_discount = floor(balance / DISCOUNT_COIN_RATIO)
    total_discount = min(10, base_discount + bonus_discount)

    text = (
        f"üéâ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
        f"–í—ã –æ–±–º–µ–Ω—è–ª–∏ <b>{balance:.2f} –º–æ–Ω–µ—Ç</b> –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É.\n\n"
        f"üî• –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞: <b>{total_discount}%</b>\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."
    )
    
    async with redis_client.pipeline() as pipe:
        pipe.set(f"user:{user_id}:balance", 0)
        pipe.incrbyfloat(f"user:{user_id}:total_withdrawn", balance)
        await pipe.execute()

    logger.info(f"User {user_id} withdrew {balance:.2f} coins for a {total_discount}% discount.")
    await call.message.edit_text(text, reply_markup=get_withdraw_keyboard())


# --- –õ–û–ì–ò–ö–ê "–ü–†–ò–ì–õ–ê–°–ò–¢–¨ –î–†–£–ì–ê" ---

@router.callback_query(F.data == "mining_invite")
async def handle_invite_friend(call: CallbackQuery, bot: Bot, admin_service: AdminService): # <<< –î–û–ë–ê–í–õ–ï–ù admin_service
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.
    """
    await admin_service.track_command_usage("ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞") # <<< –î–û–ë–ê–í–õ–ï–ù–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
    user_id = call.from_user.id
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    
    text = (
        f"ü§ù <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ "
        f"<b>{settings.REFERRAL_BONUS_AMOUNT} –º–æ–Ω–µ—Ç</b> –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!\n\n"
        f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
        f"<code>{referral_link}</code>"
    )
    
    await call.answer()
    await call.message.answer(text)

# --- –õ–û–ì–ò–ö–ê "–°–¢–ê–¢–ò–°–¢–ò–ö–ê" ---

@router.callback_query(F.data == "mining_stats")
async def handle_my_stats(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService): # <<< –î–û–ë–ê–í–õ–ï–ù admin_service
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ.
    """
    await admin_service.track_command_usage("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ú–∞–π–Ω–∏–Ω–≥)") # <<< –î–û–ë–ê–í–õ–ï–ù–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
    user_id = call.from_user.id

    async with redis_client.pipeline() as pipe:
        pipe.get(f"user:{user_id}:balance")
        pipe.get(f"user:{user_id}:total_earned")
        pipe.get(f"user:{user_id}:total_withdrawn")
        pipe.scard(f"user:{user_id}:referrals")
        results = await pipe.execute()
    
    balance = float(results[0]) if results[0] else 0
    total_earned = float(results[1]) if results[1] else 0
    total_withdrawn = float(results[2]) if results[2] else 0
    referrals_count = int(results[3]) if results[3] else 0

    text = (
        f"üìä <b>–í–∞—à–∞ –∏–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} –º–æ–Ω–µ—Ç</b>\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_earned:.2f} –º–æ–Ω–µ—Ç</b>\n"
        f"üìâ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: <b>{total_withdrawn:.2f} –º–æ–Ω–µ—Ç</b>\n"
        f"ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>"
    )

    await call.message.edit_text(text, reply_markup=get_my_farm_keyboard())


# --- –õ–û–ì–ò–ö–ê "–≠–õ–ï–ö–¢–†–û–≠–ù–ï–†–ì–ò–Ø" ---

@router.callback_query(F.data == "mining_electricity")
async def handle_electricity_menu(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService): # <<< –î–û–ë–ê–í–õ–ï–ù admin_service
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é.
    """
    await admin_service.track_command_usage("‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è") # <<< –î–û–ë–ê–í–õ–ï–ù–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
    user_id = call.from_user.id
    
    current_tariff = await redis_client.get(f"user:{user_id}:tariff") or settings.DEFAULT_ELECTRICITY_TARIFF
    
    unlocked_tariffs = await redis_client.smembers(f"user:{user_id}:unlocked_tariffs")
    if not unlocked_tariffs:
        unlocked_tariffs = {settings.DEFAULT_ELECTRICITY_TARIFF}

    text = (
        f"‚ö°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–µ–π</b>\n\n"
        f"–ü–æ–∫—É–ø–∞–π—Ç–µ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞.\n\n"
        f"–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: <b>{current_tariff}</b>"
    )
    
    await call.message.edit_text(text, reply_markup=get_electricity_menu_keyboard(current_tariff, unlocked_tariffs))


@router.callback_query(F.data.startswith("select_tariff_"))
async def handle_select_tariff(call: CallbackQuery, redis_client: redis.Redis):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.
    """
    user_id = call.from_user.id
    tariff_name = call.data[len("select_tariff_"):]

    unlocked_tariffs = await redis_client.smembers(f"user:{user_id}:unlocked_tariffs")
    if not unlocked_tariffs:
        unlocked_tariffs = {settings.DEFAULT_ELECTRICITY_TARIFF}

    if tariff_name not in unlocked_tariffs:
        await call.answer("üîí –≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ –≤–∞–º –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –µ–≥–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å.", show_alert=True)
        return

    await redis_client.set(f"user:{user_id}:tariff", tariff_name)
    logger.info(f"User {user_id} selected new electricity tariff: {tariff_name}")
    await call.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ '{tariff_name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!")
    
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º `handle_electricity_menu` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é, –Ω–æ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–µ–Ω `admin_service`, –Ω–æ –º—ã –µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–∑–æ–≤–∞
    from bot.services.admin_service import AdminService
    admin_service = call.bot.get("admin_service") # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–±—Ä–æ—à–µ–Ω –≤ bot
    await handle_electricity_menu(call, redis_client, admin_service)


@router.callback_query(F.data.startswith("buy_tariff_"))
async def handle_buy_tariff(call: CallbackQuery, redis_client: redis.Redis, admin_service: AdminService): # <<< –î–û–ë–ê–í–õ–ï–ù admin_service
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.
    """
    user_id = call.from_user.id
    tariff_name = call.data[len("buy_tariff_"):]

    tariff_info = settings.ELECTRICITY_TARIFFS.get(tariff_name)
    if not tariff_info:
        await call.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    unlock_price = tariff_info['unlock_price']
    
    balance_str = await redis_client.get(f"user:{user_id}:balance")
    balance = float(balance_str) if balance_str else 0

    if balance < unlock_price:
        await call.answer(f"‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {unlock_price:.0f} –º–æ–Ω–µ—Ç, —É –≤–∞—Å {balance:.2f}.", show_alert=True)
        return

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞
    await admin_service.track_command_usage(f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞: {tariff_name}") # <<< –î–û–ë–ê–í–õ–ï–ù–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï

    async with redis_client.pipeline() as pipe:
        pipe.decrbyfloat(f"user:{user_id}:balance", unlock_price)
        pipe.sadd(f"user:{user_id}:unlocked_tariffs", tariff_name)
        await pipe.execute()
        
    logger.info(f"User {user_id} bought new tariff '{tariff_name}' for {unlock_price} coins.")
    await call.answer(f"üéâ –¢–∞—Ä–∏—Ñ '{tariff_name}' —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞!", show_alert=True)

    await handle_electricity_menu(call, redis_client, admin_service)