import time
import logging
from datetime import datetime, timedelta
from typing import Union

import redis.asyncio as redis
from aiogram import F, Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.config.settings import settings
from bot.services.mining_tasks import end_mining_session
from bot.utils.keyboards import get_main_menu_keyboard
# get_message_and_chat_id –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
# from bot.utils.helpers import get_message_and_chat_id

router = Router()
logger = logging.getLogger(__name__)


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –•–≠–ù–î–õ–ï–† ---
@router.callback_query(F.data == "menu_mining")
@router.message(F.text == "üíé –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥")
async def handle_mining_menu(update: Union[CallbackQuery, Message]):
    text = (
        "<b>üíé –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã, "
        "–ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –µ–≥–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_mining –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ update
    if isinstance(update, CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.edit_text(text, reply_markup=get_main_menu_keyboard())
    elif isinstance(update, Message):
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await update.answer(text, reply_markup=get_main_menu_keyboard())


@router.message(Command("start_mining"))
async def start_mining(message: Message, redis_client: redis.Redis, scheduler: AsyncIOScheduler, bot: Bot):
    user_id = message.from_user.id

    if await redis_client.exists(f"mining:session:{user_id}"):
        await message.answer("‚ÑπÔ∏è –ú–∞–π–Ω–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    if await redis_client.exists(f"mining:claimable:{user_id}"):
        await message.answer("‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —Å–±–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /claim_rewards.")
        return

    run_date = datetime.now() + timedelta(seconds=settings.MINING_DURATION_SECONDS)
    job = scheduler.add_job(
        end_mining_session,
        'date',
        run_date=run_date,
        args=[user_id, bot, redis_client],
        id=f"mining_job_{user_id}",
        replace_existing=True
    )

    await redis_client.hset(f"mining:session:{user_id}", mapping={
        "start_time": int(time.time()),
        "job_id": job.id
    })

    await message.answer(f"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {settings.MINING_DURATION_SECONDS / 3600:.0f} —á–∞—Å–æ–≤!")
    logger.info(f"Started mining session for user {user_id}")


@router.message(Command("claim_rewards"))
async def claim_rewards(message: Message, redis_client: redis.Redis):
    user_id = message.from_user.id
    claimable_key = f"mining:claimable:{user_id}"

    reward = await redis_client.get(claimable_key)
    if not reward:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Å–±–æ—Ä–∞.")
        return

    reward_amount = float(reward)

    await redis_client.incrbyfloat(f"user:{user_id}:balance", reward_amount)
    await redis_client.delete(claimable_key)

    await message.answer(f"üéâ –ù–∞–≥—Ä–∞–¥–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {reward_amount:.2f} —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!")
    logger.info(f"User {user_id} claimed {reward_amount} reward.")