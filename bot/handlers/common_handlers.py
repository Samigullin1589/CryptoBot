import asyncio
import logging
from typing import Union
from datetime import datetime

import redis.asyncio as redis
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.enums import ContentType, ChatType
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config.settings import settings
from bot.keyboards.keyboards import get_main_menu_keyboard
from bot.services.admin_service import AdminService
from bot.utils.helpers import get_message_and_chat_id, sanitize_html
# --- –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø AI-–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê ---
from bot.services.ai_consultant_service import AIConsultantService
from bot.services.ai_conversation_service import AIConversationService
from bot.services.price_service import PriceService


router = Router()
logger = logging.getLogger(__name__)

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –û–ù–ë–û–†–î–ò–ù–ì–ê ---

def get_onboarding_start_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üöÄ –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="onboarding_start")
    builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="onboarding_skip")
    builder.adjust(1)
    return builder.as_markup()

def get_onboarding_step_keyboard(step: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∞–≥–æ–≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    builder = InlineKeyboardBuilder()
    if step == 1:
        builder.button(text="üíπ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å BTC", callback_data="menu_price")
        builder.button(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="onboarding_step_2")
    elif step == 2:
        builder.button(text="‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –¢–æ–ø ASIC", callback_data="menu_asics")
        builder.button(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="onboarding_step_3")
    elif step == 3:
        builder.button(text="üíé –í–æ–π—Ç–∏ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä", callback_data="menu_crypto_center")
        builder.button(text="‚úÖ –í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ!", callback_data="onboarding_finish")
    builder.adjust(1)
    return builder.as_markup()


# --- –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î ---

HELP_TEXT = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot!</b>

–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä—ã–Ω–∫–∞.

üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>

üíπ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:</b> –£–∑–Ω–∞–≤–∞–π—Ç–µ —Ü–µ–Ω—ã –Ω–∞ Bitcoin, Ethereum –∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
‚öôÔ∏è <b>–¢–æ–ø ASIC-–º–∞–π–Ω–µ—Ä–æ–≤:</b> –ü–æ–ª—É—á–∞–π—Ç–µ —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–≥–æ –¥–æ—Ö–æ–¥–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–∞ —Ä—ã–Ω–∫–µ.
‚õèÔ∏è <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:</b> –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –ª—é–±–æ–≥–æ ASIC —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏.
üì∞ <b>–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b> –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å –Ω–∞—à–∏–º–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ –∏–∑ –≤–µ–¥—É—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
üò± <b>–ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏:</b> –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
üß† <b>–ö—Ä–∏–ø—Ç–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –∏ —É–∑–Ω–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!

üíé <b>–ò–≥—Ä–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥"</b>
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ASIC'–∏, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã! –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ <b>—Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏</b> —É –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!

‚å®Ô∏è <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>

<code>/start</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
<code>/help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

<i>–¢–∞–∫–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, btc –∏–ª–∏ —ç—Ñ–∏—Ä), —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–µ –∫—É—Ä—Å.</i>

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>
–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É?
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: <a href="https://t.me/mining_sale_admin">@mining_sale_admin</a>
"""

async def handle_referral(message: Message, command: CommandObject, redis_client: redis.Redis, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ."""
    referrer_id = command.args
    new_user_id = message.from_user.id

    if not referrer_id or not referrer_id.isdigit() or int(referrer_id) == new_user_id:
        return

    referrer_id = int(referrer_id)
    
    already_referred = await redis_client.sismember("referred_users", new_user_id)
    if already_referred:
        logger.info(f"User {new_user_id} tried to use referral link from {referrer_id}, but is already a referred user.")
        return

    bonus = settings.REFERRAL_BONUS_AMOUNT
    
    async with redis_client.pipeline() as pipe:
        pipe.incrbyfloat(f"user:{referrer_id}:balance", bonus)
        pipe.incrbyfloat(f"user:{referrer_id}:total_earned", bonus)
        pipe.sadd("referred_users", new_user_id)
        pipe.sadd(f"user:{referrer_id}:referrals", new_user_id)
        await pipe.execute()
    
    logger.info(f"User {new_user_id} joined via referral from {referrer_id}. Referrer received {bonus} coins.")

    try:
        await bot.send_message(
            referrer_id,
            f"ü§ù –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –¥—Ä—É–≥ @{message.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{bonus} –º–æ–Ω–µ—Ç</b>!"
        )
    except Exception as e:
        logger.error(f"Failed to send referral notification to user {referrer_id}: {e}")


@router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext, command: CommandObject, redis_client: redis.Redis, bot: Bot, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    await admin_service.track_command_usage("/start")
    await state.clear()
    
    user_id = message.from_user.id
    
    is_new_user = await redis_client.sadd("users:known", user_id)
    
    if is_new_user:
        current_timestamp = int(datetime.now().timestamp())
        await redis_client.zadd("stats:user_first_seen", {str(user_id): current_timestamp})
        logger.info(f"New user {user_id} has been registered. Starting onboarding.")
        
        text = (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!</b>\n\n"
            "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞. "
            "–î–∞–≤–∞–π—Ç–µ —è –±—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∂—É, —á—Ç–æ —è —É–º–µ—é!"
        )
        await message.answer(text, reply_markup=get_onboarding_start_keyboard())

    else:
        logger.info(f"User {user_id} started the bot.")
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

    if command.args:
        await handle_referral(message, command, redis_client, bot)


@router.callback_query(F.data == "onboarding_start" or F.data == "onboarding_step_1")
async def onboarding_step_1(call: CallbackQuery):
    text = (
        "<b>–®–∞–≥ 1: –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üíπ</b>\n\n"
        "–ü–µ—Ä–≤–∞—è –∏ –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ç–∏–∫–µ—Ä "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>btc</code> –∏–ª–∏ <code>—ç—Ñ–∏—Ä</code>) –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é."
    )
    await call.message.edit_text(text, reply_markup=get_onboarding_step_keyboard(1))
    await call.answer()


@router.callback_query(F.data == "onboarding_step_2")
async def onboarding_step_2(call: CallbackQuery):
    text = (
        "<b>–®–∞–≥ 2: –í—Å–µ –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤ ‚öôÔ∏è</b>\n\n"
        "–í —Ä–∞–∑–¥–µ–ª–µ '–¢–æ–ø ASIC' –≤—ã –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç–µ —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–≥–æ –¥–æ—Ö–æ–¥–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. "
        "–ê '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–π —Ä–æ–∑–µ—Ç–∫–∏."
    )
    await call.message.edit_text(text, reply_markup=get_onboarding_step_keyboard(2))
    await call.answer()


@router.callback_query(F.data == "onboarding_step_3")
async def onboarding_step_3(call: CallbackQuery):
    text = (
        "<b>–®–∞–≥ 3: –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä üíé</b>\n\n"
        "–≠—Ç–æ –Ω–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞! –ó–¥–µ—Å—å –Ω–∞—à AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ 24/7 –∏—â–µ—Ç –¥–ª—è –≤–∞—Å —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ "
        "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞: –æ—Ç Airdrop'–æ–≤ –¥–æ –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤."
    )
    await call.message.edit_text(text, reply_markup=get_onboarding_step_keyboard(3))
    await call.answer()


@router.callback_query(F.data == "onboarding_skip" or F.data == "onboarding_finish")
async def onboarding_finish(call: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    text = (
        "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –≤—Å–µ –æ—Å–Ω–æ–≤—ã!\n\n"
        "–í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ï—Å–ª–∏ –∑–∞–±—É–¥–µ—Ç–µ, —á—Ç–æ —è —É–º–µ—é, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
    )
    await call.message.delete()
    await call.message.answer(text, reply_markup=get_main_menu_keyboard())
    await call.answer()


@router.message(Command("help"))
async def handle_help(message: Message, admin_service: AdminService):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    await admin_service.track_command_usage("/help")
    await message.answer(HELP_TEXT, disable_web_page_preview=True)


@router.callback_query(F.data == "back_to_main_menu")
async def handle_back_to_main(call: CallbackQuery, state: FSMContext, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.
    –£–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–ª–±—ç–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –º–µ–¥–∏–∞ –∏ –æ–ø—Ä–æ—Å–æ–≤.
    """
    await admin_service.track_command_usage("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    await state.clear()
    
    try:
        if call.message.content_type == ContentType.TEXT:
            await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
        else:
            await call.message.delete()
            await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    except TelegramBadRequest as e:
        logger.error(f"Error returning to main menu: {e}. Sending new message.")
        await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    finally:
        await call.answer()

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø AI-–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê –° –¢–†–ï–•–£–†–û–í–ù–ï–í–´–ú –§–ò–õ–¨–¢–†–û–ú ---
@router.message(
    F.content_type == ContentType.TEXT,
    lambda message: not message.text.startswith('/')
)
async def handle_arbitrary_text(
    message: Message, 
    state: FSMContext, 
    ai_consultant_service: AIConsultantService, 
    ai_conversation_service: AIConversationService,
    price_service: PriceService, 
    admin_service: AdminService
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞.
    """
    # –§–∏–ª—å—Ç—Ä 1: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ AI)
    if (message.forward_from or message.forward_from_chat or 
        len(message.text.split()) < 3):
        return

    current_state = await state.get_state()
    if current_state is not None:
        return

    user_id = message.from_user.id
    user_text = message.text.strip()

    # –§–∏–ª—å—Ç—Ä 2: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä (–±–µ–∑ AI)
    coin = await price_service.get_crypto_price(user_text)
    if coin:
        await admin_service.track_command_usage(f"–ö—É—Ä—Å (—Ç–µ–∫—Å—Ç–æ–º): {coin.symbol}")
        change = coin.price_change_24h or 0
        emoji = "üìà" if change >= 0 else "üìâ"
        text = (f"<b>{coin.name} ({coin.symbol})</b>\n"
                f"üíπ –ö—É—Ä—Å: <b>${coin.price:,.4f}</b>\n"
                f"{emoji} 24—á: <b>{change:.2f}%</b>\n")
        if coin.algorithm:
            text += f"‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <code>{coin.algorithm}</code>"
        await message.answer(text)
        return

    # –§–∏–ª—å—Ç—Ä 3: –ì–ª—É–±–æ–∫–∏–π AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç–≤–µ—á–∞–µ–º –≤—Å–µ–≥–¥–∞, –≤ –≥—Ä—É–ø–ø–∞—Ö - —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    should_respond = False
    if message.chat.type == ChatType.PRIVATE:
        should_respond = True
    else:
        intent = await ai_consultant_service.get_user_intent(user_text)
        if intent == 'question':
            should_respond = True
    
    if not should_respond:
        return

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    await admin_service.track_command_usage("AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç (–≤–æ–ø—Ä–æ—Å)")
    
    temp_msg = await message.reply("ü§ñ –î—É–º–∞—é...")
    await asyncio.sleep(1.5)
    await temp_msg.edit_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    history = await ai_conversation_service.get_history(user_id)
    ai_answer = await ai_consultant_service.get_ai_answer(user_text, history)
    await ai_conversation_service.add_to_history(user_id, user_text, ai_answer)
    
    response_text = (
        f"<b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n<i>¬´{sanitize_html(user_text)}¬ª</i>\n\n"
        f"<b>–û—Ç–≤–µ—Ç AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:</b>\n{ai_answer}"
    )
    
    await temp_msg.edit_text(response_text, disable_web_page_preview=True)
