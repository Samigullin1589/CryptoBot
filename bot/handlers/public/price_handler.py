# ===============================================================
# –§–∞–π–ª: bot/handlers/public/price_handler.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FSM –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –≤ —Å–µ—Ä–≤–∏—Å—ã.
# ===============================================================
import logging
from typing import Union

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from bot.keyboards.info_keyboards import get_price_keyboard
from bot.keyboards.keyboards import get_main_menu_keyboard
from bot.services.price_service import PriceService
from bot.services.admin_service import AdminService
from bot.states.info_states import PriceInquiryStates
from bot.utils.formatters import format_price_info
from bot.utils.helpers import get_message_and_chat_id

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "menu_price")
@router.message(F.text == "üíπ –ö—É—Ä—Å")
async def handle_price_menu(update: Union[CallbackQuery, Message], state: FSMContext, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –≤ –º–µ–Ω—é –∫—É—Ä—Å–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É.
    """
    await admin_service.track_command_usage("üíπ –ö—É—Ä—Å")
    await state.clear() # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –º—ã –≤ —á–∏—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    message, _ = await get_message_and_chat_id(update)
    await message.answer("–ö—É—Ä—Å –∫–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=get_price_keyboard())
    await state.set_state(PriceInquiryStates.waiting_for_ticker)
    
    if isinstance(update, CallbackQuery):
        await update.answer()

@router.callback_query(F.data.startswith("price:"))
async def handle_price_ticker_callback(call: CallbackQuery, state: FSMContext, price_service: PriceService, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–∫–µ—Ä–æ–º –∏–ª–∏ '–î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞'.
    """
    await call.answer()
    ticker = call.data.split(":")[1]

    if ticker == "other":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä. Aleo):")
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –≤–≤–æ–¥–∞
        return

    await state.clear()
    await admin_service.track_command_usage(f"–ö—É—Ä—Å (–∫–Ω–æ–ø–∫–∞): {ticker.upper()}")
    await call.message.edit_text(f"‚è≥ –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å –¥–ª—è {ticker.upper()}...")
    
    coin = await price_service.get_crypto_price(ticker)
    if not coin:
        response_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–∫–µ—Ä—É '{ticker}'."
    else:
        response_text = format_price_info(coin)
    
    await call.message.edit_text(response_text, reply_markup=get_main_menu_keyboard())

@router.message(PriceInquiryStates.waiting_for_ticker)
async def process_ticker_text_input(message: Message, state: FSMContext, price_service: PriceService, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Ç–∏–∫–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—Ö–æ–¥—è—â–µ–≥–æ—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    await state.clear()
    ticker = message.text.strip()
    await admin_service.track_command_usage(f"–ö—É—Ä—Å (—Ç–µ–∫—Å—Ç): {ticker}")
    
    temp_msg = await message.answer(f"‚è≥ –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å –¥–ª—è '{ticker}'...")
    
    coin = await price_service.get_crypto_price(ticker)
    if not coin:
        response_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–∫–µ—Ä—É '{ticker}'."
    else:
        response_text = format_price_info(coin)
        
    await temp_msg.edit_text(response_text, reply_markup=get_main_menu_keyboard())
