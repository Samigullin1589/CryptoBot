# src/bot/handlers/public/price_handler.py
from __future__ import annotations
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from bot.keyboards.callback_factories import PriceCallback
from bot.utils.dependencies import Deps

router = Router(name="price_public")

# –ö—ç—à —Ü–µ–Ω —Å timestamp
_price_cache: Dict[str, tuple[float, datetime]] = {}
_CACHE_TTL = timedelta(seconds=60)  # 60 —Å–µ–∫—É–Ω–¥ –∫—ç—à

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SYMBOLS = ["BTC", "ETH", "BNB", "SOL", "XRP", "ADA", "DOGE", "DOT", "TRX", "MATIC", "LTC", "AVAX"]


def _fmt_price(p: Optional[float]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    if p is None:
        return "‚Äî"
    if p >= 1000:
        return f"{p:,.2f}".replace(",", " ")
    if p >= 1:
        return f"{p:.2f}"
    if p >= 0.01:
        return f"{p:.4f}"
    return f"{p:.8f}".rstrip("0").rstrip(".")


async def get_coin_id_by_symbol(deps: Deps, symbol: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç coin_id –ø–æ —Å–∏–º–≤–æ–ª—É —á–µ—Ä–µ–∑ CoinListService"""
    try:
        coin_list_service = getattr(deps, "coin_list_service", None)
        if coin_list_service and hasattr(coin_list_service, "get_coin_id_by_symbol"):
            coin_id = await coin_list_service.get_coin_id_by_symbol(symbol.upper())
            return coin_id
    except Exception as e:
        logger.warning(f"Failed to get coin_id for {symbol}: {e}")
    return None


async def get_symbol_by_coin_id(deps: Deps, coin_id: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏–º–≤–æ–ª –ø–æ coin_id —á–µ—Ä–µ–∑ CoinListService"""
    try:
        coin_list_service = getattr(deps, "coin_list_service", None)
        if coin_list_service and hasattr(coin_list_service, "get_symbol_by_coin_id"):
            symbol = await coin_list_service.get_symbol_by_coin_id(coin_id)
            return symbol
    except Exception as e:
        logger.warning(f"Failed to get symbol for {coin_id}: {e}")
    return None


async def get_price_cached(deps: Deps, coin_id: str) -> Optional[float]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if coin_id in _price_cache:
        cached_price, cached_time = _price_cache[coin_id]
        if now - cached_time < _CACHE_TTL:
            logger.debug(f"Cache hit for {coin_id}: {cached_price}")
            return cached_price
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂—É—é —Ü–µ–Ω—É
    try:
        price_service = getattr(deps, "price_service", None)
        if not price_service or not hasattr(price_service, "get_price"):
            logger.warning("price_service not available")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(0.1)
        
        price = await price_service.get_price(coin_id)
        if price is not None:
            price = float(price)
            _price_cache[coin_id] = (price, now)
            logger.debug(f"Fetched and cached price for {coin_id}: {price}")
            return price
            
    except Exception as e:
        logger.error(f"Error getting price for {coin_id}: {e}")
    
    return None


def get_price_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ–ø–æ–≤—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏"""
    buttons = []
    row = []
    
    for i, symbol in enumerate(DEFAULT_SYMBOLS, 1):
        row.append(InlineKeyboardButton(
            text=symbol,
            callback_data=PriceCallback(action="show", coin_id=symbol.lower()).pack()
        ))
        if i % 3 == 0:
            buttons.append(row)
            row = []
    
    if row:
        buttons.append(row)
    
    buttons.append([
        InlineKeyboardButton(
            text="üîç –ù–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—É",
            callback_data=PriceCallback(action="search", coin_id="").pack()
        ),
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=PriceCallback(action="refresh", coin_id="all").pack()
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_back_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=PriceCallback(action="open", coin_id="").pack()
        )]
    ])


@router.message(Command("price"))
async def cmd_price(message: Message, deps: Deps) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    try:
        text = "üí∞ <b>–¶–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω—ã:"
        await message.answer(text, parse_mode="HTML", reply_markup=get_price_keyboard())
        logger.info(f"User {message.from_user.id} opened price menu via /price")
    except Exception as e:
        logger.error(f"Error in cmd_price: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(PriceCallback.filter(F.action == "open"))
async def price_menu_handler(call: CallbackQuery, deps: Deps) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —Ü–µ–Ω –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        await call.answer()
        
        text = "üí∞ <b>–¶–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω—ã:"
        
        await call.message.edit_text(
            text, 
            parse_mode="HTML", 
            reply_markup=get_price_keyboard()
        )
        
        logger.info(f"User {call.from_user.id} opened price menu")
        
    except Exception as e:
        logger.error(f"Error in price_menu_handler: {e}", exc_info=True)
        
        try:
            await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except Exception:
            pass


@router.callback_query(PriceCallback.filter(F.action == "show"))
async def price_show_handler(call: CallbackQuery, deps: Deps, callback_data: PriceCallback) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    try:
        await call.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...")
        
        coin_id = callback_data.coin_id
        if not coin_id:
            await call.answer("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞", show_alert=True)
            return
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–∏–º–≤–æ–ª, –ø–æ–ª—É—á–∞–µ–º coin_id
        if coin_id.upper() in DEFAULT_SYMBOLS:
            resolved_coin_id = await get_coin_id_by_symbol(deps, coin_id.upper())
            if not resolved_coin_id:
                # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                resolved_coin_id = coin_id.lower()
            symbol = coin_id.upper()
        else:
            resolved_coin_id = coin_id
            symbol = await get_symbol_by_coin_id(deps, coin_id)
            if not symbol:
                symbol = coin_id.upper()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        price = await get_price_cached(deps, resolved_coin_id)
        
        if price is None:
            text = (
                f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {symbol}</b>\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API\n"
                f"‚Ä¢ –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
                f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
            )
        else:
            text = (
                f"üí∞ <b>{symbol}/USD</b>\n\n"
                f"<code>${_fmt_price(price)}</code>\n\n"
                f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>"
            )
        
        await call.message.edit_text(
            text, 
            parse_mode="HTML", 
            reply_markup=get_price_keyboard()
        )
        
        logger.info(f"User {call.from_user.id} viewed price for {symbol}")
        
    except Exception as e:
        logger.error(f"Error in price_show_handler: {e}", exc_info=True)
        
        try:
            await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except Exception:
            pass


@router.callback_query(PriceCallback.filter(F.action == "search"))
async def price_search_handler(call: CallbackQuery, deps: Deps) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç"""
    try:
        await call.answer()
        
        text = (
            "üîç <b>–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∏–º–≤–æ–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>BTC</code>, <code>ETH</code>, <code>LINK</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        
        await call.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        
        logger.info(f"User {call.from_user.id} initiated coin search")
        
    except Exception as e:
        logger.error(f"Error in price_search_handler: {e}", exc_info=True)


@router.message(F.text & ~F.text.startswith("/"))
async def handle_coin_search(message: Message, deps: Deps) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã –ø–æ —Ç–µ–∫—Å—Ç—É"""
    try:
        search_text = message.text.strip().upper()
        
        if len(search_text) < 2 or len(search_text) > 10:
            await message.answer(
                "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (2-10 —Å–∏–º–≤–æ–ª–æ–≤)\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, LINK"
            )
            return
        
        # –ò—â–µ–º coin_id –ø–æ —Å–∏–º–≤–æ–ª—É
        coin_id = await get_coin_id_by_symbol(deps, search_text)
        
        if not coin_id:
            await message.answer(
                f"‚ùå –ú–æ–Ω–µ—Ç–∞ <b>{search_text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞",
                parse_mode="HTML",
                reply_markup=get_price_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        price = await get_price_cached(deps, coin_id)
        
        if price is None:
            text = (
                f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {search_text}</b>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        else:
            text = (
                f"üí∞ <b>{search_text}/USD</b>\n\n"
                f"<code>${_fmt_price(price)}</code>\n\n"
                f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>"
            )
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_price_keyboard()
        )
        
        logger.info(f"User {message.from_user.id} searched and viewed price for {search_text}")
        
    except Exception as e:
        logger.error(f"Error in handle_coin_search: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")


@router.callback_query(PriceCallback.filter(F.action == "refresh"))
async def price_refresh_handler(call: CallbackQuery, deps: Deps) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é —Ü–µ–Ω"""
    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        _price_cache.clear()
        
        await call.answer("üîÑ –ö—ç—à –æ—á–∏—â–µ–Ω")
        await price_menu_handler(call, deps)
        
    except Exception as e:
        logger.error(f"Error in price_refresh_handler: {e}", exc_info=True)
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)