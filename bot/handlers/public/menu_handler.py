# src/bot/handlers/public/menu_handler.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from loguru import logger

from bot.keyboards.keyboards import get_main_menu_keyboard
from bot.keyboards.callback_factories import PriceCallback, NewsCallback

router = Router(name="menu_public")


def get_quick_actions_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    buttons = [
        [
            InlineKeyboardButton(
                text="üí± –¶–µ–Ω–∞ BTC",
                callback_data=PriceCallback(action="show", coin_id="bitcoin").pack()
            ),
            InlineKeyboardButton(
                text="üì∞ –ù–æ–≤–æ—Å—Ç–∏",
                callback_data=NewsCallback(action="sources", source_key=None).pack()
            ),
        ],
        [
            InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="menu:help"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(Command("menu"))
async def cmd_menu(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "<b>üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu_keyboard()
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    await message.answer(
        "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_quick_actions_keyboard()
    )


@router.callback_query(F.data == "menu:open")
async def cb_open(call: CallbackQuery) -> None:
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    await call.answer()
    
    try:
        await call.message.edit_text(
            "<b>üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Error editing menu message: {e}")
        await call.message.answer(
            "<b>üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard()
        )


@router.callback_query(F.data == "menu:help")
async def cb_help_shortcut(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ callback –∏–∑ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    await call.answer()
    
    help_text = (
        "<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/game - –ú–∞–π–Ω–∏–Ω–≥-–∏–≥—Ä–∞\n"
        "/price - –¶–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/news - –ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏\n"
        "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "<b>–†–∞–∑–¥–µ–ª—ã –º–µ–Ω—é:</b>\n"
        "üìà –ö—É—Ä—Å - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "üèÜ –¢–æ–ø ASIC - –õ—É—á—à–∏–µ –º–∞–π–Ω–µ—Ä—ã\n"
        "üïπ –ò–≥—Ä–∞ - –ú–∞–π–Ω–∏–Ω–≥-—Å–∏–º—É–ª—è—Ç–æ—Ä\n"
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏ - –ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏\n"
        "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n"
        "üõí –†—ã–Ω–æ–∫ - –ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞\n"
        "üß≠ –¶–µ–Ω—Ç—Ä - –û–±—É—á–µ–Ω–∏–µ\n"
        "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π\n\n"
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ /support"
    )
    
    try:
        await call.message.edit_text(
            help_text,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Error editing help message: {e}")
        await call.message.answer(
            help_text,
            parse_mode=ParseMode.HTML
        )