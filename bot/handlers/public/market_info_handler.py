# bot/handlers/public/market_info_handler.py

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from loguru import logger

from bot.services.market_data_service import MarketDataService
from bot.keyboards.inline.market_keyboards import get_market_menu_keyboard

router = Router(name="market_info_handler")


@router.callback_query(F.data == "market_info")
async def market_info_menu(
    callback: CallbackQuery,
    market_data_service: MarketDataService
):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä—ã–Ω–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        text = (
            "üìä <b>–†—ã–Ω–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ:"
        )
        
        keyboard = get_market_menu_keyboard()
        
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ market_info_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "btc_network_status")
async def handle_btc_status(
    callback: CallbackQuery,
    market_data_service: MarketDataService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ Bitcoin"""
    try:
        await callback.answer("–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏ Bitcoin...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏
        status = await market_data_service.get_btc_network_status()
        
        if not status:
            # –í–º–µ—Å—Ç–æ raise –∏—Å–ø–æ–ª—å–∑—É–µ–º graceful fallback
            text = (
                "‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏ Bitcoin.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª."
            )
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            difficulty = status.get("difficulty", 0)
            hash_rate = status.get("hash_rate", 0)
            blocks = status.get("blocks_count", 0)
            next_retarget = status.get("next_retarget", 0)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º hash rate –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            if hash_rate > 0:
                hash_rate_eh = hash_rate / 1_000_000_000_000_000_000  # –≤ EH/s
                hash_rate_str = f"{hash_rate_eh:.2f} EH/s"
            else:
                hash_rate_str = "–ù/–î"
            
            text = (
                f"‚õè <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin</b>\n\n"
                f"üìä <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {difficulty:,.0f}\n"
                f"‚ö°Ô∏è <b>–•–µ—à—Ä–µ–π—Ç:</b> {hash_rate_str}\n"
                f"üì¶ <b>–ë–ª–æ–∫–æ–≤:</b> {blocks:,}\n"
                f"üéØ <b>–°–ª–µ–¥. –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞:</b> –±–ª–æ–∫ {next_retarget:,}\n\n"
                f"<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"
            )
        
        keyboard = get_market_menu_keyboard()
        
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
                
        logger.info(f"User {callback.from_user.id} viewed BTC network status")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_btc_status: {e}")
        try:
            await callback.message.edit_text(
                text=(
                    "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏ Bitcoin.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                ),
                reply_markup=get_market_menu_keyboard(),
                parse_mode="HTML"
            )
        except:
            await callback.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.",
                show_alert=True
            )


@router.callback_query(F.data == "market_overview")
async def handle_market_overview(
    callback: CallbackQuery,
    market_data_service: MarketDataService
):
    """–û–±—â–∏–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞"""
    try:
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –º–æ–Ω–µ—Ç
        top_coins = ["btc", "eth", "bnb", "xrp", "ada", "sol", "doge", "dot"]
        prices = await market_data_service.get_prices(top_coins)
        
        text = "üìà <b>–û–±–∑–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞</b>\n\n"
        
        coin_names = {
            "btc": "Bitcoin",
            "eth": "Ethereum", 
            "bnb": "BNB",
            "xrp": "XRP",
            "ada": "Cardano",
            "sol": "Solana",
            "doge": "Dogecoin",
            "dot": "Polkadot"
        }
        
        for coin_id, price in prices.items():
            if price:
                name = coin_names.get(coin_id, coin_id.upper())
                text += f"‚Ä¢ <b>{name}:</b> ${price:,.2f}\n"
        
        text += "\n<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥</i>"
        
        keyboard = get_market_menu_keyboard()
        
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
                
        logger.info(f"User {callback.from_user.id} viewed market overview")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_market_overview: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("market_"))
async def handle_market_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    if callback.data == "market_back":
        await market_info_menu(callback, callback.bot.get("market_data_service"))