# =================================================================================
# –§–∞–π–ª: bot/handlers/public/market_info_handler.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - —Å AI-–ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,
#           –¥–æ–ø–æ–ª–Ω—è—è –∏—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –æ—Ç AI.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –≤—ã–∑–æ–≤–∞ AI –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ Bitcoin.
# =================================================================================
import logging
from aiogram import F, Router
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext

from bot.utils.dependencies import Deps
from bot.keyboards.keyboards import get_back_to_main_menu_keyboard
from bot.utils.formatters import format_halving_info, format_network_status
from bot.utils.plotting import generate_fng_image

router = Router(name=__name__)
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "nav:fear_index")
async def handle_fear_greed_index(call: CallbackQuery, deps: Deps, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É AI
    –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞.
    """
    await call.answer()
    temp_message = await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω–¥–µ–∫—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç AI...")
    
    try:
        data = await deps.market_data_service.get_fear_and_greed_index()
        if not data:
            raise ValueError("API –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö.")

        value = int(data['value'])
        classification = data['value_classification']
        
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        image_bytes = generate_fng_image(value, classification)
        photo = BufferedInputFile(image_bytes, filename="fng_index.png")
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è AI
        ai_question = (
            f"–í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ –∫—Ä–∏–ø—Ç–æ-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞. –ö—Ä–∞—Ç–∫–æ, –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, "
            f"—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '–ò–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' —Ä–∞–≤–Ω–æ–µ {value} (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {classification}). "
            f"–û–ø–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ, –Ω–æ –Ω–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤."
        )
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        ai_explanation = await deps.ai_content_service.get_consultant_answer(ai_question, history=[])

        # 4. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        base_caption = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏:</b> {value}\n<i>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {classification}</i>"
        final_caption = base_caption
        if ai_explanation and "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" not in ai_explanation:
            final_caption += f"\n\n<b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç AI:</b>\n{ai_explanation}"

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await temp_message.delete()
        await call.message.answer_photo(
            photo=photo,
            caption=final_caption,
            reply_markup=get_back_to_main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        await temp_message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "nav:halving")
async def handle_halving_info(call: CallbackQuery, deps: Deps, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–ª–≤–∏–Ω–≥–µ Bitcoin, –∏—Å–ø–æ–ª—å–∑—É—è MarketDataService.
    """
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ...")
    try:
        data = await deps.market_data_service.get_halving_info()
        if not data:
            raise ValueError("API –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        
        text = format_halving_info(data)
        await call.message.edit_text(text, reply_markup=get_back_to_main_menu_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ö–∞–ª–≤–∏–Ω–≥–µ: {e}", exc_info=True)
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ.", show_alert=True)


@router.callback_query(F.data == "nav:btc_status")
async def handle_btc_status(call: CallbackQuery, deps: Deps, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin, –¥–æ–ø–æ–ª–Ω—è—è –µ–≥–æ –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –æ—Ç AI.
    """
    await call.answer()
    temp_message = await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–Ω–∞–ª–∏–∑ —É AI...")
    try:
        data = await deps.market_data_service.get_btc_network_status()
        if not data:
            raise ValueError("–°–µ—Ä–≤–∏—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏ BTC.")

        # 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = format_network_status(data)
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è AI
        hashrate_ehs = data.get('hashrate_ehs', 0.0)
        ai_question = (
            f"–í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ –∫—Ä–∏–ø—Ç–æ-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞. –•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏ Bitcoin —Å–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {hashrate_ehs:.0f} EH/s. "
            f"–ö—Ä–∞—Ç–∫–æ, –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–∞–π–Ω–µ—Ä–∞. "
            f"–≠—Ç–æ –≤—ã—Å–æ–∫–æ–µ –∏–ª–∏ –Ω–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ? –ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏? –ù–µ –¥–∞–≤–∞–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤."
        )

        # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç AI
        ai_explanation = await deps.ai_content_service.get_consultant_answer(ai_question, history=[])
        
        # 4. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if ai_explanation and "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" not in ai_explanation:
            text += f"\n\n<b>–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç (–∞–Ω–∞–ª–∏–∑ AI):</b>\n{ai_explanation}"

        await temp_message.edit_text(text, reply_markup=get_back_to_main_menu_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ BTC: {e}", exc_info=True)
        await temp_message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏.")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏.", show_alert=True)