# =================================================================================
# –§–∞–π–ª: bot/handlers/public/market_info_handler.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –†–ï–§–ê–ö–¢–û–†–ò–ù–ì)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã MenuCallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.
# =================================================================================
import logging
from aiogram import F, Router
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext

from bot.utils.dependencies import Deps
from bot.keyboards.keyboards import get_back_to_main_menu_keyboard
from bot.keyboards.callback_factories import MenuCallback
from bot.utils.formatters import format_halving_info, format_network_status
from bot.utils.plotting import generate_fng_image

router = Router(name=__name__)
logger = logging.getLogger(__name__)

@router.callback_query(MenuCallback.filter(F.action == "fear_index"))
async def handle_fear_greed_index(call: CallbackQuery, deps: Deps, state: FSMContext):
    await call.answer()
    temp_message = await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω–¥–µ–∫—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç AI...")
    
    try:
        data = await deps.market_data_service.get_fear_and_greed_index()
        if not data: raise ValueError("API –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö.")

        value = int(data['value'])
        classification = data['value_classification']
        
        image_bytes = generate_fng_image(value, classification)
        photo = BufferedInputFile(image_bytes, filename="fng_index.png")
        
        ai_question = (f"–ö—Ä–∞—Ç–∫–æ, –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' {value} ({classification}).")
        ai_explanation = await deps.ai_content_service.get_consultant_answer(ai_question, history=[])

        base_caption = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏:</b> {value}\n<i>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {classification}</i>"
        final_caption = base_caption
        if ai_explanation and "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" not in ai_explanation:
            final_caption += f"\n\n<b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç AI:</b>\n{ai_explanation}"

        await temp_message.delete()
        await call.message.answer_photo(photo=photo, caption=final_caption, reply_markup=get_back_to_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        await temp_message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞.")

@router.callback_query(MenuCallback.filter(F.action == "halving"))
async def handle_halving_info(call: CallbackQuery, deps: Deps, state: FSMContext):
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ...")
    try:
        data = await deps.market_data_service.get_halving_info()
        if not data: raise ValueError("API –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        
        text = format_halving_info(data)
        await call.message.edit_text(text, reply_markup=get_back_to_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ö–∞–ª–≤–∏–Ω–≥–µ: {e}", exc_info=True)
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

@router.callback_query(MenuCallback.filter(F.action == "btc_status"))
async def handle_btc_status(call: CallbackQuery, deps: Deps, state: FSMContext):
    await call.answer()
    temp_message = await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–Ω–∞–ª–∏–∑ —É AI...")
    try:
        data = await deps.market_data_service.get_btc_network_status()
        if not data: raise ValueError("–°–µ—Ä–≤–∏—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏ BTC.")

        text = format_network_status(data)
        hashrate_ehs = data.get('hashrate_ehs', 0.0)
        ai_question = (f"–•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏ Bitcoin —Å–µ–π—á–∞—Å ~{hashrate_ehs:.0f} EH/s. –ö—Ä–∞—Ç–∫–æ, –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç.")
        ai_explanation = await deps.ai_content_service.get_consultant_answer(ai_question, history=[])
        
        if ai_explanation and "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" not in ai_explanation:
            text += f"\n\n<b>–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç (–∞–Ω–∞–ª–∏–∑ AI):</b>\n{ai_explanation}"

        await temp_message.edit_text(text, reply_markup=get_back_to_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ BTC: {e}", exc_info=True)
        await temp_message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏.")