# =================================================================================
# –§–∞–π–ª: bot/handlers/public/market_info_handler.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –ù–û–í–´–ô)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
# =================================================================================
import logging
from datetime import datetime
from aiogram import F, Router
from aiogram.types import CallbackQuery

from bot.utils.dependencies import Deps
from bot.keyboards.keyboards import get_back_to_main_menu_keyboard

router = Router(name=__name__)
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "nav:market_fear_greed")
async def handle_fear_greed_index(call: CallbackQuery, deps: Deps):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏."""
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω–¥–µ–∫—Å...")
    try:
        async with deps.http_session.get(str(deps.settings.endpoints.fear_and_greed_api)) as response:
            response.raise_for_status()
            data = await response.json()
            value = int(data['data'][0]['value'])
            classification = data['data'][0]['value_classification']
            emoji = {"Extreme Fear": "üò±", "Fear": "üò®", "Neutral": "üòê", "Greed": "üòè", "Extreme Greed": "ü§ë"}.get(classification, "")
            text = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏:</b> {value} {emoji}\n\n<i>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {classification}</i>"
            await call.message.edit_text(text, reply_markup=get_back_to_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {e}")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

@router.callback_query(F.data == "nav:market_halving")
async def handle_halving_info(call: CallbackQuery, deps: Deps):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–ª–≤–∏–Ω–≥–µ Bitcoin."""
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ...")
    try:
        async with deps.http_session.get(str(deps.settings.endpoints.mempool_space_difficulty)) as response:
            response.raise_for_status()
            data = await response.json()
            progress = data.get('progressPercent', 0)
            remaining_blocks = data.get('remainingBlocks', 0)
            estimated_date = datetime.fromtimestamp(data.get('nextRetargetTimeEstimate')).strftime('%d.%m.%Y')
            text = (f"‚è≥ <b>–•–∞–ª–≤–∏–Ω–≥ Bitcoin</b>\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞: <b>{progress:.2f}%</b>\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–æ–≤: <b>{remaining_blocks:,}</b>\n"
                    f"–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞: <b>{estimated_date}</b>")
            await call.message.edit_text(text, reply_markup=get_back_to_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ö–∞–ª–≤–∏–Ω–≥–µ: {e}")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

@router.callback_query(F.data == "nav:market_btc_status")
async def handle_btc_status(call: CallbackQuery, deps: Deps):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin."""
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏...")
    try:
        async with deps.http_session.get(str(deps.settings.endpoints.blockchain_info_hashrate)) as response:
            response.raise_for_status()
            hashrate_ths = float(await response.text()) / 1_000_000 # TH/s -> EH/s
            text = f"üì° <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin</b>\n\n–•–µ—à—Ä–µ–π—Ç: <b>{hashrate_ths:.2f} EH/s</b>"
            await call.message.edit_text(text, reply_markup=get_back_to_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ BTC: {e}")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
