# ===============================================================
# –§–∞–π–ª: bot/handlers/public/crypto_center_handler.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –£–õ–£–ß–®–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: "–¢–æ–Ω–∫–∏–π" —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞
# –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
# ===============================================================
import logging
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from bot.services.crypto_center_service import CryptoCenterService
from bot.states.crypto_center_states import CryptoCenterStates
from bot.keyboards.crypto_center_keyboards import *
from bot.utils.formatters import *
from bot.texts.public_texts import CRYPTO_CENTER_TEXTS

router = Router(name="crypto_center_handler")
logger = logging.getLogger(__name__)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é ---

@router.callback_query(F.data == "nav:crypto_center")
async def crypto_center_entry(call: CallbackQuery, state: FSMContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä."""
    await state.set_state(CryptoCenterStates.main_menu)
    await call.message.edit_text(
        CRYPTO_CENTER_TEXTS['main_menu'],
        reply_markup=get_crypto_center_main_menu_keyboard()
    )
    await call.answer()

@router.callback_query(F.data == "cc_nav:main_menu")
async def crypto_center_back_to_main(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    await crypto_center_entry(call, state)

@router.callback_query(F.data == "cc_nav:guides_menu")
async def crypto_center_guides_menu(call: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≥–∞–π–¥–æ–≤."""
    await state.set_state(CryptoCenterStates.viewing_guides_menu)
    await call.message.edit_text(
        CRYPTO_CENTER_TEXTS['guides_menu'],
        reply_markup=get_crypto_center_guides_menu_keyboard()
    )
    await call.answer()

# --- –õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª—ã ---

@router.callback_query(F.data == "cc_nav:feed")
async def crypto_center_feed(call: CallbackQuery, state: FSMContext, crypto_center_service: CryptoCenterService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π —Å AI-—Å–∞–º–º–∞—Ä–∏."""
    await state.set_state(CryptoCenterStates.viewing_feed)
    await call.message.edit_text("‚è≥ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    feed_items = await crypto_center_service.get_live_feed_with_summary()
    text = format_crypto_feed(feed_items)
    await call.message.edit_text(text, reply_markup=get_live_feed_keyboard(), disable_web_page_preview=True)
    await call.answer()

@router.callback_query(F.data == "cc_nav:mining_signals")
async def crypto_center_mining_signals(call: CallbackQuery, state: FSMContext, crypto_center_service: CryptoCenterService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª—ã."""
    await state.set_state(CryptoCenterStates.viewing_mining_signals)
    await call.message.edit_text("‚è≥ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª—ã...")
    signals = await crypto_center_service.generate_mining_alpha()
    text = format_mining_signals(signals)
    await call.message.edit_text(text, reply_markup=get_back_to_cc_menu_keyboard('guides_menu'), disable_web_page_preview=True)
    await call.answer()

# --- –°–ø–∏—Å–æ–∫ Airdrop'–æ–≤ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä ---

@router.callback_query(AirdropListPage.filter())
async def airdrops_list_handler(call: CallbackQuery, callback_data: AirdropListPage, state: FSMContext, crypto_center_service: CryptoCenterService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Airdrop'–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    await state.set_state(CryptoCenterStates.viewing_airdrops_list)
    await call.message.edit_text("‚è≥ AI –∏—â–µ—Ç Airdrop-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
    
    airdrops = await crypto_center_service.generate_airdrop_alpha() # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
    
    if not airdrops:
        await call.message.edit_text(
            "üòï AI –Ω–µ –Ω–∞—à–µ–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö Airdrop-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
            reply_markup=get_back_to_cc_menu_keyboard('guides_menu')
        )
        return
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    page = callback_data.page
    page_size = 5
    total_pages = (len(airdrops) + page_size - 1) // page_size
    paginated_airdrops = airdrops[(page-1)*page_size : page*page_size]
    
    await state.update_data(all_airdrops=airdrops) # –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ FSM
    
    await call.message.edit_text(
        CRYPTO_CENTER_TEXTS['airdrops_list'],
        reply_markup=get_airdrops_list_keyboard(paginated_airdrops, page, total_pages)
    )
    await call.answer()

@router.callback_query(AirdropDetails.filter())
async def airdrop_details_handler(call: CallbackQuery, callback_data: AirdropDetails, state: FSMContext, crypto_center_service: CryptoCenterService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± Airdrop."""
    fsm_data = await state.get_data()
    all_airdrops = fsm_data.get('all_airdrops', [])
    airdrop_id = callback_data.airdrop_id
    
    airdrop = next((a for a in all_airdrops if a['id'] == airdrop_id), None)
    
    if not airdrop:
        await call.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.", show_alert=True)
        return
    
    await state.set_state(CryptoCenterStates.viewing_airdrop_details)
    user_progress = await crypto_center_service.get_user_progress(call.from_user.id, airdrop_id)
    text = format_airdrop_details(airdrop)
    keyboard = get_airdrop_details_keyboard(airdrop, user_progress)
    await call.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    await call.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ–∫–ª–∏—Å—Ç) ---

@router.callback_query(AirdropTask.filter(), CryptoCenterStates.viewing_airdrop_details)
async def toggle_task_handler(call: CallbackQuery, callback_data: AirdropTask, state: FSMContext, crypto_center_service: CryptoCenterService):
    """–û—Ç–º–µ—á–∞–µ—Ç/—Å–Ω–∏–º–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ —á–µ–∫–ª–∏—Å—Ç–µ."""
    airdrop_id = callback_data.airdrop_id
    task_index = callback_data.task_index

    await crypto_center_service.toggle_task_status(call.from_user.id, airdrop_id, task_index)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    fsm_data = await state.get_data()
    all_airdrops = fsm_data.get('all_airdrops', [])
    airdrop = next((a for a in all_airdrops if a['id'] == airdrop_id), None)

    if not airdrop:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return

    user_progress = await crypto_center_service.get_user_progress(call.from_user.id, airdrop_id)
    new_keyboard = get_airdrop_details_keyboard(airdrop, user_progress)
    
    try:
        await call.message.edit_reply_markup(reply_markup=new_keyboard)
        await call.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except TelegramBadRequest as e:
        logger.warning(f"Could not edit reply markup for toggle_task: {e}")
        await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏.")
