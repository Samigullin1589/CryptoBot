# =================================================================================
# –§–∞–π–ª: bot/handlers/public/crypto_center_handler.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –§–ò–ù–ê–õ–¨–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä".
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.
# =================================================================================

import logging
from math import ceil
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from bot.utils.dependencies import Deps
from bot.states.info_states import CryptoCenterStates
from bot.keyboards.crypto_center_keyboards import (
    get_crypto_center_main_menu_keyboard,
    get_airdrop_list_keyboard,
    get_airdrop_details_keyboard,
    get_mining_alpha_keyboard,
    get_news_feed_keyboard,
    CC_CALLBACK_PREFIX,
    PAGE_SIZE
)

logger = logging.getLogger(__name__)
router = Router(name=__name__)

@router.callback_query(F.data == "nav:crypto_center")
@router.callback_query(F.data == f"{CC_CALLBACK_PREFIX}:main")
async def crypto_center_main_menu(call: types.CallbackQuery, state: FSMContext, **kwargs):
    await state.set_state(CryptoCenterStates.main_menu)
    text = ("üíé <b>–ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä</b>\n\n"
            "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. "
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")
    keyboard = get_crypto_center_main_menu_keyboard()
    await call.message.edit_text(text, reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:airdrops:list:"))
async def airdrop_list_handler(call: types.CallbackQuery, deps: Deps, state: FSMContext):
    await state.set_state(CryptoCenterStates.airdrop_list)
    page = int(call.data.split(":")[-1])
    projects = await deps.crypto_center_service.get_airdrop_alpha(call.from_user.id)
    
    if not projects:
        text = "üíé <b>Airdrop Alpha</b>\n\n–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, AI –ø–æ–∫–∞ –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!"
        await call.message.edit_text(text, reply_markup=get_crypto_center_main_menu_keyboard())
        await call.answer()
        return

    total_pages = ceil(len(projects) / PAGE_SIZE)
    start_index, end_index = page * PAGE_SIZE, (page + 1) * PAGE_SIZE
    
    text = "üíé <b>Airdrop Alpha (–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞)</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç –∑–∞–¥–∞—á."
    keyboard = get_airdrop_list_keyboard(projects[start_index:end_index], page, total_pages)
    
    await call.message.edit_text(text, reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:airdrops:view:"))
async def airdrop_view_handler(call: types.CallbackQuery, deps: Deps, state: FSMContext):
    await state.set_state(CryptoCenterStates.airdrop_view)
    project_id = call.data.split(":")[-1]
    projects = await deps.crypto_center_service.get_airdrop_alpha(call.from_user.id)
    project = next((p for p in projects if p.id == project_id), None)

    if not project:
        await call.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
        return

    completed_tasks = await deps.crypto_center_service.get_user_progress(call.from_user.id, project_id)
    
    text = (f"<b>{project.name}</b>\n\n"
            f"<i>{project.description}</i>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {project.status}\n\n"
            "<b>–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>")
    keyboard = get_airdrop_details_keyboard(project, completed_tasks)

    await call.message.edit_text(text, reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:airdrops:task:"))
async def airdrop_task_toggle_handler(call: types.CallbackQuery, deps: Deps, state: FSMContext):
    parts = call.data.split(":")
    project_id, task_index = parts[-2], int(parts[-1])
    await deps.crypto_center_service.toggle_task_status(call.from_user.id, project_id, task_index)
    await airdrop_view_handler(call, deps, state)

@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:mining:list:"))
async def mining_list_handler(call: types.CallbackQuery, deps: Deps, state: FSMContext):
    await state.set_state(CryptoCenterStates.mining_alpha_list)
    signals = await deps.crypto_center_service.get_mining_alpha(call.from_user.id)

    if not signals:
        text = "‚öôÔ∏è <b>Mining Alpha</b>\n\nAI –Ω–µ –Ω–∞—à–µ–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await call.message.edit_text(text, reply_markup=get_crypto_center_main_menu_keyboard())
        await call.answer()
        return
        
    text = "‚öôÔ∏è <b>Mining Alpha (–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞)</b>\n\n"
    for signal in signals:
        text += (f"\n<b>üîπ {signal.get('name')}</b> ({signal.get('algorithm')})\n"
                 f"<i>{signal.get('description')}</i>\n"
                 f"<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> <code>{signal.get('hardware')}</code>\n")
    
    keyboard = get_mining_alpha_keyboard([], 0, 1) # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    await call.message.edit_text(text, reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:news:list:"))
async def news_list_handler(call: types.CallbackQuery, deps: Deps, state: FSMContext):
    await state.set_state(CryptoCenterStates.news_feed)
    articles = await deps.crypto_center_service.get_live_feed_with_summary()
    
    if not articles:
        text = "üì∞ <b>Live –õ–µ–Ω—Ç–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ª–µ–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await call.message.edit_text(text, reply_markup=get_crypto_center_main_menu_keyboard())
        await call.answer()
        return

    text = "üì∞ <b>Live –õ–µ–Ω—Ç–∞ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º</b>\n"
    for article in articles[:PAGE_SIZE]:
        summary = f"<i><b>AI:</b> {article.ai_summary}</i>" if article.ai_summary else ""
        text += f"\n\n<b><a href='{article.url}'>{article.title}</a></b>\n{summary}"

    keyboard = get_news_feed_keyboard([], 0, 1) # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    await call.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    await call.answer()