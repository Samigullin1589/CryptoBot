# =================================================================================
# –§–∞–π–ª: bot/handlers/public/crypto_center_handler.py (–í–ï–†–°–ò–Ø "–ì–ï–ù–ò–ô 2.0" - –ì–û–¢–û–í–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞.
# =================================================================================

import logging
from math import ceil
from aiogram import Router, F, types
from aiogram.filters import Command

from bot.services.crypto_center_service import CryptoCenterService
from bot.keyboards.crypto_center_keyboards import (
    get_crypto_center_main_menu_keyboard,
    get_airdrop_list_keyboard,
    get_airdrop_details_keyboard,
    get_mining_alpha_keyboard,
    get_news_feed_keyboard,
    CC_CALLBACK_PREFIX
)

logger = logging.getLogger(__name__)
router = Router()
PAGE_SIZE = 5

@router.message(Command("crypto_center"))
@router.callback_query(F.data == f"{CC_CALLBACK_PREFIX}:main")
async def crypto_center_main_menu(message: types.Message | types.CallbackQuery):
    text = ("üß† <b>–ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä 2025</b>\n\n"
            "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. "
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")
    keyboard = get_crypto_center_main_menu_keyboard()

    if isinstance(message, types.CallbackQuery):
        await message.message.edit_text(text, reply_markup=keyboard)
        await message.answer()
    else:
        await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:airdrops:list:"))
async def airdrop_list_handler(callback: types.CallbackQuery, crypto_center_service: CryptoCenterService):
    page = int(callback.data.split(":")[-1])
    projects = await crypto_center_service.get_airdrop_alpha(callback.from_user.id)
    
    if not projects:
        text = "üíé <b>Airdrop Alpha</b>\n\n–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, AI –ø–æ–∫–∞ –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!"
        keyboard = get_crypto_center_main_menu_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return

    total_pages = ceil(len(projects) / PAGE_SIZE)
    start_index = page * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    
    text = "üíé <b>Airdrop Alpha (–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞)</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç –∑–∞–¥–∞—á."
    keyboard = get_airdrop_list_keyboard(projects[start_index:end_index], page, total_pages)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:airdrops:view:"))
async def airdrop_view_handler(callback: types.CallbackQuery, crypto_center_service: CryptoCenterService):
    project_id = callback.data.split(":")[-1]
    projects = await crypto_center_service.get_airdrop_alpha(callback.from_user.id)
    project = next((p for p in projects if p.id == project_id), None)

    if not project:
        await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
        return

    completed_tasks = await crypto_center_service.get_user_progress(callback.from_user.id, project_id)
    
    text = (f"<b>{project.name}</b>\n\n"
            f"<i>{project.description}</i>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {project.status}\n\n"
            "<b>–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>")
    keyboard = get_airdrop_details_keyboard(project, completed_tasks)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:airdrops:task:"))
async def airdrop_task_toggle_handler(callback: types.CallbackQuery, crypto_center_service: CryptoCenterService):
    parts = callback.data.split(":")
    project_id, task_index = parts[-2], int(parts[-1])
    await crypto_center_service.toggle_task_status(callback.from_user.id, project_id, task_index)
    await airdrop_view_handler(callback, crypto_center_service)

@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:mining:list:"))
async def mining_list_handler(callback: types.CallbackQuery, crypto_center_service: CryptoCenterService):
    page = int(callback.data.split(":")[-1])
    signals = await crypto_center_service.get_mining_alpha(callback.from_user.id)

    if not signals:
        text = "‚öôÔ∏è <b>Mining Alpha</b>\n\nAI –ø–æ–∫–∞ –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!"
        keyboard = get_crypto_center_main_menu_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        return

    total_pages = ceil(len(signals) / PAGE_SIZE)
    start_index = page * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    paginated_signals = signals[start_index:end_index]

    text = "‚öôÔ∏è <b>Mining Alpha (–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞)</b>\n\n–°–∏–≥–Ω–∞–ª—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π:"
    for signal in paginated_signals:
        text += f"\n\nüîπ <b>{signal['name']}</b>\n{signal['description']}\n<i>–ñ–µ–ª–µ–∑–æ: {signal['hardware']}</i>"

    keyboard = get_mining_alpha_keyboard(paginated_signals, page, total_pages)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith(f"{CC_CALLBACK_PREFIX}:news:list:"))
async def news_list_handler(callback: types.CallbackQuery, crypto_center_service: CryptoCenterService):
    page = int(callback.data.split(":")[-1])
    articles = await crypto_center_service.get_live_feed_with_summary()

    if not articles:
        text = "üì∞ <b>Live –õ–µ–Ω—Ç–∞</b>\n\n–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
        keyboard = get_crypto_center_main_menu_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        return

    total_pages = ceil(len(articles) / PAGE_SIZE)
    start_index = page * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    
    text = "üì∞ <b>Live –õ–µ–Ω—Ç–∞ (—Å AI-–æ–±–∑–æ—Ä–æ–º)</b>\n"
    for article in articles[start_index:end_index]:
        text += f"\n\n<a href='{article.url}'><b>{article.title}</b></a>\n"
        if article.ai_summary:
            text += f"<i>AI-–∫—Ä–∞—Ç–∫–æ: {article.ai_summary}</i>"
        else:
            text += f"<i>{article.body[:150]}...</i>"
    
    keyboard = get_news_feed_keyboard(articles, page, total_pages)
    await callback.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    await callback.answer()