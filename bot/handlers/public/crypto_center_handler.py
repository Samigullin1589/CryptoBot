# =================================================================================
# –§–∞–π–ª: bot/handlers/public/crypto_center_handler.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä".
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–±—Ä–∏–∫ CallbackData.
# =================================================================================
import logging
from math import ceil
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hlink

from bot.utils.dependencies import Deps
from bot.states.crypto_center_states import CryptoCenterStates
from bot.keyboards.callback_factories import MenuCallback, CryptoCenterCallback
from bot.keyboards.crypto_center_keyboards import (
    get_crypto_center_main_menu_keyboard,
    get_airdrop_list_keyboard,
    get_airdrop_details_keyboard,
    get_mining_alpha_keyboard,
    get_news_feed_keyboard,
    PAGE_SIZE
)

router = Router(name=__name__)
logger = logging.getLogger(__name__)

# --- –¢–û–ß–ö–ê –í–•–û–î–ê –ò –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---

@router.callback_query(MenuCallback.filter(F.action == "crypto_center"))
async def crypto_center_entry(call: types.CallbackQuery, state: FSMContext, deps: Deps):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await state.clear()
    await state.set_state(CryptoCenterStates.main_menu)
    text = (
        "üíé <b>–ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä</b>\n\n"
        "–≠—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ö–∞–±, –≥–¥–µ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏—â–µ—Ç –¥–ª—è –≤–∞—Å —Å–∞–º—ã–µ "
        "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä—ã–Ω–∫–µ."
    )
    await call.message.edit_text(text, reply_markup=get_crypto_center_main_menu_keyboard())
    await call.answer()

@router.callback_query(CryptoCenterCallback.filter(F.action == "main"))
async def crypto_center_main_menu_callback(call: types.CallbackQuery, state: FSMContext, deps: Deps):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    await crypto_center_entry(call, state, deps)

# --- –°–ï–ö–¶–ò–Ø AIRDROP ALPHA ---

@router.callback_query(CryptoCenterCallback.filter(F.action == "airdrops_list"))
async def show_airdrop_list(call: types.CallbackQuery, callback_data: CryptoCenterCallback, state: FSMContext, deps: Deps):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Airdrop-–ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    page = callback_data.page
    await state.set_state(CryptoCenterStates.viewing_airdrops_list)
    await call.message.edit_text("‚è≥ –ò—â—É —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ Airdrop'—ã...")

    projects = await deps.crypto_center_service.get_airdrop_alpha(call.from_user.id)
    if not projects:
        await call.message.edit_text("üòï –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç AI –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö Airdrop-–ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=get_crypto_center_main_menu_keyboard())
        return

    total_pages = ceil(len(projects) / PAGE_SIZE)
    paginated_projects = projects[page * PAGE_SIZE:(page + 1) * PAGE_SIZE]

    text = "üíé <b>Airdrop Alpha</b>\n\nAI –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö Airdrop'–æ–≤:"
    keyboard = get_airdrop_list_keyboard(paginated_projects, page, total_pages)
    await call.message.edit_text(text, reply_markup=keyboard)
    await call.answer()

@router.callback_query(CryptoCenterCallback.filter(F.action == "airdrop_view"))
async def show_airdrop_details(call: types.CallbackQuery, callback_data: CryptoCenterCallback, state: FSMContext, deps: Deps):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —á–µ–∫-–ª–∏—Å—Ç."""
    project_id = callback_data.project_id
    user_id = call.from_user.id

    await state.set_state(CryptoCenterStates.viewing_airdrop_details)
    await state.update_data(current_airdrop_id=project_id)

    projects = await deps.crypto_center_service.get_airdrop_alpha(user_id)
    project = next((p for p in projects if p.id == project_id), None)

    if not project:
        await call.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–∏–ª—Å—è.", show_alert=True)
        return

    completed_tasks = await deps.crypto_center_service.get_user_progress(user_id, project_id)
    tasks_text = "\n".join(f"‚ñ™Ô∏è {task}" for task in project.tasks)
    text = (
        f"üíé <b>{project.name}</b>\n"
        f"<i>–°—Ç–∞—Ç—É—Å: {project.status}</i>\n\n"
        f"{project.description}\n\n"
        f"<b>–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä–æ–ø–∞:</b>\n{tasks_text}"
    )
    keyboard = get_airdrop_details_keyboard(project, completed_tasks)
    await call.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    await call.answer()

@router.callback_query(CryptoCenterCallback.filter(F.action == "airdrop_task"))
async def toggle_airdrop_task(call: types.CallbackQuery, callback_data: CryptoCenterCallback, state: FSMContext, deps: Deps):
    """–û—Ç–º–µ—á–∞–µ—Ç/—Å–Ω–∏–º–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ —á–µ–∫-–ª–∏—Å—Ç–µ."""
    project_id, task_index = callback_data.project_id, callback_data.task_index
    user_id = call.from_user.id

    await deps.crypto_center_service.toggle_task_status(user_id, project_id, task_index)

    projects = await deps.crypto_center_service.get_airdrop_alpha(user_id)
    project = next((p for p in projects if p.id == project_id), None)
    if project:
        completed_tasks = await deps.crypto_center_service.get_user_progress(user_id, project_id)
        keyboard = get_airdrop_details_keyboard(project, completed_tasks)
        await call.message.edit_reply_markup(reply_markup=keyboard)

    await call.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.")

# --- –°–ï–ö–¶–ò–Ø MINING ALPHA ---

@router.callback_query(CryptoCenterCallback.filter(F.action == "mining_list"))
async def show_mining_alpha(call: types.CallbackQuery, callback_data: CryptoCenterCallback, state: FSMContext, deps: Deps):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤."""
    page = callback_data.page
    await state.set_state(CryptoCenterStates.viewing_mining_signals)
    await call.message.edit_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–ª–æ–∫—á–µ–π–Ω –≤ –ø–æ–∏—Å–∫–∞—Ö –º–∞–π–Ω–∏–Ω–≥-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")

    signals = await deps.crypto_center_service.get_mining_alpha(call.from_user.id)
    if not signals:
        await call.message.edit_text("üòï AI –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.", reply_markup=get_crypto_center_main_menu_keyboard())
        return

    total_pages = ceil(len(signals) / PAGE_SIZE)
    paginated_signals = signals[page * PAGE_SIZE:(page + 1) * PAGE_SIZE]

    signals_text = []
    for signal in paginated_signals:
        guide_link = f" ({hlink(signal.get('guide_url', ''), '–≥–∞–π–¥')})" if signal.get('guide_url') else ""
        signals_text.append(
            f"üîπ <b>{signal.get('name', 'N/A')} ({signal.get('algorithm', 'N/A')})</b>{guide_link}\n"
            f"   <i>{signal.get('description', '')}</i>"
        )

    text = "‚öôÔ∏è <b>Mining Alpha</b>\n\nAI –æ–±–Ω–∞—Ä—É–∂–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n" + "\n\n".join(signals_text)
    keyboard = get_mining_alpha_keyboard(paginated_signals, page, total_pages)
    await call.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    await call.answer()


# --- –°–ï–ö–¶–ò–Ø LIVE –õ–ï–ù–¢–ê ---

@router.callback_query(CryptoCenterCallback.filter(F.action == "news_list"))
async def show_live_feed(call: types.CallbackQuery, callback_data: CryptoCenterCallback, state: FSMContext, deps: Deps):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç live-–ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π —Å AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π."""
    page = callback_data.page
    await state.set_state(CryptoCenterStates.viewing_feed)
    await call.message.edit_text("‚è≥ –°–æ–±–∏—Ä–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

    articles = await deps.crypto_center_service.get_live_feed_with_summary()
    if not articles:
        await call.message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ª–µ–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_crypto_center_main_menu_keyboard())
        return

    total_pages = ceil(len(articles) / PAGE_SIZE)
    paginated_articles = articles[page * PAGE_SIZE:(page + 1) * PAGE_SIZE]

    articles_text = []
    for article in paginated_articles:
        summary = f"\n   <b>AI-—Å—É—Ç—å:</b> <i>{article.ai_summary}</i>" if article.ai_summary else ""
        articles_text.append(f"‚ñ™Ô∏è {hlink(article.title, article.url)} ({article.source}){summary}")

    text = "üì∞ <b>Live –õ–µ–Ω—Ç–∞</b>\n\n–°–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫—Ä–∞—Ç–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç AI:\n\n" + "\n\n".join(articles_text)
    keyboard = get_news_feed_keyboard(paginated_articles, page, total_pages)
    await call.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    await call.answer()