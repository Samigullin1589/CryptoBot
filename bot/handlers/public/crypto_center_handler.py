# ===============================================================
# –§–∞–π–ª: bot/handlers/public/crypto_center_handler.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FSM, —Å–µ—Ä–≤–∏—Å—ã –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏
# —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é.
# ===============================================================
import logging
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from bot.services.crypto_center_service import CryptoCenterService
from bot.services.admin_service import AdminService
from bot.states.crypto_center_states import CryptoCenterStates
from bot.keyboards.crypto_center_keyboards import *
from bot.utils.formatters import *
from bot.texts.public_texts import CRYPTO_CENTER_TEXTS

router = Router()
logger = logging.getLogger(__name__)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---

@router.callback_query(F.data == "menu_crypto_center")
async def crypto_center_entry(call: CallbackQuery, state: FSMContext, admin_service: AdminService):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä."""
    await admin_service.track_command_usage("üíé –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä")
    await state.set_state(CryptoCenterStates.main_menu)
    await call.message.edit_text(
        CRYPTO_CENTER_TEXTS['main_menu'],
        reply_markup=get_crypto_center_main_menu_keyboard()
    )
    await call.answer()

@router.callback_query(F.data.startswith("cc_nav:"))
async def crypto_center_navigation(call: CallbackQuery, state: FSMContext, crypto_center_service: CryptoCenterService):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    await call.answer()
    nav_path = call.data.split(":")[1:]
    action = nav_path[0]
    
    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if action == "main_menu":
        await state.set_state(CryptoCenterStates.main_menu)
        await call.message.edit_text(
            CRYPTO_CENTER_TEXTS['main_menu'],
            reply_markup=get_crypto_center_main_menu_keyboard()
        )
        
    # --- –ú–µ–Ω—é –≥–∞–π–¥–æ–≤ ---
    elif action == "guides_menu":
        await state.set_state(CryptoCenterStates.viewing_guides_menu)
        await call.message.edit_text(
            CRYPTO_CENTER_TEXTS['guides_menu'],
            reply_markup=get_crypto_center_guides_menu_keyboard()
        )
        
    # --- –õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ---
    elif action == "feed":
        await state.set_state(CryptoCenterStates.viewing_feed)
        await call.message.edit_text("‚è≥ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        feed_items = await crypto_center_service.fetch_live_feed_with_summary()
        text = format_crypto_feed(feed_items)
        await call.message.edit_text(text, reply_markup=get_live_feed_keyboard(), disable_web_page_preview=True)
        
    # --- –°–ø–∏—Å–æ–∫ Airdrop'–æ–≤ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π) ---
    elif action == "airdrops_list":
        page = int(nav_path[1]) if len(nav_path) > 1 else 1
        await state.set_state(CryptoCenterStates.viewing_airdrops_list)
        await call.message.edit_text("‚è≥ AI –∏—â–µ—Ç Airdrop-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
        
        airdrops, total_pages = await crypto_center_service.get_airdrops_paginated(call.from_user.id, page)
        
        if not airdrops:
            await call.message.edit_text(
                "üòï AI –Ω–µ –Ω–∞—à–µ–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö Airdrop-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
                reply_markup=get_back_to_cc_menu_keyboard('guides_menu')
            )
            return
            
        await call.message.edit_text(
            CRYPTO_CENTER_TEXTS['airdrops_list'],
            reply_markup=get_airdrops_list_keyboard(airdrops, page, total_pages)
        )
        
    # --- –ú–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª—ã ---
    elif action == "mining_signals":
        await state.set_state(CryptoCenterStates.viewing_mining_signals)
        await call.message.edit_text("‚è≥ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª—ã...")
        signals = await crypto_center_service.generate_mining_alpha()
        text = format_mining_signals(signals)
        await call.message.edit_text(text, reply_markup=get_back_to_cc_menu_keyboard('guides_menu'), disable_web_page_preview=True)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

@router.callback_query(F.data.startswith("cc_action:"))
async def crypto_center_actions(call: CallbackQuery, state: FSMContext, crypto_center_service: CryptoCenterService):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É)."""
    action_path = call.data.split(":")[1:]
    action = action_path[0]
    
    # --- –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π Airdrop'–∞ ---
    if action == "show_airdrop":
        airdrop_id = action_path[1]
        await state.update_data(current_airdrop_id=airdrop_id)
        await state.set_state(CryptoCenterStates.viewing_airdrop_details)
        
        airdrop = await crypto_center_service.get_airdrop_by_id(airdrop_id)
        if not airdrop:
            await call.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.", show_alert=True)
            return
            
        user_progress = await crypto_center_service.get_user_progress(call.from_user.id, airdrop_id)
        text = format_airdrop_details(airdrop)
        keyboard = get_airdrop_details_keyboard(airdrop, user_progress)
        await call.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)

    # --- –û—Ç–º–µ—Ç–∏—Ç—å/—Å–Ω—è—Ç—å –∑–∞–¥–∞—á—É –≤ —á–µ–∫–ª–∏—Å—Ç–µ ---
    elif action == "toggle_task":
        try:
            airdrop_id, task_index_str = action_path[1], action_path[2]
            task_index = int(task_index_str)
        except (IndexError, ValueError):
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
            
        await crypto_center_service.toggle_task_status(call.from_user.id, airdrop_id, task_index)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        airdrop = await crypto_center_service.get_airdrop_by_id(airdrop_id)
        user_progress = await crypto_center_service.get_user_progress(call.from_user.id, airdrop_id)
        new_keyboard = get_airdrop_details_keyboard(airdrop, user_progress)
        
        try:
            await call.message.edit_reply_markup(reply_markup=new_keyboard)
            await call.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        except TelegramBadRequest as e:
            logger.warning(f"Could not edit reply markup for toggle_task: {e}")
            await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏.")
