# src/bot/handlers/public/asic_handler.py
import logging
from datetime import datetime, timezone
from typing import Union

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.utils.dependencies import Deps
from bot.states.asic_states import AsicExplorerStates
from bot.keyboards.callback_factories import MenuCallback, AsicCallback
from bot.keyboards.asic_keyboards import get_top_asics_keyboard, get_asic_passport_keyboard
from bot.utils.formatters import format_asic_passport
from bot.utils.ui_helpers import edit_or_send_message

logger = logging.getLogger(__name__)
router = Router(name="asic_handler")


async def show_top_asics_page(update: Union[Message, CallbackQuery], state: FSMContext, deps: Deps):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–ø–æ–º ASIC-–º–∞–π–Ω–µ—Ä–æ–≤."""
    await edit_or_send_message(update, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ ASIC...")

    await state.set_state(AsicExplorerStates.showing_top)

    fsm_data = await state.get_data()
    page = fsm_data.get("page", 1)

    user_profile, _ = await deps.user_service.get_or_create_user(update.from_user)
    electricity_cost = user_profile.electricity_cost

    try:
        top_miners, last_update_time = await deps.asic_service.get_top_asics(electricity_cost)
    except Exception as e:
        logger.exception(f"Error getting top ASICs: {e}")
        error_text = "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await edit_or_send_message(update, error_text)
        return

    if not top_miners:
        error_text = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await edit_or_send_message(update, error_text)
        return

    minutes_ago_str = "N/A"
    if last_update_time:
        minutes_ago = int((datetime.now(timezone.utc) - last_update_time).total_seconds() / 60)
        minutes_ago_str = str(minutes_ago)

    text = (f"üèÜ <b>–¢–æ–ø –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC</b>\n"
            f"<i>–í–∞—à–∞ —Ü–µ–Ω–∞ —ç/—ç: ${electricity_cost:.4f}/–∫–í—Ç¬∑—á. –û–±–Ω–æ–≤–ª–µ–Ω–æ {minutes_ago_str} –º–∏–Ω. –Ω–∞–∑–∞–¥.</i>")

    keyboard = get_top_asics_keyboard(top_miners, page)
    await edit_or_send_message(update, text, keyboard)


@router.callback_query(MenuCallback.filter(F.action == "asics"))
async def top_asics_start(call: CallbackQuery, state: FSMContext, deps: Deps):
    """–í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø–∞ ASIC –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await call.answer()
    await state.set_state(AsicExplorerStates.showing_top)
    await state.update_data(page=1)
    await show_top_asics_page(call, state, deps)


@router.callback_query(AsicCallback.filter(F.action == "page"), AsicExplorerStates.showing_top)
async def top_asics_paginator(call: CallbackQuery, state: FSMContext, deps: Deps, callback_data: AsicCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É ASIC."""
    await call.answer()
    page = callback_data.page if callback_data.page is not None else 1
    await state.update_data(page=page)
    await show_top_asics_page(call, state, deps)


@router.callback_query(AsicCallback.filter(F.action == "passport"), AsicExplorerStates.showing_top)
async def asic_passport_handler(call: CallbackQuery, state: FSMContext, deps: Deps, callback_data: AsicCallback):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç ASIC-–º–∞–π–Ω–µ—Ä–∞."""
    await call.answer()
    normalized_name = callback_data.asic_id

    if not normalized_name:
        logger.warning("–ü–æ–ª—É—á–µ–Ω passport callback –±–µ–∑ asic_id.")
        return

    fsm_data = await state.get_data()
    page = fsm_data.get("page", 1)

    user_profile, _ = await deps.user_service.get_or_create_user(call.from_user)
    
    try:
        asic = await deps.asic_service.find_asic_by_normalized_name(normalized_name, user_profile.electricity_cost)
    except Exception as e:
        logger.exception(f"Error finding ASIC by name {normalized_name}: {e}")
        await call.answer("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    if not asic:
        await call.answer("üòï –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.", show_alert=True)
        return

    await state.set_state(AsicExplorerStates.showing_passport)
    text = format_asic_passport(asic, user_profile.electricity_cost)
    
    try:
        await call.message.edit_text(text, reply_markup=get_asic_passport_keyboard(page))
    except Exception as e:
        logger.exception(f"Error editing message with ASIC passport: {e}")
        await call.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç –º–∞–π–Ω–µ—Ä–∞.", show_alert=True)


@router.callback_query(AsicCallback.filter(F.action == "set_cost"), AsicExplorerStates.showing_top)
async def prompt_for_electricity_cost(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏."""
    await state.set_state(AsicExplorerStates.prompt_electricity_cost)
    await call.answer()
    
    try:
        await call.message.edit_text(
            "üí° <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 –∫–í—Ç¬∑—á –≤ USD.</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>0.05</code> (—ç—Ç–æ 5 —Ü–µ–Ω—Ç–æ–≤). "
            "–≠—Ç–∞ —Ü–µ–Ω–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –≤—Å–µ—Ö –±—É–¥—É—â–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤.",
            reply_markup=None
        )
    except Exception as e:
        logger.exception(f"Error prompting for electricity cost: {e}")


@router.message(AsicExplorerStates.prompt_electricity_cost)
async def process_electricity_cost(message: Message, state: FSMContext, deps: Deps):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫."""
    try:
        cost_str = message.text.replace(',', '.').strip()
        cost = float(cost_str)
        if not (0 <= cost < 1):
            raise ValueError("Cost must be a positive number less than 1.")
    except (ValueError, TypeError):
        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>0.05</code>")
        return

    try:
        user = await deps.user_service.get_user(message.from_user.id)
        if user:
            user.electricity_cost = cost
            await deps.user_service.save_user(user)

        await message.answer(f"‚úÖ –í–∞—à–∞ —Ü–µ–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ <b>${cost:.4f}/–∫–í—Ç¬∑—á</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é —Ç–æ–ø...")
        await show_top_asics_page(message, state, deps)
    except Exception as e:
        logger.exception(f"Error processing electricity cost: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")