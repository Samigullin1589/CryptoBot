# ===============================================================
# –§–∞–π–ª: bot/handlers/public/asic_handler.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å ASIC-–º–∞–π–Ω–µ—Ä–∞–º–∏,
# –≤–∫–ª—é—á–∞—è —Ç–æ–ø, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –ø–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
# ===============================================================
import logging
from datetime import datetime, timezone
from typing import Union

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.services.asic_service import AsicService
from bot.services.user_service import UserService
from bot.states.asic_states import AsicExplorerStates
from bot.keyboards.asic_keyboards import get_top_asics_keyboard, get_asic_passport_keyboard
from bot.utils.models import AsicMiner

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π ---
# from bot.utils.formatters import format_asic_passport

logger = logging.getLogger(__name__)
router = Router(name="asic_handler")

# --- –õ–û–ö–ê–õ–¨–ù–ê–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

def format_asic_passport(asic: AsicMiner, electricity_cost: float) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è ASIC —Å —Ä–∞—Å—á–µ—Ç–æ–º —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞.
    """
    power = asic.power or 0
    net_profit = asic.profitability

    # –°—á–∏—Ç–∞–µ–º "–≥—Ä—è–∑–Ω—É—é" –ø—Ä–∏–±—ã–ª—å, –ø—Ä–∏–±–∞–≤–ª—è—è –æ–±—Ä–∞—Ç–Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
    power_kwh_per_day = (power / 1000) * 24
    daily_cost = power_kwh_per_day * electricity_cost
    gross_profit_from_net = net_profit + daily_cost

    specs_map = {
        "algorithm": "–ê–ª–≥–æ—Ä–∏—Ç–º", "hashrate": "–•–µ—à—Ä–µ–π—Ç",
        "power": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "efficiency": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    
    specs_list = []
    for key, rus_name in specs_map.items():
        value = getattr(asic, key, None)
        if value and value != "N/A":
            unit = " –í—Ç" if key == "power" else ""
            specs_list.append(f" ‚ñ´Ô∏è <b>{rus_name}:</b> {value}{unit}")

    specs_text = "\n".join(specs_list)

    profit_text = (
        f" ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–º–∏):</b> ${gross_profit_from_net:.2f}/–¥–µ–Ω—å\n"
        f" ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (—á–∏—Å—Ç—ã–º–∏):</b> ${net_profit:.2f}/–¥–µ–Ω—å\n"
        f" ¬† ¬†(–ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á)"
    )

    return (
        f"üìã <b>–ü–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {asic.name}</b>\n\n"
        f"<b><u>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</u></b>\n{profit_text}\n\n"
        f"<b><u>–¢–µ—Ö. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u></b>\n{specs_text}\n"
    )

# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def show_top_asics_page(
    call: CallbackQuery,
    state: FSMContext,
    asic_service: AsicService,
    user_service: UserService
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–ø–æ–º ASIC-–º–∞–π–Ω–µ—Ä–æ–≤."""
    user_id = call.from_user.id
    current_state = await state.get_data()
    page = current_state.get("page", 1)
    sort_by = current_state.get("sort_by", "profitability")

    electricity_cost = await user_service.get_user_electricity_cost(user_id)
    
    top_miners, last_update_time = await asic_service.get_top_asics(
        sort_by=sort_by,
        electricity_cost=electricity_cost
    )

    if not top_miners:
        await call.message.edit_text(
            "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    now = datetime.now(timezone.utc)
    minutes_ago = int((now - last_update_time).total_seconds() / 60) if last_update_time else 0
    
    await call.message.edit_text(
        f"üèÜ <b>–¢–æ–ø –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC</b> (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_by})\n"
        f"<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã {minutes_ago} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.</i>",
        reply_markup=get_top_asics_keyboard(top_miners, page, sort_by)
    )

@router.callback_query(F.data.startswith("top_asics:"))
async def top_asics_navigator(
    call: CallbackQuery,
    state: FSMContext,
    asic_service: AsicService,
    user_service: UserService
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ–Ω—é —Ç–æ–ø–∞ ASIC."""
    await call.answer()
    action, value1, value2 = call.data.split(":")[1:]
    
    if action == "page":
        await state.update_data(page=int(value1), sort_by=value2)
    elif action == "sort":
        await state.update_data(page=1, sort_by=value1)

    await state.set_state(AsicExplorerStates.showing_top)
    await show_top_asics_page(call, state, asic_service, user_service)

@router.callback_query(F.data.startswith("asic_passport:"))
async def asic_passport_handler(
    call: CallbackQuery,
    state: FSMContext,
    asic_service: AsicService,
    user_service: UserService
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç ASIC-–º–∞–π–Ω–µ—Ä–∞."""
    await call.answer()
    asic_name = call.data.split(":", 1)[1]
    
    asic = await asic_service.find_asic_by_name(asic_name)
    if not asic:
        await call.answer("üòï –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.", show_alert=True)
        return
        
    electricity_cost = await user_service.get_user_electricity_cost(call.from_user.id)
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º '—á–∏—Å—Ç—É—é' –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞
    asic.profitability = AsicService.calculate_net_profit(
        asic.profitability, asic.power or 0, electricity_cost
    )

    text = format_asic_passport(asic, electricity_cost)
    await call.message.edit_text(
        text,
        reply_markup=get_asic_passport_keyboard(page=1, sort_by="profitability")
    )
