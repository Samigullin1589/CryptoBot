# ===============================================================
# –§–∞–π–ª: bot/handlers/public/asic_handler.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å ASIC.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FSM, —Å–µ—Ä–≤–∏—Å—ã –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏
# —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.
# ===============================================================
import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from bot.config.settings import settings
from bot.services.admin_service import AdminService
from bot.services.asic_service import AsicService
from bot.services.user_service import UserService
from bot.keyboards.asic_keyboards import get_top_asics_keyboard, get_electricity_tariff_keyboard
from bot.states.asic_states import AsicExplorerStates
from bot.utils.formatters import format_asic_passport

router = Router()
logger = logging.getLogger(__name__)

# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /top_asics –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---

async def show_top_asics_page(
    message: Message,
    asic_service: AsicService,
    user_service: UserService,
    state: FSMContext,
    page: int = 1,
    sort_by: str = "profitability"
):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–æ–ø–æ–º ASIC."""
    await state.set_state(AsicExplorerStates.viewing_top_list)
    
    electricity_cost = await user_service.get_user_electricity_cost(message.from_user.id)
    
    top_miners, total_pages, last_update_time = await asic_service.get_top_asics_paginated(
        page=page,
        page_size=7, # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        sort_by=sort_by,
        electricity_cost=electricity_cost
    )

    if not top_miners:
        await message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    sort_text = "—á–∏—Å—Ç–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏" if sort_by == "profitability" else "—ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    response_lines = [f"üèÜ <b>–¢–æ–ø ASIC –ø–æ {sort_text}</b> (–ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á)\n"]
    
    for i, miner in enumerate(top_miners, (page - 1) * 7 + 1):
        profit_or_eff = f"${miner.profitability:.2f}/–¥" if sort_by == "profitability" else f"{miner.efficiency} J/TH"
        line = f"{i}. <b>{miner.name}</b>\n   <code>{profit_or_eff} | {miner.algorithm}</code>"
        response_lines.append(line)
    
    if last_update_time:
        minutes_ago = int((datetime.now(timezone.utc) - last_update_time).total_seconds() / 60)
        response_lines.append(f"\n<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã {minutes_ago} –º–∏–Ω. –Ω–∞–∑–∞–¥.</i>")

    await message.edit_text(
        "\n".join(response_lines),
        reply_markup=get_top_asics_keyboard(page, total_pages, sort_by),
        disable_web_page_preview=True
    )

@router.message(Command("top_asics"))
async def top_asics_command_handler(
    message: Message, asic_service: AsicService, user_service: UserService, admin_service: AdminService, state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /top_asics."""
    await admin_service.track_command_usage("/top_asics")
    msg = await message.answer("üîç –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    await show_top_asics_page(msg, asic_service, user_service, state)

@router.callback_query(F.data.startswith("top_asics:page:"))
async def top_asics_callback_handler(
    call: CallbackQuery, asic_service: AsicService, user_service: UserService, state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    await call.answer()
    _, _, page_str, sort_by = call.data.split(":")
    await show_top_asics_page(call.message, asic_service, user_service, state, int(page_str), sort_by)

# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /asic [–º–æ–¥–µ–ª—å] ---

@router.message(Command("asic"))
async def asic_passport_handler(
    message: Message, asic_service: AsicService, user_service: UserService, admin_service: AdminService, state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /asic [–º–æ–¥–µ–ª—å] –∏ –≤—ã–¥–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    await admin_service.track_command_usage("/asic")
    await state.set_state(AsicExplorerStates.viewing_passport)
    
    try:
        model_query = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å ASIC. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/asic s19k pro</code>")
        return

    found_asic_dict = await asic_service.find_asic_by_query(model_query)
        
    if found_asic_dict:
        electricity_cost = await user_service.get_user_electricity_cost(message.from_user.id)
        response_text = format_asic_passport(found_asic_dict, electricity_cost)
        await message.answer(response_text, disable_web_page_preview=True)
    else:
        await message.answer(f"üòï –ú–æ–¥–µ–ª—å, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ '<code>{model_query}</code>', –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é ---

@router.message(Command("set_cost"))
async def set_electricity_cost_handler(message: Message, state: FSMContext, admin_service: AdminService):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞."""
    await admin_service.track_command_usage("/set_cost")
    await state.set_state(AsicExplorerStates.setting_cost)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é. –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏.",
        reply_markup=get_electricity_tariff_keyboard(settings.game.ELECTRICITY_TARIFFS)
    )

@router.callback_query(F.data.startswith("set_tariff:"), AsicExplorerStates.setting_cost)
async def process_tariff_selection(callback: CallbackQuery, user_service: UserService, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    await state.clear()
    try:
        tariff_name = callback.data.split(":")[1]
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return

    tariff_info = settings.game.ELECTRICITY_TARIFFS.get(tariff_name)
    if not tariff_info:
        await callback.answer("–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    cost = tariff_info["cost_per_hour"]
    await user_service.set_user_electricity_cost(callback.from_user.id, cost)
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à —Ç–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '<b>{tariff_name}</b>'.\n"
        f"–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤: <b>${cost:.4f}/–∫–í—Ç¬∑—á</b>."
    )
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
