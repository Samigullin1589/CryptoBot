# =================================================================================
# –§–∞–π–ª: bot/handlers/public/asic_handler.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –§–ò–ù–ê–õ–¨–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ASIC.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π `await call.answer()` –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
#              –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è "–≤–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏" –∫–Ω–æ–ø–∫–∏.
#              –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
# =================================================================================
import logging
from datetime import datetime, timezone
from typing import Union

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.utils.dependencies import Deps
from bot.states.asic_states import AsicExplorerStates
from bot.keyboards.callback_factories import MenuCallback
from bot.keyboards.asic_keyboards import get_top_asics_keyboard, get_asic_passport_keyboard
from bot.utils.formatters import format_asic_passport
from bot.utils.ui_helpers import edit_or_send_message

logger = logging.getLogger(__name__)
router = Router(name="asic_handler")

# --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–ü–ò–°–ö–ê ---

async def show_top_asics_page(update: Union[Message, CallbackQuery], state: FSMContext, deps: Deps):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–ø–æ–º ASIC-–º–∞–π–Ω–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è FSM –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    # –°—Ä–∞–∑—É —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –æ—Ç–∫–ª–∏–∫
    await edit_or_send_message(update, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ ASIC...")

    await state.set_state(AsicExplorerStates.showing_top)

    fsm_data = await state.get_data()
    page = fsm_data.get("page", 1)

    user_profile, _ = await deps.user_service.get_or_create_user(update.from_user)
    electricity_cost = user_profile.electricity_cost

    top_miners, last_update_time = await deps.asic_service.get_top_asics(electricity_cost)

    if not top_miners:
        error_text = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await edit_or_send_message(update, error_text)
        return

    minutes_ago_str = "N/A"
    if last_update_time:
        minutes_ago = int((datetime.now(timezone.utc) - last_update_time).total_seconds() / 60)
        minutes_ago_str = str(minutes_ago)

    text = (f"üèÜ <b>–¢–æ–ø –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC</b>\n"
            f"<i>–í–∞—à–∞ —Ü–µ–Ω–∞ —ç/—ç: ${electricity_cost:.4f}/–∫–í—Ç¬∑—á. –û–±–Ω–æ–≤–ª–µ–Ω–æ {minutes_ago_str} –º–∏–Ω. –Ω–∞–∑–∞–¥.</i>")

    keyboard = get_top_asics_keyboard(top_miners, page)
    await edit_or_send_message(update, text, reply_markup=keyboard)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

@router.callback_query(MenuCallback.filter(F.action == "asics"))
async def top_asics_start(call: CallbackQuery, state: FSMContext, deps: Deps):
    """–í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø–∞ ASIC –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await call.answer()
    await state.set_state(AsicExplorerStates.showing_top)
    await state.update_data(page=1)
    await show_top_asics_page(call, state, deps)


@router.callback_query(
    F.data.startswith("asic_page:"),
    AsicExplorerStates.showing_top,
    AsicExplorerStates.showing_passport
)
async def top_asics_paginator(call: CallbackQuery, state: FSMContext, deps: Deps):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É ASIC.
    """
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω await call.answer() –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ.
    # –≠—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ, —Ä–µ—à–∞—è –ø—Ä–æ–±–ª–µ–º—É "–≤–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏".
    await call.answer()
    
    page = int(call.data.split(":")[1])
    await state.update_data(page=page)
    await show_top_asics_page(call, state, deps)


@router.callback_query(F.data.startswith("asic_passport:"), AsicExplorerStates.showing_top)
async def asic_passport_handler(call: CallbackQuery, state: FSMContext, deps: Deps):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç ASIC-–º–∞–π–Ω–µ—Ä–∞."""
    await call.answer()
    normalized_name = call.data.split(":", 1)[1]

    fsm_data = await state.get_data()
    page = fsm_data.get("page", 1)

    user_profile, _ = await deps.user_service.get_or_create_user(call.from_user)
    asic = await deps.asic_service.find_asic_by_normalized_name(normalized_name, user_profile.electricity_cost)

    if not asic:
        await call.answer("üòï –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.", show_alert=True)
        return

    await state.set_state(AsicExplorerStates.showing_passport)
    text = format_asic_passport(asic, user_profile.electricity_cost)
    await call.message.edit_text(text, reply_markup=get_asic_passport_keyboard(page))


@router.callback_query(F.data == "asic_action:set_cost", AsicExplorerStates.showing_top)
async def prompt_for_electricity_cost(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏."""
    await state.set_state(AsicExplorerStates.prompt_electricity_cost)
    await call.answer()
    await call.message.edit_text(
        "üí° <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 –∫–í—Ç¬∑—á –≤ USD.</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>0.05</code> (—ç—Ç–æ 5 —Ü–µ–Ω—Ç–æ–≤). "
        "–≠—Ç–∞ —Ü–µ–Ω–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –≤—Å–µ—Ö –±—É–¥—É—â–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤.",
        reply_markup=None
    )


@router.message(AsicExplorerStates.prompt_electricity_cost)
async def process_electricity_cost(message: Message, state: FSMContext, deps: Deps):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫."""
    try:
        cost_str = message.text.replace(',', '.').strip()
        cost = float(cost_str)
        if not (0 <= cost < 1):
            raise ValueError("Cost must be a positive number less than 1.")
    except (ValueError, TypeError):
        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>0.05</code>")
        return

    await deps.user_service.set_user_electricity_cost(message.from_user.id, cost)
    await message.answer(f"‚úÖ –í–∞—à–∞ —Ü–µ–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ <b>${cost:.4f}/–∫–í—Ç¬∑—á</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é —Ç–æ–ø...")

    await show_top_asics_page(message, state, deps)