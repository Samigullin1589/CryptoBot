# src/bot/handlers/public/news_handler.py
from __future__ import annotations

from typing import List, Dict, Any

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from loguru import logger

from bot.keyboards.callback_factories import NewsCallback

router = Router(name="news_public")

PAGE_SIZE = 5


def get_news_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º"""
    buttons = []
    
    if page > 0:
        buttons.append([
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=NewsCallback(action="page", source_key=str(page - 1)).pack()
            ),
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=NewsCallback(action="page", source_key=str(page + 1)).pack()
            )
        ])
    else:
        buttons.append([
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=NewsCallback(action="page", source_key=str(page + 1)).pack()
            )
        ])
    
    buttons.append([
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=NewsCallback(action="refresh", source_key=None).pack()
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def render_news(articles: List[Any], page: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not articles:
        return "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b>\n\n–ü–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."
    
    start = page * PAGE_SIZE
    chunk = articles[start:start + PAGE_SIZE]
    
    if not chunk:
        return "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b>\n\n–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."
    
    lines = [f"üì∞ <b>–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}</b>\n"]
    
    for article in chunk:
        if hasattr(article, 'title'):
            title = article.title
            url = article.url
            source = article.source
        else:
            title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            url = article.get('url', '')
            source = article.get('source', '')
        
        if url and title:
            lines.append(f"‚Ä¢ <a href=\"{url}\">{title}</a> <i>({source})</i>")
        elif title:
            lines.append(f"‚Ä¢ {title}")
    
    lines.append(f"\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ {len(chunk)} –∏–∑ {len(articles)}</i>")
    
    return "\n".join(lines)


async def get_news_articles(deps) -> List[Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ news_service"""
    try:
        news_service = deps.news_service()
        articles = await news_service.get_all_latest_news(limit=50)
        return articles if articles else []
    except Exception as e:
        logger.error(f"Error getting news: {e}")
    return []


@router.message(Command("news"))
async def cmd_news(message: Message, deps) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news"""
    articles = await get_news_articles(deps)
    text = render_news(articles, 0)
    await message.answer(
        text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=get_news_keyboard(0)
    )


@router.callback_query(NewsCallback.filter(F.action == "sources"))
async def news_menu_handler(call: CallbackQuery, deps) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await call.answer()
    
    articles = await get_news_articles(deps)
    text = render_news(articles, 0)
    
    try:
        await call.message.edit_text(
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=get_news_keyboard(0)
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logger.error(f"Error editing message: {e}")


@router.callback_query(NewsCallback.filter(F.action == "page"))
async def news_page_handler(call: CallbackQuery, deps, callback_data: NewsCallback) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    await call.answer()
    
    try:
        page = int(callback_data.source_key) if callback_data.source_key else 0
    except (ValueError, TypeError):
        page = 0
    
    articles = await get_news_articles(deps)
    text = render_news(articles, page)
    
    try:
        await call.message.edit_text(
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=get_news_keyboard(page)
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logger.error(f"Error editing message: {e}")


@router.callback_query(NewsCallback.filter(F.action == "refresh"))
async def news_refresh_handler(call: CallbackQuery, deps) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏"""
    await call.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    await news_menu_handler(call, deps)