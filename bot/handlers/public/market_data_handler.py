# ===============================================================
# –§–∞–π–ª: bot/handlers/public/market_data_handler.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.
# ===============================================================
import logging
from typing import Union

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.exceptions import TelegramBadRequest

from bot.keyboards.keyboards import get_main_menu_keyboard
from bot.services.market_data_service import MarketDataService
from bot.services.admin_service import AdminService
from bot.utils.helpers import get_message_and_chat_id
from bot.utils.plotting import generate_fng_image

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data.startswith("menu_market_"))
@router.message(F.text.in_({"üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üì° –°—Ç–∞—Ç—É—Å BTC"}))
async def handle_market_data_request(update: Union[CallbackQuery, Message], market_data_service: MarketDataService, admin_service: AdminService):
    """
    –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    message, _ = await get_message_and_chat_id(update)
    
    if isinstance(update, CallbackQuery):
        action = update.data.removeprefix("menu_market_")
        await update.answer()
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ action
        action_map = {
            "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞": "fear_greed",
            "‚è≥ –•–∞–ª–≤–∏–Ω–≥": "halving",
            "üì° –°—Ç–∞—Ç—É—Å BTC": "btc_status"
        }
        action = action_map.get(update.text)

    await admin_service.track_command_usage(f"–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {action}")
    
    # --- –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏ ---
    if action == "fear_greed":
        temp_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω–¥–µ–∫—Å –∏ —Ä–∏—Å—É—é –≥—Ä–∞—Ñ–∏–∫...")
        index = await market_data_service.get_fear_and_greed_index()
        if not index:
            await temp_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å.", reply_markup=get_main_menu_keyboard())
            return
        
        value = int(index.get('value', 50))
        classification = index.get('value_classification', 'Neutral')
        image_bytes = await message.loop.run_in_executor(None, generate_fng_image, value, classification)
        
        await temp_message.delete()
        await message.answer_photo(
            BufferedInputFile(image_bytes, "fng.png"),
            caption=f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>",
            reply_markup=get_main_menu_keyboard()
        )

    # --- –•–∞–ª–≤–∏–Ω–≥ –∏ –°—Ç–∞—Ç—É—Å BTC (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã) ---
    else:
        temp_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...")
        if action == "halving":
            text = await market_data_service.get_halving_info()
        elif action == "btc_status":
            text = await market_data_service.get_btc_network_status()
        else:
            text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
            
        await temp_message.edit_text(text, reply_markup=get_main_menu_keyboard())
