# =================================================================================
# –§–∞–π–ª: bot/handlers/public/market_handler.py (–í–ï–†–°–ò–Ø "–ì–ï–ù–ò–ô 2.0" - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä—ã–Ω–∫–æ–º.
# =================================================================================

import logging
from math import ceil
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.services.market_service import AsicMarketService
from bot.services.mining_game_service import MiningGameService
from bot.keyboards.market_keyboards import (
    get_market_listings_keyboard, 
    get_choose_asic_to_sell_keyboard,
    MARKET_CALLBACK_PREFIX
)
from bot.states.market_states import MarketStates
from bot.utils.models import AsicMiner

logger = logging.getLogger(__name__)
router = Router()
PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /market –∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---

@router.message(Command("market"))
@router.callback_query(F.data.startswith(f"{MARKET_CALLBACK_PREFIX}:page:"))
async def market_start_handler(message: types.Message | types.CallbackQuery, market_service: AsicMarketService, state: FSMContext):
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –Ω–∞ —Ä—ã–Ω–æ–∫
    
    page = 0
    if isinstance(message, types.CallbackQuery):
        page = int(message.data.split(":")[-1])
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.message.edit_text –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        target_message = message.message
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.answer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        target_message = message

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ—Ç—ã. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.
    all_listings = await market_service.get_market_listings(offset=0, count=1000) # –ü–æ–ª—É—á–∞–µ–º –¥–æ 1000 –ª–æ—Ç–æ–≤
    total_pages = ceil(len(all_listings) / PAGE_SIZE)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = page * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    current_page_listings = all_listings[start_index:end_index]

    text = "üõí <b>–†—ã–Ω–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."
    if not current_page_listings:
        text += "\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤."

    keyboard = get_market_listings_keyboard(current_page_listings, page, total_pages)

    if isinstance(message, types.CallbackQuery):
        await target_message.edit_text(text, reply_markup=keyboard)
        await message.answer()
    else:
        await target_message.answer(text, reply_markup=keyboard)

# --- –°—Ü–µ–Ω–∞—Ä–∏–π –ü—Ä–æ–¥–∞–∂–∏ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (FSM) ---

@router.callback_query(F.data == f"{MARKET_CALLBACK_PREFIX}:sell_start")
async def sell_start_handler(callback: types.CallbackQuery, state: FSMContext, mining_game_service: MiningGameService):
    user_id = callback.from_user.id
    hangar_key = mining_game_service.keys.user_hangar(user_id)
    user_asics_json = await mining_game_service.redis.hvals(hangar_key)
    user_asics = [AsicMiner.model_validate_json(asic_json) for asic_json in user_asics_json]

    if not user_asics:
        await callback.answer("‚ùå –í –≤–∞—à–µ–º –∞–Ω–≥–∞—Ä–µ –Ω–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.", show_alert=True)
        return

    await state.set_state(MarketStates.choosing_asic_to_sell)
    keyboard = get_choose_asic_to_sell_keyboard(user_asics)
    await callback.message.edit_text("üëá –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(MarketStates.choosing_asic_to_sell, F.data.startswith(f"{MARKET_CALLBACK_PREFIX}:sell_select:"))
async def sell_select_asic_handler(callback: types.CallbackQuery, state: FSMContext):
    asic_id = callback.data.split(":")[-1]
    await state.update_data(asic_id_to_sell=asic_id)
    await state.set_state(MarketStates.entering_price)
    
    await callback.message.edit_text("üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –≤ –º–æ–Ω–µ—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50).")
    await callback.answer()

@router.message(MarketStates.entering_price)
async def sell_enter_price_handler(message: types.Message, state: FSMContext, market_service: AsicMarketService):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.5).")
        return

    data = await state.get_data()
    asic_id = data.get("asic_id_to_sell")
    
    listing_id = await market_service.list_asic_for_sale(message.from_user.id, asic_id, price)
    
    if listing_id:
        await message.answer(f"‚úÖ –í–∞—à–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ü–µ–Ω–µ {price:,.2f} –º–æ–Ω–µ—Ç!")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")

    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ü–æ–∫—É–ø–∫–∏ ---

@router.callback_query(F.data.startswith(f"{MARKET_CALLBACK_PREFIX}:buy:"))
async def buy_item_handler(callback: types.CallbackQuery, market_service: AsicMarketService):
    listing_id = callback.data.split(":")[-1]
    
    # –ó–¥–µ—Å—å –º—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É.
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å —à–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    result_text = await market_service.buy_asic(callback.from_user.id, listing_id)
    
    await callback.answer(result_text, show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º, —á—Ç–æ–±—ã –∫—É–ø–ª–µ–Ω–Ω—ã–π –ª–æ—Ç –∏—Å—á–µ–∑
    await market_start_handler(callback, market_service, FSMContext(storage=callback.bot.fsm_storage, key=callback.bot.fsm_storage.get_key(callback.bot, callback.from_user.id)))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã FSM ---
@router.callback_query(F.data == "cancel_fsm")
async def cancel_fsm_handler(callback: types.CallbackQuery, state: FSMContext, market_service: AsicMarketService):
    await state.clear()
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", show_alert=True)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä—ã–Ω–∫–∞
    await market_start_handler(callback, market_service, state)