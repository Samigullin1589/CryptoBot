# =================================================================================
# –§–∞–π–ª: bot/handlers/public/market_handler.py (–í–ï–†–°–ò–Ø "–ì–ï–ù–ò–ô 2.0" - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä—ã–Ω–∫–æ–º.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ deps: Deps.
# =================================================================================

import logging
from math import ceil
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.keyboards.market_keyboards import (
    get_market_listings_keyboard, 
    get_choose_asic_to_sell_keyboard
)
from bot.keyboards.callback_factories import MarketCallback
from bot.states.market_states import MarketStates
from bot.utils.models import AsicMiner
from bot.utils.dependencies import Deps

logger = logging.getLogger(__name__)
router = Router()
PAGE_SIZE = 5

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /market –∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---

@router.message(Command("market"))
@router.callback_query(MarketCallback.filter(F.action == "page"))
async def market_start_handler(message: types.Message | types.CallbackQuery, deps: Deps, state: FSMContext, callback_data: MarketCallback = None):
    await state.clear()
    
    page = callback_data.page if callback_data else 0
    
    if isinstance(message, types.CallbackQuery):
        target_message = message.message
    else:
        target_message = message

    all_listings = await deps.market_service.get_market_listings(offset=0, count=1000)
    total_pages = ceil(len(all_listings) / PAGE_SIZE)
    
    start_index = page * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    current_page_listings = all_listings[start_index:end_index]

    text = "üõí <b>–†—ã–Ω–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."
    if not current_page_listings:
        text += "\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤."

    keyboard = get_market_listings_keyboard(current_page_listings, page, total_pages)

    if isinstance(message, types.CallbackQuery):
        await target_message.edit_text(text, reply_markup=keyboard)
        await message.answer()
    else:
        await target_message.answer(text, reply_markup=keyboard)

# --- –°—Ü–µ–Ω–∞—Ä–∏–π –ü—Ä–æ–¥–∞–∂–∏ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (FSM) ---

@router.callback_query(MarketCallback.filter(F.action == "sell_start"))
async def sell_start_handler(callback: types.CallbackQuery, state: FSMContext, deps: Deps):
    user_id = callback.from_user.id
    hangar_key = deps.mining_game_service.keys.user_hangar(user_id)
    user_asics_json = await deps.mining_game_service.redis.hvals(hangar_key)
    user_asics = [AsicMiner.model_validate_json(asic_json) for asic_json in user_asics_json]

    if not user_asics:
        await callback.answer("‚ùå –í –≤–∞—à–µ–º –∞–Ω–≥–∞—Ä–µ –Ω–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.", show_alert=True)
        return

    await state.set_state(MarketStates.choosing_asic_to_sell)
    keyboard = get_choose_asic_to_sell_keyboard(user_asics)
    await callback.message.edit_text("üëá –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(MarketStates.choosing_asic_to_sell, MarketCallback.filter(F.action == "sell_select"))
async def sell_select_asic_handler(callback: types.CallbackQuery, state: FSMContext, callback_data: MarketCallback):
    asic_id = callback_data.asic_id
    await state.update_data(asic_id_to_sell=asic_id)
    await state.set_state(MarketStates.entering_price)
    
    await callback.message.edit_text("üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –≤ –º–æ–Ω–µ—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50).")
    await callback.answer()

@router.message(MarketStates.entering_price)
async def sell_enter_price_handler(message: types.Message, state: FSMContext, deps: Deps):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.5).")
        return

    data = await state.get_data()
    asic_id = data.get("asic_id_to_sell")
    
    listing_id = await deps.market_service.list_asic_for_sale(message.from_user.id, asic_id, price)
    
    if listing_id:
        await message.answer(f"‚úÖ –í–∞—à–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ü–µ–Ω–µ {price:,.2f} –º–æ–Ω–µ—Ç!")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")

    await state.clear()
    await market_start_handler(message, deps, state)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ü–æ–∫—É–ø–∫–∏ ---

@router.callback_query(MarketCallback.filter(F.action == "buy"))
async def buy_item_handler(callback: types.CallbackQuery, state: FSMContext, deps: Deps, callback_data: MarketCallback):
    listing_id = callback_data.listing_id
    
    result_text = await deps.market_service.buy_asic(callback.from_user.id, listing_id)
    
    await callback.answer(result_text, show_alert=True)
    
    await market_start_handler(callback, deps, state)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã FSM ---
@router.callback_query(F.data == "cancel_fsm")
async def cancel_fsm_handler(callback: types.CallbackQuery, state: FSMContext, deps: Deps):
    await state.clear()
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", show_alert=True)
    await market_start_handler(callback, deps, state)