# =================================================================================
# –§–∞–π–ª: bot/handlers/public/common_handler.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –§–ò–ù–ê–õ–¨–ù–ê–Ø –£–ú–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
#           —Ä–∞–∑–ª–∏—á–∞—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å—ã –∫ AI.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ handle_text_as_button –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ –Ω–æ–≤—É—é
#              —Å–∏—Å—Ç–µ–º—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±–µ–∑ –µ–¥–∏–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞.
# =================================================================================
import logging
from typing import Union, Dict, Any

from aiogram import F, Router, Bot, types
from aiogram.filters import CommandStart, Command, CommandObject, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, User
from aiogram.enums import ChatType

from bot.keyboards.keyboards import get_main_menu_keyboard
from bot.keyboards.onboarding_keyboards import get_onboarding_start_keyboard, get_onboarding_step_keyboard
from bot.states.common_states import CommonStates
from bot.utils.dependencies import Deps
from bot.utils.formatters import format_price_info
from bot.utils.text_utils import sanitize_html
from bot.texts.public_texts import HELP_TEXT, ONBOARDING_TEXTS, get_referral_success_text

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤—ã–∑–æ–≤
from . import (
    price_handler,
    asic_handler,
    news_handler,
    quiz_handler,
    market_info_handler,
    crypto_center_handler,
    game_handler
)
from ..tools import calculator_handler

from bot.keyboards.callback_factories import MenuCallback

router = Router(name=__name__)
logger = logging.getLogger(__name__)

# --- –°–ª–æ–≤–∞—Ä—å —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–∫–∞–º –º–µ–Ω—é ---
TEXT_COMMAND_MAP: Dict[str, Any] = {
    "üíπ –ö—É—Ä—Å": (price_handler.handle_price_menu_start, "price"),
    "‚öôÔ∏è –¢–æ–ø ASIC": (asic_handler.top_asics_start, "asics"),
    "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": (calculator_handler.start_profit_calculator, "calculator"),
    "üì∞ –ù–æ–≤–æ—Å—Ç–∏": (news_handler.handle_news_menu_start, "news"),
    "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞": (market_info_handler.handle_fear_greed_index, "fear_index"),
    "‚è≥ –•–∞–ª–≤–∏–Ω–≥": (market_info_handler.handle_halving_info, "halving"),
    "üì° –°—Ç–∞—Ç—É—Å BTC": (market_info_handler.handle_btc_status, "btc_status"),
    "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞": (quiz_handler.handle_quiz_start, "quiz"),
    "üíé –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥": (game_handler.handle_game_menu_entry, "game"),
    "üíé –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä": (crypto_center_handler.crypto_center_main_menu, "crypto_center")
}

class AITriggerFilter(BaseFilter):
    async def __call__(self, message: Message, bot: Bot) -> bool:
        # AI –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
        if not message.text or message.text.startswith('/'):
            return False
        
        # AI –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥—É–±–ª–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        if message.text in TEXT_COMMAND_MAP:
            return False

        bot_info = await bot.get_me()
        if message.chat.type == ChatType.PRIVATE:
            return True
        if f"@{bot_info.username}" in message.text:
            return True
        if message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id:
            return True
        return False

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

@router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext, command: CommandObject, deps: Deps):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.
    """
    await state.clear()
    user = message.from_user
    
    profile, is_new_user = await deps.user_service.get_or_create_user(user)

    if is_new_user and command.args:
        try:
            referrer_id = int(command.args)
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}")
            # –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É (–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
        except (ValueError, TypeError):
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π deeplink-–∞—Ä–≥—É–º–µ–Ω—Ç '{command.args}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    if is_new_user:
        text = (f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.full_name}!</b>\n\n"
                "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞. "
                "–î–∞–≤–∞–π—Ç–µ —è –±—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∂—É, —á—Ç–æ —è —É–º–µ—é!")
        await message.answer(text, reply_markup=get_onboarding_start_keyboard())
    else:
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    await state.set_state(CommonStates.main_menu)

@router.message(Command("help"))
async def handle_help(message: Message):
    await message.answer(HELP_TEXT, disable_web_page_preview=True)

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ù–ë–û–†–î–ò–ù–ì–û–ú ---
@router.callback_query(F.data.startswith("onboarding:"))
async def handle_onboarding_navigation(call: CallbackQuery, state: FSMContext):
    await call.answer()
    action = call.data.split(":")[1]

    if action in ["skip", "finish"]:
        text = ("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –≤—Å–µ –æ—Å–Ω–æ–≤—ã!\n\n"
                "–í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ï—Å–ª–∏ –∑–∞–±—É–¥–µ—Ç–µ, —á—Ç–æ —è —É–º–µ—é, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.")
        await call.message.edit_text(text, reply_markup=get_main_menu_keyboard())
        await state.set_state(CommonStates.main_menu)
        return

    try:
        step = int(action.split("_")[1])
        await state.update_data(onboarding_step=step)
        
        text = ONBOARDING_TEXTS.get(step, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥.")
        keyboard = get_onboarding_step_keyboard(step)
        await call.message.edit_text(text, reply_markup=keyboard)
    except (ValueError, IndexError):
        logger.error(f"Invalid onboarding action: {action}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ò–ó–í–û–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê ---

@router.message(F.text.in_(TEXT_COMMAND_MAP.keys()))
async def handle_text_as_button(message: Message, state: FSMContext, deps: Deps):
    """
    –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é, —ç–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ callback-–∫–Ω–æ–ø–∫—É.
    """
    handler_func, action = TEXT_COMMAND_MAP[message.text]
    
    # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤—ã–π" CallbackQuery, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã —É –Ω–µ–≥–æ –±—ã–ª –æ–±—ä–µ–∫—Ç message
    fake_callback_query = types.CallbackQuery(
        id=str(message.message_id),
        from_user=message.from_user,
        chat_instance="fake_chat_instance",
        message=message, # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        data=MenuCallback(level=0, action=action).pack()
    )
    
    # aiogram 3+ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–º–µ–Ω, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ö—ç–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –µ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    await handler_func(call=fake_callback_query, state=state, deps=deps)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AI —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä AITriggerFilter –≤–µ—Ä–Ω–µ—Ç True
@router.message(AITriggerFilter())
async def handle_text_for_ai(message: Message, state: FSMContext, deps: Deps):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏,
    –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text.strip()
    
    temp_msg = await message.reply("ü§ñ –î—É–º–∞—é...")
    
    history = await deps.user_service.get_conversation_history(user_id, chat_id)
    ai_answer = await deps.ai_content_service.get_consultant_answer(user_text, history)
    await deps.user_service.add_to_conversation_history(user_id, chat_id, user_text, ai_answer)
    
    response_text = (f"<b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n<i>¬´{sanitize_html(user_text)}¬ª</i>\n\n"
                     f"<b>–û—Ç–≤–µ—Ç AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:</b>\n{ai_answer}")
    
    await temp_msg.edit_text(response_text, disable_web_page_preview=True)