# ===============================================================
# –§–∞–π–ª: bot/handlers/public/common_handler.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ /start, /help,
# –∞ —Ç–∞–∫–∂–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
# –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–ø—Ä–æ—Å—ã —Ü–µ–Ω, AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç).
# ===============================================================
import logging

from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ChatType

from bot.config.settings import settings
from bot.keyboards.keyboards import get_main_menu_keyboard
from bot.utils.text_utils import sanitize_html
from bot.keyboards.onboarding_keyboards import get_onboarding_start_keyboard, get_onboarding_step_keyboard
from bot.services.user_service import UserService
from bot.services.ai_content_service import AIContentService
from bot.services.price_service import PriceService
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ, –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ---
from bot.states.common_states import CommonStates
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
from bot.utils.formatters import format_price_info

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router(name=__name__)
logger = logging.getLogger(__name__)

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
# –í –∏–¥–µ–∞–ª–µ, –∏—Ö —Å—Ç–æ–∏—Ç –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª bot/texts/public_texts.py
HELP_TEXT = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot!</b>

–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä—ã–Ω–∫–∞.

üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>

üíπ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:</b> –£–∑–Ω–∞–≤–∞–π—Ç–µ —Ü–µ–Ω—ã –Ω–∞ Bitcoin, Ethereum –∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
‚öôÔ∏è <b>–¢–æ–ø ASIC-–º–∞–π–Ω–µ—Ä–æ–≤:</b> –ü–æ–ª—É—á–∞–π—Ç–µ —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–≥–æ –¥–æ—Ö–æ–¥–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–∞ —Ä—ã–Ω–∫–µ.
‚õèÔ∏è <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:</b> –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –ª—é–±–æ–≥–æ ASIC —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏.
üì∞ <b>–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b> –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å –Ω–∞—à–∏–º–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ –∏–∑ –≤–µ–¥—É—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
üò± <b>–ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏:</b> –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
üß† <b>–ö—Ä–∏–ø—Ç–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –∏ —É–∑–Ω–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!

üíé <b>–ò–≥—Ä–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥"</b>
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ASIC'–∏, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã! –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ <b>—Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏</b> —É –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!

‚å®Ô∏è <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>
<code>/start</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
<code>/help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

<i>–¢–∞–∫–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, btc –∏–ª–∏ —ç—Ñ–∏—Ä), —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–µ –∫—É—Ä—Å.</i>
"""

ONBOARDING_TEXTS = {
    1: "<b>–®–∞–≥ 1: –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üíπ</b>\n\n–ü–µ—Ä–≤–∞—è –∏ –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>btc</code> –∏–ª–∏ <code>—ç—Ñ–∏—Ä</code>) –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é.",
    2: "<b>–®–∞–≥ 2: –í—Å–µ –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤ ‚öôÔ∏è</b>\n\n–í —Ä–∞–∑–¥–µ–ª–µ '–¢–æ–ø ASIC' –≤—ã –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç–µ —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–≥–æ –¥–æ—Ö–æ–¥–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ê '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–π —Ä–æ–∑–µ—Ç–∫–∏.",
    3: "<b>–®–∞–≥ 3: –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä üíé</b>\n\n–≠—Ç–æ –Ω–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞! –ó–¥–µ—Å—å –Ω–∞—à AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ 24/7 –∏—â–µ—Ç –¥–ª—è –≤–∞—Å —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞: –æ—Ç Airdrop'–æ–≤ –¥–æ –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤."
}

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

@router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext, command: CommandObject, user_service: UserService):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é
    —Å—Å—ã–ª–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    await state.clear()
    user_id = message.from_user.id
    
    is_new_user = await user_service.is_new_user(user_id)
    if is_new_user:
        await user_service.register_new_user(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if command.args:
            await user_service.process_referral(
                referrer_id_str=command.args, 
                new_user_id=user_id, 
                new_user_username=message.from_user.username
            )

        text = (f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!</b>\n\n"
                "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞. "
                "–î–∞–≤–∞–π—Ç–µ —è –±—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∂—É, —á—Ç–æ —è —É–º–µ—é!")
        await message.answer(text, reply_markup=get_onboarding_start_keyboard())
    else:
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

@router.message(Command("help"))
async def handle_help(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    await message.answer(HELP_TEXT, disable_web_page_preview=True)

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ù–ë–û–†–î–ò–ù–ì–û–ú –ß–ï–†–ï–ó FSM ---

@router.callback_query(F.data.startswith("onboarding:"))
async def handle_onboarding_navigation(call: CallbackQuery, state: FSMContext):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É."""
    action = call.data.split(":")[1]

    if action in ["skip", "finish"]:
        text = ("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –≤—Å–µ –æ—Å–Ω–æ–≤—ã!\n\n"
                "–í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ï—Å–ª–∏ –∑–∞–±—É–¥–µ—Ç–µ, —á—Ç–æ —è —É–º–µ—é, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.")
        await call.message.delete()
        await call.message.answer(text, reply_markup=get_main_menu_keyboard())
        await state.clear()
        return

    try:
        step = int(action.split("_")[1])
        await state.update_data(onboarding_step=step)
        await state.set_state(CommonStates.onboarding)
        
        text = ONBOARDING_TEXTS.get(step, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥.")
        keyboard = get_onboarding_step_keyboard(step)
        await call.message.edit_text(text, reply_markup=keyboard)
    except (ValueError, IndexError):
        logger.error(f"Invalid onboarding action: {action}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ò–ó–í–û–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê ---

@router.message(F.content_type == "text", ~F.text.startswith('/'))
async def handle_arbitrary_text(message: Message, state: FSMContext, bot: Bot, user_service: UserService, price_service: PriceService, ai_content_service: AIContentService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥:
    1. –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã.
    2. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏ —ç—Ç–æ –õ–°/–æ—Ç–≤–µ—Ç –±–æ—Ç—É/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ—Ç —Å –ø–æ–º–æ—â—å—é AI.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text.strip()

    # –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã
    price_info = await price_service.get_crypto_price(user_text)
    if price_info:
        text = format_price_info(price_info)
        await message.answer(text)
        return

    # –£—Ä–æ–≤–µ–Ω—å 2: AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
    bot_info = await bot.get_me()
    is_mention = any(
        entity.type == 'mention' and message.text[entity.offset:entity.offset+entity.length] == f"@{bot_info.username}"
        for entity in message.entities or []
    )
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id

    if message.chat.type == ChatType.PRIVATE or is_mention or is_reply_to_bot:
        temp_msg = await message.reply("ü§ñ –î—É–º–∞—é...")
        
        history = await user_service.get_conversation_history(user_id, chat_id)
        ai_answer = await ai_content_service.get_consultant_answer(user_text, history)
        await user_service.add_to_conversation_history(user_id, chat_id, user_text, ai_answer)
        
        response_text = (f"<b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n<i>¬´{sanitize_html(user_text)}¬ª</i>\n\n"
                         f"<b>–û—Ç–≤–µ—Ç AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:</b>\n{ai_answer}")
        
        await temp_msg.edit_text(response_text, disable_web_page_preview=True)
