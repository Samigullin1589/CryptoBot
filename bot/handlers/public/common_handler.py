# =================================================================================
# –§–∞–π–ª: bot/handlers/public/common_handler.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –§–ò–ù–ê–õ–¨–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞
# –µ–¥–∏–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π 'deps'.
# =================================================================================
import logging
from typing import Union, Dict, Any

from aiogram import F, Router, Bot, types
from aiogram.filters import CommandStart, Command, CommandObject, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, User
from aiogram.enums import ChatType

from bot.keyboards.keyboards import get_main_menu_keyboard
from bot.keyboards.onboarding_keyboards import get_onboarding_start_keyboard, get_onboarding_step_keyboard
from bot.states.common_states import CommonStates
from bot.utils.dependencies import Deps
from bot.utils.formatters import format_price_info
from bot.utils.text_utils import sanitize_html
from bot.texts.public_texts import HELP_TEXT, ONBOARDING_TEXTS, get_referral_success_text

public_router = Router(name=__name__)
logger = logging.getLogger(__name__)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å AI
class AITriggerFilter(BaseFilter):
    async def __call__(self, message: Message, bot: Bot) -> bool:
        bot_info = await bot.get_me()
        if message.chat.type == ChatType.PRIVATE:
            return True
        if message.text and f"@{bot_info.username}" in message.text:
            return True
        if message.reply_to_message and message.reply_to_message.from_user.id == bot_info.id:
            return True
        return False

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

@public_router.message(CommandStart())
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç deps
async def handle_start(message: Message, state: FSMContext, command: CommandObject, deps: Deps):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.
    """
    await state.clear()
    user = message.from_user
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ deps –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    profile, is_new_user = await deps.user_service.get_or_create_user(user)

    if is_new_user and command.args:
        try:
            referrer_id = int(command.args)
            bonus_credited = await deps.user_service.process_referral(
                new_user_id=user.id,
                referrer_id=referrer_id
            )
            if bonus_credited:
                bonus_amount = 50.0 # –ü—Ä–∏–º–µ—Ä
                await deps.bot.send_message(
                    referrer_id,
                    get_referral_success_text(float(bonus_amount))
                )
        except (ValueError, TypeError):
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π deeplink-–∞—Ä–≥—É–º–µ–Ω—Ç '{command.args}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è {user.id} –æ—Ç '{command.args}': {e}")
    
    if is_new_user:
        text = (f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.full_name}!</b>\n\n"
                "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞. "
                "–î–∞–≤–∞–π—Ç–µ —è –±—ã—Å—Ç—Ä–æ –ø–æ–∫–∞–∂—É, —á—Ç–æ —è —É–º–µ—é!")
        await message.answer(text, reply_markup=get_onboarding_start_keyboard())
    else:
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    await state.set_state(CommonStates.main_menu)

@public_router.message(Command("help"))
async def handle_help(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    await message.answer(HELP_TEXT, disable_web_page_preview=True)

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ù–ë–û–†–î–ò–ù–ì–û–ú –ß–ï–†–ï–ó FSM ---
@public_router.callback_query(F.data.startswith("onboarding:"))
async def handle_onboarding_navigation(call: CallbackQuery, state: FSMContext):
    action = call.data.split(":")[1]

    if action in ["skip", "finish"]:
        text = ("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –≤—Å–µ –æ—Å–Ω–æ–≤—ã!\n\n"
                "–í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ï—Å–ª–∏ –∑–∞–±—É–¥–µ—Ç–µ, —á—Ç–æ —è —É–º–µ—é, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.")
        await call.message.edit_text(text, reply_markup=get_main_menu_keyboard())
        await state.set_state(CommonStates.main_menu)
        return

    try:
        step = int(action.split("_")[1])
        await state.update_data(onboarding_step=step)
        
        text = ONBOARDING_TEXTS.get(step, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥.")
        keyboard = get_onboarding_step_keyboard(step)
        await call.message.edit_text(text, reply_markup=keyboard)
    except (ValueError, IndexError):
        logger.error(f"Invalid onboarding action: {action}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ò–ó–í–û–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê ---

@public_router.message(F.text, ~F.text.startswith('/'))
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç deps
async def handle_text_message(message: Message, state: FSMContext, deps: Deps):
    """
    –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç —Ü–µ–Ω—É, –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç - –ø–µ—Ä–µ–¥–∞–µ—Ç AI.
    """
    # –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É price_service –µ—Å—Ç—å –º–µ—Ç–æ–¥ get_crypto_price
    # price_info = await deps.price_service.get_crypto_price(message.text.strip())
    # if price_info:
    #     text = format_price_info(price_info)
    #     await message.answer(text)
    #     return

    # –£—Ä–æ–≤–µ–Ω—å 2: AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
    ai_filter = AITriggerFilter()
    if await ai_filter(message, deps.bot):
        user_id = message.from_user.id
        chat_id = message.chat.id
        user_text = message.text.strip()
        
        temp_msg = await message.reply("ü§ñ –î—É–º–∞—é...")
        
        history = await deps.user_service.get_conversation_history(user_id, chat_id)
        ai_answer = await deps.ai_content_service.get_consultant_answer(user_text, history)
        await deps.user_service.add_to_conversation_history(user_id, chat_id, user_text, ai_answer)
        
        response_text = (f"<b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n<i>¬´{sanitize_html(user_text)}¬ª</i>\n\n"
                         f"<b>–û—Ç–≤–µ—Ç AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:</b>\n{ai_answer}")
        
        await temp_msg.edit_text(response_text, disable_web_page_preview=True)
