import asyncio
import logging
import re
from typing import Any, Callable, Dict, Optional, Tuple

from aiogram import Router, F
from aiogram.types import Message

from bot.utils.dependencies import Deps

logger = logging.getLogger(__name__)

router = Router(name="public_common")


# ------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã -------------------------

_COIN_TOKEN_RE = re.compile(r"^[A-Za-z0-9][A-Za-z0-9\-]{0,19}$")


def _looks_like_coin_token(text: str) -> bool:
    """
    –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∏–¥–∞ 'btc', 'aleo', 'eth', 'doge-3' –∏ —Ç.–ø.
    """
    t = text.strip()
    if not t or " " in t:
        return False
    return bool(_COIN_TOKEN_RE.match(t))


async def _maybe_call(func: Callable, *args, **kwargs):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ sync/async —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    res = func(*args, **kwargs)
    if asyncio.iscoroutine(res):
        return await res
    return res


async def _resolve_coin(deps: Deps, query: str) -> Tuple[Optional[str], Optional[str]]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å (coin_id, symbol) –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ
    —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (coin_id, symbol) –∏–ª–∏ (None, None).
    """
    cls = getattr(deps, "coin_list_service", None)

    candidates = [
        ("resolve_query", {"query": query}),
        ("resolve", {"query": query}),
        ("get_coin_by_query", {"query": query}),
        ("find", {"text": query}),
        ("get", {"query": query}),
    ]

    for name, kwargs in candidates:
        if cls and hasattr(cls, name):
            try:
                obj = await _maybe_call(getattr(cls, name), **kwargs)
                if not obj:
                    continue
                coin_id = getattr(obj, "id", None) or obj.get("id") if isinstance(obj, dict) else None
                symbol = getattr(obj, "symbol", None) or obj.get("symbol") if isinstance(obj, dict) else None
                symbol = symbol or getattr(obj, "ticker", None) or (obj.get("ticker") if isinstance(obj, dict) else None)
                if coin_id or symbol:
                    return str(coin_id) if coin_id else None, (str(symbol).upper() if symbol else None)
            except Exception as e:
                logger.debug("coin_list_service.%s failed: %s", name, e)

    return None, query.upper()


async def _fetch_usd_price(deps: Deps, symbol: str) -> Optional[float]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≤ USD —á–µ—Ä–µ–∑ PriceService, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî —á–µ—Ä–µ–∑ MarketDataService.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∏–ª–∏ None.
    """
    ps = getattr(deps, "price_service", None)
    mds = getattr(deps, "market_data_service", None)

    ps_candidates = [
        ("get_price", {"symbol": symbol, "fiat": "usd"}),
        ("get_price", {"coin": symbol, "fiat": "usd"}),
        ("get_prices", {"symbols": [symbol], "fiat": "usd"}),
        ("fetch_prices", {"symbols": [symbol], "fiat": "usd"}),
    ]
    for name, kwargs in ps_candidates:
        if ps and hasattr(ps, name):
            try:
                res = await _maybe_call(getattr(ps, name), **kwargs)
                if isinstance(res, (int, float)):
                    return float(res)
                if isinstance(res, dict):
                    val = res.get(symbol) or res.get(symbol.upper()) or res.get(symbol.lower())
                    if isinstance(val, (int, float)):
                        return float(val)
                    if isinstance(val, dict):
                        return float(val.get("usd") or val.get("USD") or val.get("price") or 0) or None
            except Exception as e:
                logger.debug("price_service.%s failed: %s", name, e)

    mds_candidates = [
        ("get_price", {"symbol": symbol, "fiat": "usd"}),
        ("get_prices", {"symbols": [symbol], "fiat": "usd"}),
        ("fetch_price", {"symbol": symbol, "fiat": "usd"}),
    ]
    for name, kwargs in mds_candidates:
        if mds and hasattr(mds, name):
            try:
                res = await _maybe_call(getattr(mds, name), **kwargs)
                if isinstance(res, (int, float)):
                    return float(res)
                if isinstance(res, dict):
                    val = res.get(symbol) or res.get(symbol.upper()) or res.get(symbol.lower())
                    if isinstance(val, (int, float)):
                        return float(val)
                    if isinstance(val, dict):
                        return float(val.get("usd") or val.get("USD") or val.get("price") or 0) or None
            except Exception as e:
                logger.debug("market_data_service.%s failed: %s", name, e)

    return None


async def _reply_with_price(message: Message, symbol: str, price_usd: float) -> None:
    text = f"–ö—É—Ä—Å {symbol}: ${price_usd:,.2f} (USD)"
    try:
        await message.answer(text)
    except Exception as e:
        logger.error("Failed to send price reply: %s", e, exc_info=True)


def _user_in_price_context(deps: Deps, user_id: int) -> bool:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ ¬´—Ü–µ–Ω–æ–≤–æ–º¬ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (FSM/—Å–µ–∫—Ü–∏—è).
    –í—Å–µ –≤—ã–∑–æ–≤—ã ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã.
    """
    us = getattr(deps, "user_state_service", None)
    if not us:
        return False
    for name in ("get_current_section", "get_section", "get_user_section", "get_mode"):
        if hasattr(us, name):
            try:
                section = getattr(us, name)(user_id)
                if asyncio.iscoroutine(section):
                    return False
                section_str = (str(section) if section is not None else "").lower()
                if section_str in {"price", "prices", "–∫—É—Ä—Å", "–∫—É—Ä—Å—ã", "market_price"}:
                    return True
            except Exception:
                pass
    return False


def _extract_price_query(text: str) -> Optional[str]:
    """
    –í—ã–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ç–∏–∫–µ—Ä/–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ —Ñ—Ä–∞–∑ –≤–∏–¥–∞:
      'btc', '–∫—É—Ä—Å btc', 'price eth', '$sol', '–∫—É—Ä—Å: aleo'
    """
    t = text.strip()
    if _looks_like_coin_token(t):
        return t
    m = re.search(r"(?:^|\s)(?:–∫—É—Ä—Å|price|\$)\s*[:\-]?\s*([A-Za-z0-9][A-Za-z0-9\-]{0,19})", t, flags=re.IGNORECASE)
    if m:
        return m.group(1)
    return None


# ------------------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ------------------------------

@router.message(F.text)
async def handle_text_for_ai(message: Message, deps: Deps) -> None:
    """
    –†–∞–Ω—å—à–µ –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–ª–∏ –≤ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.
    –¢–µ–ø–µ—Ä—å:
      1) –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –±–æ—Ç-–∫–æ–º–∞–Ω–¥—ã ("/start", "/help" –∏ —Ç.–ø.).
      2) –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º ¬´—Ü–µ–Ω–æ–≤—ã–µ¬ª –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—á–∞–µ–º –∫—É—Ä—Å–æ–º –º–æ–Ω–µ—Ç—ã.
      3) –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.
    """
    user_text = (message.text or "").strip()

    # --- 1) –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
    if user_text.startswith("/"):
        return
    try:
        if message.entities:
            for ent in message.entities:
                if getattr(ent, "type", "") == "bot_command":
                    return
    except Exception:
        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç entities –∏–ª–∏ —Ç–∏–ø –¥—Ä—É–≥–æ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–¥—ë–º –¥–∞–ª—å—à–µ
        pass

    # --- 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
    in_price_ctx = _user_in_price_context(deps, message.from_user.id if message.from_user else 0)
    price_query = _extract_price_query(user_text)

    if in_price_ctx or price_query:
        query = price_query or user_text
        coin_id, symbol = await _resolve_coin(deps, query)
        symbol_for_fetch = symbol or (coin_id or "").upper()
        if symbol_for_fetch:
            price = await _fetch_usd_price(deps, symbol_for_fetch)
            if price is not None:
                await _reply_with_price(message, symbol_for_fetch, price)
                return
            else:
                try:
                    await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã.")
                except Exception:
                    pass
                return
        else:
            try:
                await message.answer("üòï –ú–æ–Ω–µ—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, ALEO.")
            except Exception:
                pass
            return

    # --- 3) –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã ‚Äî –∫ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É ---
    history_provider = getattr(deps, "history_service", None)
    history = None
    if history_provider and hasattr(history_provider, "get_history_for_user"):
        try:
            h = history_provider.get_history_for_user(message.from_user.id if message.from_user else 0)
            if asyncio.iscoroutine(h):
                h = await h
            history = h
        except Exception:
            history = None

    try:
        ai_answer = await deps.ai_content_service.get_consultant_answer(user_text, history)
        ai_answer = ai_answer or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."
        await message.answer(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å:\n¬´" + user_text + "¬ª\n\n–û—Ç–≤–µ—Ç AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:\n" + ai_answer
        )
    except Exception as e:
        logger.error("AI answer failed: %s", e, exc_info=True)
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.")
        except Exception:
            pass
