# bot/handlers/public/common_handler.py

import asyncio
import logging
import re
from typing import Optional, Tuple

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.filters.not_command_filter import NotCommandFilter
from bot.utils.dependencies import Deps

logger = logging.getLogger(__name__)

router = Router(name="public_common")


# ------------------------- –†–µ–∂–∏–º –ò–ò –ø–æ –∫–æ–º–∞–Ω–¥–µ /ask -------------------------

class AIConsultantState(StatesGroup):
    waiting_question = State()


@router.message(Command("ask"))
async def cmd_ask(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò (—Ç–æ–ª—å–∫–æ –ø–æ —è–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ)."""
    await state.set_state(AIConsultantState.waiting_question)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")


@router.message(AIConsultantState.waiting_question, F.text)
async def handle_ai_question(message: Message, state: FSMContext, deps: Deps):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫ –ò–ò —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    user_text = (message.text or "").strip()

    # –ò—Å—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä–≤–∏—Å)
    history = None
    history_provider = getattr(deps, "history_service", None)
    if history_provider and hasattr(history_provider, "get_history_for_user"):
        try:
            h = history_provider.get_history_for_user(message.from_user.id if message.from_user else 0)
            history = await h if asyncio.iscoroutine(h) else h
        except Exception:
            history = None

    # –ó–∞–ø—Ä–æ—Å –∫ –ò–ò
    try:
        ai_answer = await deps.ai_content_service.get_consultant_answer(user_text, history)
        ai_answer = ai_answer or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."
        await message.answer(f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n¬´{user_text}¬ª\n\n–û—Ç–≤–µ—Ç AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:\n{ai_answer}")
    except Exception as e:
        logger.error("AI answer failed: %s", e, exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.")
    finally:
        await state.clear()


# ------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã -------------------------

_COIN_TOKEN_RE = re.compile(r"^[A-Za-z0-9][A-Za-z0-9\-]{0,19}$")


def _looks_like_coin_token(text: str) -> bool:
    t = text.strip()
    if not t or " " in t:
        return False
    return bool(_COIN_TOKEN_RE.match(t))


async def _maybe_call(func, *args, **kwargs):
    res = func(*args, **kwargs)
    if asyncio.iscoroutine(res):
        return await res
    return res


async def _resolve_coin(deps: Deps, query: str) -> Tuple[Optional[str], Optional[str]]:
    cls = getattr(deps, "coin_list_service", None)
    candidates = [
        ("resolve_query", {"query": query}),
        ("resolve", {"query": query}),
        ("get_coin_by_query", {"query": query}),
        ("find", {"text": query}),
        ("get", {"query": query}),
    ]
    for name, kwargs in candidates:
        if cls and hasattr(cls, name):
            try:
                obj = await _maybe_call(getattr(cls, name), **kwargs)
                if not obj:
                    continue
                coin_id = getattr(obj, "id", None) or (obj.get("id") if isinstance(obj, dict) else None)
                symbol = getattr(obj, "symbol", None) or (obj.get("symbol") if isinstance(obj, dict) else None)
                symbol = symbol or getattr(obj, "ticker", None) or (obj.get("ticker") if isinstance(obj, dict) else None)
                if coin_id or symbol:
                    return (str(coin_id) if coin_id else None), (str(symbol).upper() if symbol else None)
            except Exception as e:
                logger.debug("coin_list_service.%s failed: %s", name, e)
    return None, query.upper()


async def _fetch_usd_price(deps: Deps, symbol: str) -> Optional[float]:
    ps = getattr(deps, "price_service", None)
    mds = getattr(deps, "market_data_service", None)

    ps_candidates = [
        ("get_price", {"symbol": symbol, "fiat": "usd"}),
        ("get_price", {"coin": symbol, "fiat": "usd"}),
        ("get_prices", {"symbols": [symbol], "fiat": "usd"}),
        ("fetch_prices", {"symbols": [symbol], "fiat": "usd"}),
    ]
    for name, kwargs in ps_candidates:
        if ps and hasattr(ps, name):
            try:
                res = await _maybe_call(getattr(ps, name), **kwargs)
                if isinstance(res, (int, float)):
                    return float(res)
                if isinstance(res, dict):
                    val = res.get(symbol) or res.get(symbol.upper()) or res.get(symbol.lower())
                    if isinstance(val, (int, float)):
                        return float(val)
                    if isinstance(val, dict):
                        return float(val.get("usd") or val.get("USD") or val.get("price") or 0) or None
            except Exception as e:
                logger.debug("price_service.%s failed: %s", name, e)

    mds_candidates = [
        ("get_price", {"symbol": symbol, "fiat": "usd"}),
        ("get_prices", {"symbols": [symbol], "fiat": "usd"}),
        ("fetch_price", {"symbol": symbol, "fiat": "usd"}),
    ]
    for name, kwargs in mds_candidates:
        if mds and hasattr(mds, name):
            try:
                res = await _maybe_call(getattr(mds, name), **kwargs)
                if isinstance(res, (int, float)):
                    return float(res)
                if isinstance(res, dict):
                    val = res.get(symbol) or res.get(symbol.upper()) or res.get(symbol.lower())
                    if isinstance(val, (int, float)):
                        return float(val)
                    if isinstance(val, dict):
                        return float(val.get("usd") or val.get("USD") or val.get("price") or 0) or None
            except Exception as e:
                logger.debug("market_data_service.%s failed: %s", name, e)

    return None


async def _reply_with_price(message: Message, symbol: str, price_usd: float) -> None:
    text = f"–ö—É—Ä—Å {symbol}: ${price_usd:,.2f} (USD)"
    try:
        await message.answer(text)
    except Exception as e:
        logger.error("Failed to send price reply: %s", e, exc_info=True)


def _user_in_price_context(deps: Deps, user_id: int) -> bool:
    us = getattr(deps, "user_state_service", None)
    if not us:
        return False
    for name in ("get_current_section", "get_section", "get_user_section", "get_mode"):
        if hasattr(us, name):
            try:
                section = getattr(us, name)(user_id)
                if asyncio.iscoroutine(section):
                    return False
                section_str = (str(section) if section is not None else "").lower()
                if section_str in {"price", "prices", "–∫—É—Ä—Å", "–∫—É—Ä—Å—ã", "market_price"}:
                    return True
            except Exception:
                pass
    return False


def _extract_price_query(text: str) -> Optional[str]:
    t = text.strip()
    if _looks_like_coin_token(t):
        return t
    m = re.search(r"(?:^|\s)(?:–∫—É—Ä—Å|price|\$)\s*[:\-]?\s*([A-Za-z0-9][A-Za-z0-9\-]{0,19})", t, flags=re.IGNORECASE)
    if m:
        return m.group(1)
    return None


# ------------------------- –ì–ª—É—à–∏–ª–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π/–ø—Ä–∞–π—Å–æ–≤ -------------------------

AD_LIKE = re.compile(
    r'(?:\+7|8)\d{10}|@\w+|[$‚Ç¨‚ÇΩ]|S\d{2}\s?[A-Z]+|L7|M50|XP\s?\d+th|j\s?pro\+',
    re.IGNORECASE,
)

@router.message(F.text.regexp(AD_LIKE), NotCommandFilter())
async def ignore_ads_like(message: Message):
    """–ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ò–ò –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è/–ø—Ä–∞–π—Å—ã; –¥–∞—ë–º –º—è–≥–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É."""
    await message.answer("–ß—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –ò–ò, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ask. –î–ª—è –∫—É—Ä—Å–∞ –º–æ–Ω–µ—Ç—ã ‚Äî —Ä–∞–∑–¥–µ–ª ¬´–ö—É—Ä—Å¬ª.")


# ------------------------------ –û–±—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ------------------------------

# –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω NotCommandFilter(), —á—Ç–æ–±—ã /start –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∏ —Å—é–¥–∞
@router.message(F.text, NotCommandFilter())
async def handle_text_common(message: Message, deps: Deps) -> None:
    """
    –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
      1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö—É—Ä—Å¬ª –ò–õ–ò —Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –∫—É—Ä—Å–æ–º –º–æ–Ω–µ—Ç—ã.
      2) –ò–Ω–∞—á–µ ‚Äî –ù–ï –≤—ã–∑—ã–≤–∞–µ–º –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç—ã).
         –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É /ask.
    """
    user_text = (message.text or "").strip()

    # 1) –ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã (—Ä–∞–∑–¥–µ–ª ¬´–ö—É—Ä—Å¬ª –∏–ª–∏ —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
    in_price_ctx = _user_in_price_context(deps, message.from_user.id if message.from_user else 0)
    price_query = _extract_price_query(user_text)

    if in_price_ctx or price_query:
        query = price_query or user_text
        coin_id, symbol = await _resolve_coin(deps, query)
        symbol_for_fetch = symbol or (coin_id or "").upper()
        if symbol_for_fetch:
            price = await _fetch_usd_price(deps, symbol_for_fetch)
            if price is not None:
                await _reply_with_price(message, symbol_for_fetch, price)
                return
            else:
                await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã.")
                return
        else:
            await message.answer("üòï –ú–æ–Ω–µ—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü—Ä–∏–º–µ—Ä: BTC, ETH, ALEO.")
            return

    # 2) –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ò–ò ‚Äî —Ç–æ–ª—å–∫–æ —è–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /ask
    if "?" in user_text:
        await message.answer("–•–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –ò–ò? –í–≤–µ–¥–∏—Ç–µ /ask –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    else:
        # –ú–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–∫–∞–∑ –º–µ–Ω—é, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä/–∫–Ω–æ–ø–∫–∞
        await message.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é. –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ –ò–ò –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ask. –î–ª—è –∫—É—Ä—Å–∞ ‚Äî —Ä–∞–∑–¥–µ–ª ¬´–ö—É—Ä—Å¬ª.")