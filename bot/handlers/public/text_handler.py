# src/bot/handlers/public/text_handler.py
from __future__ import annotations

import re
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from loguru import logger

router = Router(name="text_public")

_PAIR_RE = re.compile(r"^\s*([a-zA-Z]{2,10})\s*[/\s,-]?\s*([a-zA-Z]{2,10})?\s*$")

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–∫–µ—Ä–æ–≤ –≤ CoinGecko ID
SYMBOL_TO_COIN_ID = {
    "BTC": "bitcoin",
    "ETH": "ethereum",
    "USDT": "tether",
    "BNB": "binancecoin",
    "SOL": "solana",
    "XRP": "ripple",
    "ADA": "cardano",
    "DOGE": "dogecoin",
    "DOT": "polkadot",
    "TRX": "tron",
    "MATIC": "matic-network",
    "LTC": "litecoin",
    "AVAX": "avalanche-2",
    "LINK": "chainlink",
    "UNI": "uniswap",
    "ATOM": "cosmos",
}


def _norm_symbol(s: str) -> str:
    return s.strip().upper()


@router.message(Command("ask"))
async def cmd_ask(message: Message, deps) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        command_text = message.text or ""
        question = command_text.replace("/ask", "", 1).strip()
        
        if not question:
            await message.answer(
                "üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /ask:</b>\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "<code>/ask –ß—Ç–æ —Ç–∞–∫–æ–µ –±–∏—Ç–∫–æ–∏–Ω?</code>\n\n"
                "–Ø –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö! ü§ñ",
                parse_mode="HTML"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # –ü–æ–ª—É—á–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
        ai_service = getattr(deps, "ai_content_service", None)
        if not ai_service:
            await message.answer(
                "‚ùå AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await ai_service.generate_answer(
            question=question,
            context="–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
        )
        
        if not response:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
                parse_mode="HTML"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(
            f"ü§ñ <b>–û—Ç–≤–µ—Ç:</b>\n\n{response}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.exception(f"Error in /ask command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@router.message()
async def on_text(message: Message, deps) -> None:
    text = (message.text or "").strip()

    if text.lower() in ("news", "–Ω–æ–≤–æ—Å—Ç–∏", "üì∞"):
        from bot.handlers.public.news_handler import cmd_news
        await cmd_news(message, deps)
        return

    m = _PAIR_RE.match(text)
    if not m:
        return

    symbol = _norm_symbol(m.group(1))
    coin_id = SYMBOL_TO_COIN_ID.get(symbol)
    
    if not coin_id:
        await message.answer(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–Ω–µ—Ç–∞: {symbol}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç.", 
            parse_mode="HTML"
        )
        return

    try:
        p = await deps.price_service.get_price(coin_id)
        if p is None:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                parse_mode="HTML"
            )
            return

        await message.answer(
            f"<b>{symbol}/USD</b>: <code>${p:,.2f}</code>", 
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error getting price for {symbol}: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            parse_mode="HTML"
        )