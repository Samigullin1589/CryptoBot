import asyncio
import logging
import re
from typing import Union

from aiogram import Bot, F, Router
from aiogram.enums import ContentType
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from bot.keyboards.keyboards import (get_main_menu_keyboard,
                                     get_price_keyboard,
                                     get_quiz_keyboard)
from bot.services.asic_service import AsicService
from bot.services.market_data_service import MarketDataService
from bot.services.news_service import NewsService
from bot.services.price_service import PriceService
from bot.services.quiz_service import QuizService
from bot.services.admin_service import AdminService
from bot.utils.helpers import (get_message_and_chat_id, sanitize_html,
                               show_main_menu)
from bot.utils.plotting import generate_fng_image
from bot.utils.states import PriceInquiry, ProfitCalculator

router = Router()
logger = logging.getLogger(__name__)


# --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î –û–¢–í–ï–¢–ê ---
async def safe_edit_or_send(call: CallbackQuery, text: str, markup, delete_photo: bool = True):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç,
    –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞.
    """
    try:
        if call.message.content_type == ContentType.TEXT:
            await call.message.edit_text(text, reply_markup=markup, disable_web_page_preview=True)
        else:
            if delete_photo:
                await call.message.delete()
            await call.message.answer(text, reply_markup=markup, disable_web_page_preview=True)
    except TelegramBadRequest as e:
        logger.error(f"Error editing or sending message: {e}")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(text, reply_markup=markup, disable_web_page_preview=True)
    finally:
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await call.answer()


async def send_price_info(message: Message, query: str, price_service: PriceService):
    coin = await price_service.get_crypto_price(query)
    
    if not coin:
        await message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ '{sanitize_html(query)}'.",
            reply_markup=get_main_menu_keyboard()
        )
        return

    change = coin.price_change_24h or 0
    emoji = "üìà" if change >= 0 else "üìâ"
    text = (f"<b>{coin.name} ({coin.symbol})</b>\n"
            f"üíπ –ö—É—Ä—Å: <b>${coin.price:,.4f}</b>\n"
            f"{emoji} 24—á: <b>{change:.2f}%</b>\n")
    if coin.algorithm:
        text += f"‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <code>{coin.algorithm}</code>"
    
    await message.edit_text(text, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_asics")
@router.message(F.text == "‚öôÔ∏è –¢–æ–ø ASIC")
async def handle_asics_menu(update: Union[CallbackQuery, Message], asic_service: AsicService, admin_service: AdminService):
    await admin_service.track_command_usage("‚öôÔ∏è –¢–æ–ø ASIC")
    
    message_to_edit = update.message if isinstance(update, CallbackQuery) else await update.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    if isinstance(update, CallbackQuery):
        await safe_edit_or_send(update, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...", None, delete_photo=False)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
    asics = await asic_service.get_all_cached_asics()
    
    if not asics:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        text = "üèÜ <b>–¢–æ–ø-10 –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC:</b>\n\n"
        for miner in asics[:10]:
            text += (f"<b>{sanitize_html(miner.name)}</b>\n  –î–æ—Ö–æ–¥: <b>${miner.profitability:.2f}/–¥–µ–Ω—å</b>"
                     f"{f' | {miner.algorithm}' if miner.algorithm else ''}"
                     f"{f' | {miner.power}W' if miner.power else ''}\n")
    
    await message_to_edit.edit_text(text, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_price")
@router.message(F.text == "üíπ –ö—É—Ä—Å")
async def handle_price_menu(update: Union[CallbackQuery, Message], state: FSMContext, admin_service: AdminService):
    await admin_service.track_command_usage("üíπ –ö—É—Ä—Å")
    
    text = "–ö—É—Ä—Å –∫–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    markup = get_price_keyboard()
    
    if isinstance(update, CallbackQuery):
        await safe_edit_or_send(update, text, markup)
    else:
        await update.answer(text, reply_markup=markup)
    
    await state.clear()


@router.callback_query(F.data == "menu_news")
@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def handle_news_menu(update: Union[CallbackQuery, Message], news_service: NewsService, admin_service: AdminService):
    await admin_service.track_command_usage("üì∞ –ù–æ–≤–æ—Å—Ç–∏")

    message_to_edit = update.message if isinstance(update, CallbackQuery) else await update.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
    if isinstance(update, CallbackQuery):
        await safe_edit_or_send(update, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏...", None, delete_photo=False)

    news = await news_service.fetch_latest_news()
    if not news:
        await message_to_edit.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.", reply_markup=get_main_menu_keyboard())
        return
        
    text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(
        [f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news])
        
    await message_to_edit.edit_text(text, disable_web_page_preview=True, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_fear_greed")
@router.message(F.text == "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞")
async def handle_fear_greed_menu(update: Union[CallbackQuery, Message], market_data_service: MarketDataService, admin_service: AdminService):
    await admin_service.track_command_usage("üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞")
    message, _ = await get_message_and_chat_id(update)
    
    if isinstance(update, CallbackQuery):
        try:
            await update.message.delete()
        except TelegramBadRequest:
            pass

    temp_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω–¥–µ–∫—Å –∏ —Ä–∏—Å—É—é –≥—Ä–∞—Ñ–∏–∫...")

    index = await market_data_service.get_fear_and_greed_index()
    if not index:
        await temp_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å.", reply_markup=get_main_menu_keyboard())
        return

    value = int(index.get('value', 50))
    classification = index.get('value_classification', 'Neutral')
    
    loop = asyncio.get_running_loop()
    image_bytes = await loop.run_in_executor(None, generate_fng_image, value, classification)
    caption = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>"

    await temp_message.delete()
    await message.answer_photo(BufferedInputFile(image_bytes, "fng.png"), caption=caption, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_halving")
@router.message(F.text == "‚è≥ –•–∞–ª–≤–∏–Ω–≥")
async def handle_halving_menu(update: Union[CallbackQuery, Message], market_data_service: MarketDataService, admin_service: AdminService):
    await admin_service.track_command_usage("‚è≥ –•–∞–ª–≤–∏–Ω–≥")
    text = await market_data_service.get_halving_info()
    markup = get_main_menu_keyboard()

    if isinstance(update, CallbackQuery):
        await safe_edit_or_send(update, text, markup)
    else:
        await update.answer(text, reply_markup=markup)


@router.callback_query(F.data == "menu_btc_status")
@router.message(F.text == "üì° –°—Ç–∞—Ç—É—Å BTC")
async def handle_btc_status_menu(update: Union[CallbackQuery, Message], market_data_service: MarketDataService, admin_service: AdminService):
    await admin_service.track_command_usage("üì° –°—Ç–∞—Ç—É—Å BTC")
    text = await market_data_service.get_btc_network_status()
    markup = get_main_menu_keyboard()
    
    if isinstance(update, CallbackQuery):
        await safe_edit_or_send(update, text, markup)
    else:
        await update.answer(text, reply_markup=markup)

@router.callback_query(F.data.startswith("price_"))
async def handle_price_callback(call: CallbackQuery, state: FSMContext, price_service: PriceService, admin_service: AdminService):
    query = call.data.split('_', 1)[1]
    
    if query == "other":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä. Aleo):")
        await state.set_state(PriceInquiry.waiting_for_ticker)
    else:
        await admin_service.track_command_usage(f"–ö—É—Ä—Å: {query.upper()}")
        await call.message.edit_text(f"‚è≥ –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å –¥–ª—è {query.upper()}...")
        await send_price_info(call.message, query, price_service)


@router.message(PriceInquiry.waiting_for_ticker)
async def process_ticker_input(message: Message, state: FSMContext, price_service: PriceService, admin_service: AdminService):
    await admin_service.track_command_usage("–ö—É—Ä—Å: –î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞")
    await state.clear()
    temp_msg = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å...")
    await send_price_info(temp_msg, message.text, price_service)

# --- –ë–õ–û–ö –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ---

@router.callback_query(F.data == "menu_calculator")
@router.message(F.text == "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def handle_calculator_menu(update: Union[CallbackQuery, Message], state: FSMContext, admin_service: AdminService):
    """–®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏."""
    await admin_service.track_command_usage("‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    text = "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>4.5</code>):"
    
    if isinstance(update, CallbackQuery):
        await safe_edit_or_send(update, text, None)
    else:
        await update.answer(text)
        
    await state.set_state(ProfitCalculator.waiting_for_electricity_cost)


@router.message(ProfitCalculator.waiting_for_electricity_cost)
async def process_electricity_cost(message: Message, state: FSMContext):
    """–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç/—ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø—É–ª–∞."""
    try:
        cost_rub = float(message.text.replace(',', '.'))
        if cost_rub < 0:
            raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        
        await state.update_data(electricity_cost_rub=cost_rub)
        await state.set_state(ProfitCalculator.waiting_for_pool_commission)
        
        await message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤–∞—à–µ–≥–æ –ø—É–ª–∞ –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1</code> –∏–ª–∏ <code>1.5</code>):")
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>4.5</code>).")
        

@router.message(ProfitCalculator.waiting_for_pool_commission)
async def process_pool_commission(message: Message, state: FSMContext, market_data_service: MarketDataService, asic_service: AsicService):
    """–®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é, —Å—á–∏—Ç–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        commission_percent = float(message.text.replace(',', '.'))
        if not (0 <= commission_percent < 100):
            raise ValueError("–ö–æ–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 99.9")
            
        await message.answer("‚è≥ –°—á–∏—Ç–∞—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")

        user_data = await state.get_data()
        cost_rub_per_kwh = user_data['electricity_cost_rub']
        
        rate_usd_rub = await market_data_service.get_usd_rub_rate()
        asics = await asic_service.get_all_cached_asics()
        
        if not asics or not rate_usd_rub:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –∏–ª–∏ ASIC. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
            
        res = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (—Ä–æ–∑–µ—Ç–∫–∞ {cost_rub_per_kwh:.2f} ‚ÇΩ, –ø—É–ª {commission_percent:.2f}%)</b>\n"]
        
        for asic in asics[:10]:
            if not asic.power: continue

            gross_income_usd = asic.profitability
            gross_income_rub = gross_income_usd * rate_usd_rub
            
            electricity_cost_day_rub = (asic.power / 1000) * 24 * cost_rub_per_kwh
            pool_fee_rub = gross_income_rub * (commission_percent / 100)
            
            net_profit_rub = gross_income_rub - electricity_cost_day_rub - pool_fee_rub

            res.append(
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"<b>{sanitize_html(asic.name)}</b>\n"
                f" –¥–æ—Ö–æ–¥: {gross_income_rub:,.0f} ‚ÇΩ\n"
                f" —Ä–æ–∑–µ—Ç–∫–∞: -{electricity_cost_day_rub:,.0f} ‚ÇΩ\n"
                f" –ø—É–ª: -{pool_fee_rub:,.0f} ‚ÇΩ\n"
                f"‚úÖ <b>–ò—Ç–æ–≥–æ: {net_profit_rub:,.0f} ‚ÇΩ/–¥–µ–Ω—å</b>"
            )

        await message.answer("\n".join(res), reply_markup=get_main_menu_keyboard())

    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1.5</code>).")
    
    await state.clear()


@router.callback_query(F.data == "menu_quiz")
@router.message(F.text == "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def handle_quiz_menu(update: Union[CallbackQuery, Message], quiz_service: QuizService, admin_service: AdminService):
    await admin_service.track_command_usage("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
    message, _ = await get_message_and_chat_id(update)
    
    if isinstance(update, CallbackQuery):
        try: await update.message.delete()
        except TelegramBadRequest: pass

    temp_message = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")

    quiz = await quiz_service.generate_quiz_question()
    if not quiz:
        await temp_message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=get_main_menu_keyboard())
        return
    
    await temp_message.delete()
    
    await message.answer_poll(
        question=quiz['question'], options=quiz['options'], type='quiz',
        correct_option_id=quiz['correct_option_index'], is_anonymous=False,
        reply_markup=get_quiz_keyboard()
    )


@router.message(
    F.content_type == ContentType.TEXT,
    lambda message: not any(entity.type == "bot_command" for entity in message.entities or [])
)
async def handle_arbitrary_text(message: Message, price_service: PriceService, bot: Bot):
    if message.chat.type == "private":
        logger.info(f"User sent text '{message.text}' in private, processing as price request.")
        temp_msg = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å...")
        await send_price_info(temp_msg, message.text, price_service)

