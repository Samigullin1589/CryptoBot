import asyncio
import logging
import re
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from bot.services.asic_service import AsicService
from bot.services.price_service import PriceService
from bot.services.news_service import NewsService
from bot.services.market_data_service import MarketDataService
from bot.services.quiz_service import QuizService
from bot.utils.helpers import sanitize_html
from bot.utils.plotting import generate_fng_image # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
from bot.utils.keyboards import (get_main_menu_keyboard, get_price_keyboard,
                                 get_quiz_keyboard)
from bot.utils.states import PriceInquiry, ProfitCalculator # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è

router = Router()
logger = logging.getLogger(__name__)

async def show_main_menu(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ (–∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–ª–±—ç–∫–∞)
        await message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    except (TypeError, AttributeError, Exception):
         # –ï—Å–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
         await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_asics")
async def handle_asics_menu(call: CallbackQuery, asic_service: AsicService):
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é...", show_alert=False)
    await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    asics = await asic_service.get_profitable_asics()
    text = "üèÜ <b>–¢–æ–ø-10 –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC:</b>\n\n"
    for miner in asics[:10]:
        text += (f"<b>{sanitize_html(miner.name)}</b>\n  –î–æ—Ö–æ–¥: <b>${miner.profitability:.2f}/–¥–µ–Ω—å</b>"
                 f"{f' | {miner.algorithm}' if miner.algorithm else ''}"
                 f"{f' | {miner.power}W' if miner.power else ''}\n")
    await call.message.edit_text(text, reply_markup=get_main_menu_keyboard())

@router.callback_query(F.data == "menu_price")
async def handle_price_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–ö—É—Ä—Å –∫–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=get_price_keyboard())
    await call.answer()

async def send_price_info(message: Message, query: str, price_service: PriceService, asic_service: AsicService):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–µ –∏ ASIC–∞—Ö."""
    coin = await price_service.get_crypto_price(query)
    if not coin:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ '{sanitize_html(query)}'.")
        return
        
    change = coin.price_change_24h or 0
    emoji = "üìà" if change >= 0 else "üìâ"
    text = (f"<b>{coin.name} ({coin.symbol})</b>\n"
            f"üíπ –ö—É—Ä—Å: <b>${coin.price:,.4f}</b>\n"
            f"{emoji} 24—á: <b>{change:.2f}%</b>\n")
            
    if coin.algorithm:
        text += f"‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <code>{coin.algorithm}</code>\n"
        relevant_asics = await asic_service.find_asics_by_algorithm(coin.algorithm)
        if relevant_asics:
            text += f"\n‚öôÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥ {coin.algorithm}:</b>\n"
            for asic in relevant_asics[:3]:
                text += f"  ‚Ä¢ <b>{sanitize_html(asic.name)}</b>: ${asic.profitability:.2f}/–¥–µ–Ω—å\n"
    await message.answer(text)

@router.callback_query(F.data.startswith("price_"))
async def handle_price_callback(call: CallbackQuery, state: FSMContext, price_service: PriceService, asic_service: AsicService):
    action = call.data.split('_')[1]
    
    if action == "other":
        await state.set_state(PriceInquiry.waiting_for_ticker)
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä. Aleo):")
    else:
        # –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç–æ–π, —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ
        await call.message.delete()
        await send_price_info(call.message, action, price_service, asic_service)
        await show_main_menu(call.message)
        
    await call.answer()

@router.message(PriceInquiry.waiting_for_ticker)
async def process_ticker_input(message: Message, state: FSMContext, price_service: PriceService, asic_service: AsicService):
    await state.clear()
    await send_price_info(message, message.text, price_service, asic_service)
    await show_main_menu(message)


@router.callback_query(F.data == "menu_news")
async def handle_news_menu(call: CallbackQuery, news_service: NewsService):
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é...", show_alert=False)
    await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
    news = await news_service.fetch_latest_news()
    if not news:
        await call.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.", reply_markup=get_main_menu_keyboard())
        return
    text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(
        [f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news])
    await call.message.edit_text(text, disable_web_page_preview=True, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_fear_greed")
async def handle_fear_greed_menu(call: CallbackQuery, market_data_service: MarketDataService):
    await call.answer("–†–∏—Å—É—é –≥—Ä–∞—Ñ–∏–∫...", show_alert=False)
    await call.message.edit_text("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω–¥–µ–∫—Å –∏ —Ä–∏—Å—É—é –≥—Ä–∞—Ñ–∏–∫...")
    index = await market_data_service.get_fear_and_greed_index()
    if not index:
        await call.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å.", reply_markup=get_main_menu_keyboard())
        return

    value, classification = int(index['value']), index['value_classification']
    
    # –í—ã–Ω–æ—Å–∏–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∫–æ–¥ –≤ executor
    loop = asyncio.get_running_loop()
    image_bytes = await loop.run_in_executor(
        None, generate_fng_image, value, classification
    )
    
    caption = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>"
    
    await call.message.delete()
    await call.message.answer_photo(BufferedInputFile(image_bytes, "fng.png"), caption=caption)
    await show_main_menu(call.message)


@router.callback_query(F.data.in_({"menu_halving", "menu_btc_status"}))
async def handle_info_callbacks(call: CallbackQuery, market_data_service: MarketDataService):
    await call.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...", show_alert=False)
    await call.message.edit_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    text = "‚ùå –û—à–∏–±–∫–∞."
    if call.data == "menu_halving":
        text = await market_data_service.get_halving_info()
    elif call.data == "menu_btc_status":
        text = await market_data_service.get_btc_network_status()

    await call.message.edit_text(text, reply_markup=get_main_menu_keyboard())

# --- FSM –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---
@router.callback_query(F.data == "menu_calculator")
async def handle_calculator_menu(call: CallbackQuery, state: FSMContext):
    await state.set_state(ProfitCalculator.waiting_for_electricity_cost)
    await call.message.edit_text("üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á:")
    await call.answer()

@router.message(ProfitCalculator.waiting_for_electricity_cost)
async def process_electricity_cost(message: Message, state: FSMContext, market_data_service: MarketDataService, asic_service: AsicService):
    await state.clear()
    try:
        cost_rub = float(message.text.replace(',', '.'))
        rate_usd_rub = await market_data_service.get_usd_rub_rate()
        cost_usd = cost_rub / rate_usd_rub
        asics = await asic_service.get_profitable_asics()
        res = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)</b>\n"]
        for asic in asics[:10]:
            if asic.power:
                profit = asic.profitability - ((asic.power / 1000) * 24 * cost_usd)
                res.append(f"<b>{sanitize_html(asic.name)}</b>: ${profit:.2f}/–¥–µ–Ω—å")
        await message.answer("\n".join(res))
        await show_main_menu(message)
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä. 4.5).")
        await show_main_menu(message)

# --- –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ---
@router.callback_query(F.data == "menu_quiz")
async def handle_quiz_menu(call: CallbackQuery, quiz_service: QuizService):
    await call.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é...", show_alert=False)
    await call.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")
    quiz = await quiz_service.generate_quiz_question()
    if not quiz:
        await call.message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=get_main_menu_keyboard())
        return
    await call.message.delete()
    await call.message.answer_poll(
        question=quiz['question'], options=quiz['options'], type='quiz',
        correct_option_id=quiz['correct_option_index'], is_anonymous=False,
        reply_markup=get_quiz_keyboard()
    )


@router.message(F.text)
async def handle_text_message(message: Message, price_service: PriceService, asic_service: AsicService):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã."""
    if message.text in ["üíπ –ö—É—Ä—Å", "‚öôÔ∏è –¢–æ–ø ASIC", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üì° –°—Ç–∞—Ç—É—Å BTC", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"]:
         return
         
    logger.info(f"User sent text '{message.text}', processing as price request.", extra={'user_id': message.from_user.id})
    await send_price_info(message, message.text, price_service, asic_service)
