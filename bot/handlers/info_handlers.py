# ===============================================================
# –§–∞–π–ª: bot/handlers/info_handlers.py (–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô FIX)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ (AttributeError).
# –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.
# ===============================================================
import asyncio
import logging
from typing import Union
from datetime import datetime, timezone
import redis.asyncio as redis

from aiogram import Bot, F, Router
from aiogram.enums import ContentType
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from bot.keyboards.keyboards import (get_main_menu_keyboard,
                                     get_price_keyboard,
                                     get_quiz_keyboard)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
from bot.services.asic_service import AsicService
from bot.services.user_service import UserService
from bot.services.market_data_service import MarketDataService
from bot.services.news_service import NewsService
from bot.services.price_service import PriceService
from bot.services.quiz_service import QuizService
from bot.services.admin_service import AdminService
from bot.utils.helpers import (get_message_and_chat_id, sanitize_html,
                                     show_main_menu)
from bot.utils.plotting import generate_fng_image
from bot.utils.states import PriceInquiry

router = Router()
logger = logging.getLogger(__name__)


# --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î –û–¢–í–ï–¢–ê ---
async def safe_edit_or_send(call: CallbackQuery, text: str, markup, delete_photo: bool = True):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç,
    –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞.
    """
    try:
        if call.message.content_type == ContentType.TEXT:
            await call.message.edit_text(text, reply_markup=markup, disable_web_page_preview=True)
        else:
            if delete_photo:
                await call.message.delete()
            await call.message.answer(text, reply_markup=markup, disable_web_page_preview=True)
    except TelegramBadRequest as e:
        logger.error(f"Error editing or sending message: {e}")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(text, reply_markup=markup, disable_web_page_preview=True)
    finally:
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await call.answer()


# --- "–ê–õ–¨–§–ê" –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –û–¢–î–ï–õ–Ø–ï–ú –õ–û–ì–ò–ö–£ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û–¢ –û–¢–ü–†–ê–í–ö–ò ---
async def format_price_info_text(query: str, price_service: PriceService) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    coin = await price_service.get_crypto_price(query)
    
    if not coin:
        return f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–∫–µ—Ä—É '{sanitize_html(query)}'.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É."

    change = coin.price_change_24h or 0
    emoji = "üìà" if change >= 0 else "üìâ"
    text = (f"<b>{coin.name} ({coin.symbol})</b>\n"
            f"üíπ –ö—É—Ä—Å: <b>${coin.price:,.4f}</b>\n"
            f"{emoji} 24—á: <b>{change:.2f}%</b>\n")
    if coin.algorithm:
        text += f"‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <code>{coin.algorithm}</code>"
    
    return text


@router.callback_query(F.data == "menu_asics")
@router.message(F.text == "‚öôÔ∏è –¢–æ–ø ASIC")
async def handle_asics_menu(update: Union[CallbackQuery, Message], asic_service: AsicService, admin_service: AdminService, user_service: UserService):
    """
    –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–¢–æ–ø ASIC" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    """
    await admin_service.track_command_usage("‚öôÔ∏è –¢–æ–ø ASIC")
    
    message, chat_id = await get_message_and_chat_id(update)
    temp_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    
    if isinstance(update, CallbackQuery) and update.message.content_type != ContentType.TEXT:
        try:
            await update.message.delete()
        except TelegramBadRequest:
            pass
    
    electricity_cost = await user_service.get_user_electricity_cost(update.from_user.id, chat_id, default_cost=0.05)
    
    top_miners, last_update_time = await asic_service.get_top_asics(count=10, electricity_cost=electricity_cost)

    if not top_miners:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        text_lines = [f"üèÜ <b>–¢–æ–ø-10 –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC</b> (—á–∏—Å—Ç—ã–º–∏, –ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á)\n"]
        for miner in top_miners:
            line = (f"<b>{sanitize_html(miner.name)}</b>\n"
                    f"   –î–æ—Ö–æ–¥: <b>${miner.profitability:.2f}/–¥–µ–Ω—å</b>"
                    f"{f' | {miner.algorithm}' if miner.algorithm and miner.algorithm != 'N/A' else ''}")
            text_lines.append(line)
        
        if last_update_time:
            now = datetime.now(timezone.utc)
            minutes_ago = int((now - last_update_time).total_seconds() / 60)
            text_lines.append(f"\n<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã {minutes_ago} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.</i>")
        
        text = "\n".join(text_lines)

    await temp_message.edit_text(text, reply_markup=get_main_menu_keyboard(), disable_web_page_preview=True)


@router.callback_query(F.data == "menu_price")
@router.message(F.text == "üíπ –ö—É—Ä—Å")
async def handle_price_menu(update: Union[CallbackQuery, Message], state: FSMContext, admin_service: AdminService):
    await admin_service.track_command_usage("üíπ –ö—É—Ä—Å")
    
    text = "–ö—É—Ä—Å –∫–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    markup = get_price_keyboard()
    
    message, _ = await get_message_and_chat_id(update)
    await message.answer(text, reply_markup=markup)
    
    await state.set_state(PriceInquiry.waiting_for_ticker)


@router.callback_query(F.data == "menu_news")
@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def handle_news_menu(update: Union[CallbackQuery, Message], news_service: NewsService, admin_service: AdminService):
    await admin_service.track_command_usage("üì∞ –ù–æ–≤–æ—Å—Ç–∏")

    message_to_edit = update.message if isinstance(update, CallbackQuery) else await update.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
    if isinstance(update, CallbackQuery):
        await safe_edit_or_send(update, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏...", None, delete_photo=False)

    news = await news_service.fetch_latest_news()
    if not news:
        await message_to_edit.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.", reply_markup=get_main_menu_keyboard())
        return
        
    text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(
        [f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news])
        
    await message_to_edit.edit_text(text, disable_web_page_preview=True, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_fear_greed")
@router.message(F.text == "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞")
async def handle_fear_greed_menu(update: Union[CallbackQuery, Message], market_data_service: MarketDataService, admin_service: AdminService):
    await admin_service.track_command_usage("üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞")
    message, _ = await get_message_and_chat_id(update)
    
    if isinstance(update, CallbackQuery):
        try:
            await update.message.delete()
        except TelegramBadRequest:
            pass

    temp_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω–¥–µ–∫—Å –∏ —Ä–∏—Å—É—é –≥—Ä–∞—Ñ–∏–∫...")

    index = await market_data_service.get_fear_and_greed_index()
    if not index:
        await temp_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å.", reply_markup=get_main_menu_keyboard())
        return

    value = int(index.get('value', 50))
    classification = index.get('value_classification', 'Neutral')
    
    loop = asyncio.get_running_loop()
    image_bytes = await loop.run_in_executor(None, generate_fng_image, value, classification)
    caption = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>"

    await temp_message.delete()
    await message.answer_photo(BufferedInputFile(image_bytes, "fng.png"), caption=caption, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_halving")
@router.message(F.text == "‚è≥ –•–∞–ª–≤–∏–Ω–≥")
async def handle_halving_menu(update: Union[CallbackQuery, Message], market_data_service: MarketDataService, admin_service: AdminService):
    await admin_service.track_command_usage("‚è≥ –•–∞–ª–≤–∏–Ω–≥")
    text = await market_data_service.get_halving_info()
    markup = get_main_menu_keyboard()

    if isinstance(update, CallbackQuery):
        await safe_edit_or_send(update, text, markup)
    else:
        await update.answer(text, reply_markup=markup)


@router.callback_query(F.data == "menu_btc_status")
@router.message(F.text == "üì° –°—Ç–∞—Ç—É—Å BTC")
async def handle_btc_status_menu(update: Union[CallbackQuery, Message], market_data_service: MarketDataService, admin_service: AdminService):
    await admin_service.track_command_usage("üì° –°—Ç–∞—Ç—É—Å BTC")
    text = await market_data_service.get_btc_network_status()
    markup = get_main_menu_keyboard()
    
    if isinstance(update, CallbackQuery):
        await safe_edit_or_send(update, text, markup)
    else:
        await update.answer(text, reply_markup=markup)

@router.callback_query(F.data.startswith("price_"))
async def handle_price_callback(call: CallbackQuery, state: FSMContext, price_service: PriceService, admin_service: AdminService):
    await state.clear()
    query = call.data.split('_', 1)[1]
    
    if query == "other":
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä. Aleo):")
        await state.set_state(PriceInquiry.waiting_for_ticker)
        await call.answer()
    else:
        await admin_service.track_command_usage(f"–ö—É—Ä—Å: {query.upper()}")
        await call.message.edit_text(f"‚è≥ –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å –¥–ª—è {query.upper()}...")
        
        response_text = await format_price_info_text(query, price_service)
        await call.message.edit_text(response_text, reply_markup=get_main_menu_keyboard())
        await call.answer()


@router.message(PriceInquiry.waiting_for_ticker)
async def process_ticker_input(message: Message, state: FSMContext, price_service: PriceService, admin_service: AdminService):
    await admin_service.track_command_usage("–ö—É—Ä—Å: –î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞")
    await state.clear()
    temp_msg = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å...")
    
    response_text = await format_price_info_text(message.text, price_service)
    await temp_msg.edit_text(response_text, reply_markup=get_main_menu_keyboard())


# --- –ë–õ–û–ö –í–ò–ö–¢–û–†–ò–ù–´ (–ò–°–ü–†–ê–í–õ–ï–ù) ---

@router.callback_query(F.data == "menu_quiz")
@router.message(F.text == "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def handle_quiz_menu(update: Union[CallbackQuery, Message], quiz_service: QuizService, admin_service: AdminService):
    await admin_service.track_command_usage("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
    message, _ = await get_message_and_chat_id(update)
    
    if isinstance(update, CallbackQuery):
        try: await update.message.delete()
        except TelegramBadRequest: pass

    temp_message = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
    question, options, correct_option_id = await quiz_service.get_random_question()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if not options:
        await temp_message.edit_text(question, reply_markup=get_main_menu_keyboard())
        return
    
    await temp_message.delete()
    
    await message.answer_poll(
        question=question, 
        options=options, 
        type='quiz',
        correct_option_id=correct_option_id, 
        is_anonymous=False,
        reply_markup=get_quiz_keyboard()
    )
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
