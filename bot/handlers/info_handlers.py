import asyncio
import logging
import re
from typing import Union

from aiogram import Bot, F, Router
from aiogram.enums import ContentType
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from bot.keyboards.keyboards import (get_main_menu_keyboard,
                                     get_price_keyboard, get_quiz_keyboard, get_after_action_keyboard)
from bot.services.asic_service import AsicService
from bot.services.market_data_service import MarketDataService
from bot.services.news_service import NewsService
from bot.services.price_service import PriceService
from bot.services.quiz_service import QuizService
from bot.utils.helpers import (get_message_and_chat_id, sanitize_html,
                               show_main_menu)
from bot.utils.plotting import generate_fng_image
from bot.utils.states import PriceInquiry, ProfitCalculator

router = Router()
logger = logging.getLogger(__name__)

async def send_price_info(message: Message, query: str, price_service: PriceService, asic_service: AsicService):
    """
    –ì–æ—Ç–æ–≤–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    coin = await price_service.get_crypto_price(query)
    
    if not coin:
        await message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ '{sanitize_html(query)}'.",
            reply_markup=get_after_action_keyboard()
        )
        return

    change = coin.price_change_24h or 0
    emoji = "üìà" if change >= 0 else "üìâ"
    text = (f"<b>{coin.name} ({coin.symbol})</b>\n"
            f"üíπ –ö—É—Ä—Å: <b>${coin.price:,.4f}</b>\n"
            f"{emoji} 24—á: <b>{change:.2f}%</b>\n")

    if coin.algorithm:
        text += f"‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <code>{coin.algorithm}</code>"
    
    await message.edit_text(text, reply_markup=get_after_action_keyboard())


@router.callback_query(F.data == "menu_asics")
@router.message(F.text == "‚öôÔ∏è –¢–æ–ø ASIC")
async def handle_asics_menu(update: Union[CallbackQuery, Message], asic_service: AsicService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª—É—á—à–∏—Ö ASIC-–º–∞–π–Ω–µ—Ä–æ–≤.
    """
    message, _ = await get_message_and_chat_id(update)
    
    if isinstance(update, CallbackQuery):
        await message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    else:
        # –í —Å–ª—É—á–∞–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")

    asics = await asic_service.get_profitable_asics()
    
    if not asics:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        text = "üèÜ <b>–¢–æ–ø-10 –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC:</b>\n\n"
        for miner in asics[:10]:
            text += (f"<b>{sanitize_html(miner.name)}</b>\n  –î–æ—Ö–æ–¥: <b>${miner.profitability:.2f}/–¥–µ–Ω—å</b>"
                     f"{f' | {miner.algorithm}' if miner.algorithm else ''}"
                     f"{f' | {miner.power}W' if miner.power else ''}\n")
    
    await message.edit_text(text, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_price")
@router.message(F.text == "üíπ –ö—É—Ä—Å")
async def handle_price_menu(update: Union[CallbackQuery, Message], state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.
    """
    message, _ = await get_message_and_chat_id(update)
    await state.clear()
    await message.edit_text("–ö—É—Ä—Å –∫–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=get_price_keyboard())


@router.callback_query(F.data == "menu_news")
@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def handle_news_menu(update: Union[CallbackQuery, Message], news_service: NewsService):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–ª–µ–Ω—Ç.
    """
    message, _ = await get_message_and_chat_id(update)
    await message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
    news = await news_service.fetch_latest_news()
    if not news:
        await message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.", reply_markup=get_main_menu_keyboard())
        return
        
    text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(
        [f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news])
        
    await message.edit_text(text, disable_web_page_preview=True, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "menu_fear_greed")
@router.message(F.text == "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞")
async def handle_fear_greed_menu(update: Union[CallbackQuery, Message], market_data_service: MarketDataService):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ò–Ω–¥–µ–∫—Å–∞ –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏.
    """
    message, _ = await get_message_and_chat_id(update)
    temp_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω–¥–µ–∫—Å –∏ —Ä–∏—Å—É—é –≥—Ä–∞—Ñ–∏–∫...")
    try:
        if isinstance(update, CallbackQuery):
            await update.message.delete()
    except TelegramBadRequest:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    index = await market_data_service.get_fear_and_greed_index()
    if not index:
        await temp_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å.", reply_markup=get_main_menu_keyboard())
        return

    value = int(index.get('value', 50))
    classification = index.get('value_classification', 'Neutral')
    
    loop = asyncio.get_running_loop()
    image_bytes = await loop.run_in_executor(None, generate_fng_image, value, classification)
    caption = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>"

    await temp_message.delete()
    await message.answer_photo(BufferedInputFile(image_bytes, "fng.png"), caption=caption, reply_markup=get_after_action_keyboard())


@router.callback_query(F.data == "menu_halving")
@router.message(F.text == "‚è≥ –•–∞–ª–≤–∏–Ω–≥")
async def handle_halving_menu(update: Union[CallbackQuery, Message], market_data_service: MarketDataService):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin.
    """
    message, _ = await get_message_and_chat_id(update)
    text = await market_data_service.get_halving_info()
    await message.answer(text, reply_markup=get_after_action_keyboard())


@router.callback_query(F.data == "menu_btc_status")
@router.message(F.text == "üì° –°—Ç–∞—Ç—É—Å BTC")
async def handle_btc_status_menu(update: Union[CallbackQuery, Message], market_data_service: MarketDataService):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏ Bitcoin.
    """
    message, _ = await get_message_and_chat_id(update)
    text = await market_data_service.get_btc_network_status()
    await message.answer(text, reply_markup=get_after_action_keyboard())


@router.callback_query(F.data.startswith("price_"))
async def handle_price_callback(call: CallbackQuery, state: FSMContext, price_service: PriceService, asic_service: AsicService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    query = call.data.split('_', 1)[1]
    
    if query == "other":
        await state.set_state(PriceInquiry.waiting_for_ticker)
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä. Aleo):")
    else:
        await call.message.edit_text(f"‚è≥ –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å –¥–ª—è {query.upper()}...")
        text = await send_price_info(call.message, query, price_service, asic_service)


@router.message(PriceInquiry.waiting_for_ticker)
async def process_ticker_input(message: Message, state: FSMContext, price_service: PriceService, asic_service: AsicService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∏–∫–µ—Ä.
    """
    await state.clear()
    temp_msg = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å...")
    # –¢–∞–∫ –∫–∞–∫ send_price_info —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –º—ã –¥–æ–ª–∂–Ω—ã –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    text_to_send = await send_price_info(temp_msg, message.text, price_service, asic_service)
    # –¢–µ–ø–µ—Ä—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await temp_msg.edit_text(text_to_send, reply_markup=get_after_action_keyboard())


@router.callback_query(F.data == "menu_calculator")
@router.message(F.text == "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def handle_calculator_menu(update: Union[CallbackQuery, Message], state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏.
    """
    message, _ = await get_message_and_chat_id(update)
    await state.set_state(ProfitCalculator.waiting_for_electricity_cost)
    await message.edit_text("üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á:")


@router.message(ProfitCalculator.waiting_for_electricity_cost)
async def process_electricity_cost(message: Message, state: FSMContext, market_data_service: MarketDataService, asic_service: AsicService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—ã–¥–∞–µ—Ç —Ä–∞—Å—á–µ—Ç.
    """
    try:
        cost_rub = float(message.text.replace(',', '.'))
        rate_usd_rub = await market_data_service.get_usd_rub_rate()
        cost_usd = cost_rub / rate_usd_rub
        asics = await asic_service.get_profitable_asics()
        res = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)</b>\n"]
        for asic in asics[:10]:
            if asic.power:
                profit = asic.profitability - ((asic.power / 1000) * 24 * cost_usd)
                res.append(f"<b>{sanitize_html(asic.name)}</b>: ${profit:.2f}/–¥–µ–Ω—å")
        await message.answer("\n".join(res))
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä. 4.5).")
    
    await state.clear()
    await show_main_menu(message)


@router.callback_query(F.data == "menu_quiz")
@router.message(F.text == "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def handle_quiz_menu(update: Union[CallbackQuery, Message], quiz_service: QuizService):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
    """
    message, _ = await get_message_and_chat_id(update)
    
    temp_message = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")
    if isinstance(update, CallbackQuery):
        try:
            await update.message.delete()
        except TelegramBadRequest:
            pass

    quiz = await quiz_service.generate_quiz_question()
    if not quiz:
        await temp_message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=get_main_menu_keyboard())
        return
    
    await temp_message.delete()
    
    await message.answer_poll(
        question=quiz['question'], options=quiz['options'], type='quiz',
        correct_option_id=quiz['correct_option_index'], is_anonymous=False,
        reply_markup=get_quiz_keyboard()
    )


@router.message(
    F.content_type == ContentType.TEXT,
    lambda message: not any(entity.type == "bot_command" for entity in message.entities or [])
)
async def handle_arbitrary_text(message: Message, price_service: PriceService, asic_service: AsicService, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã.
    """
    if message.chat.type == "private":
        logger.info(f"User sent text '{message.text}' in private, processing as price request.")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await send_price_info(message, message.text, price_service, asic_service)
        return

    bot_info = await bot.get_me()
    if bot_info.username and f"@{bot_info.username}" in message.text:
        text_to_process = re.sub(f'@{bot_info.username}', '', message.text, flags=re.IGNORECASE).strip()
        if text_to_process:
            logger.info(f"User mentioned bot in group with text '{text_to_process}', processing as price request.")
            await send_price_info(message, text_to_process, price_service, asic_service)