# ======================================================================================
# File: bot/handlers/admin/cache_handler.py
# Version: "Distinguished Engineer" ‚Äî Aug 16, 2025
# Description:
#   Admin-only cache utilities:
#     ‚Ä¢ /cache_info                         ‚Äî show cache stats & TTLs
#     ‚Ä¢ /cache_clear [coins|prices|news|all] ‚Äî purge selected caches
# ======================================================================================

from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from bot.config.settings import settings

router = Router(name="admin_cache")


def _is_admin(uid: int) -> bool:
    try:
        return uid in (settings.admin_ids or [])
    except Exception:
        return False


async def _count_scan(r, pattern: str, *, batch: int = 500) -> int:
    if not r:
        return 0
    cur = 0
    total = 0
    while True:
        cur, keys = await r.scan(cursor=cur, match=pattern, count=batch)
        total += len(keys)
        if cur == 0:
            break
    return total


@router.message(Command("cache_info"))
async def cache_info(message: Message, deps) -> None:  # deps –∏–∑ DependenciesMiddleware
    if not _is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    r = getattr(deps, "redis", None)
    if not r:
        await message.answer("Redis –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    # —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    coin_exists = await r.exists("coin:list")
    coin_ttl = await r.ttl("coin:list")

    news_exists = await r.exists("news:latest")
    news_ttl = await r.ttl("news:latest")

    price_cnt = await _count_scan(r, "price:*")
    # –ø—Ä–∏–º–µ—Ä TTL –¥–ª—è BTC/USDT
    sample_ttl = await r.ttl("price:BTC:USDT")

    lines = [
        "<b>üß∞ Cache info</b>",
        f"‚Ä¢ coin:list ‚Äî {'–µ—Å—Ç—å' if coin_exists else '–Ω–µ—Ç'}, ttl={coin_ttl}s",
        f"‚Ä¢ news:latest ‚Äî {'–µ—Å—Ç—å' if news_exists else '–Ω–µ—Ç'}, ttl={news_ttl}s",
        f"‚Ä¢ price:* ‚Äî ~{price_cnt} –∫–ª—é—á(–µ–π), ttl(BTC/USDT)={sample_ttl}s",
    ]
    await message.answer("\n".join(lines), parse_mode="HTML")


@router.message(Command("cache_clear"))
async def cache_clear(message: Message, deps) -> None:
    if not _is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    args = (message.text or "").split()
    target = args[1].lower() if len(args) > 1 else "all"

    r = getattr(deps, "redis", None)
    if not r:
        await message.answer("Redis –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    deleted = 0

    async def _del_pattern(pat: str) -> int:
        cur = 0
        total = 0
        while True:
            cur, keys = await r.scan(cursor=cur, match=pat, count=500)
            if keys:
                await r.delete(*keys)
                total += len(keys)
            if cur == 0:
                break
        return total

    if target in ("coins", "coin", "all"):
        deleted += await _del_pattern("coin:index:*")
        deleted += int(await r.delete("coin:list") or 0)

    if target in ("prices", "price", "all"):
        deleted += await _del_pattern("price:*")

    if target in ("news", "all"):
        deleted += int(await r.delete("news:latest") or 0)

    await message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: <b>{deleted}</b>", parse_mode="HTML")