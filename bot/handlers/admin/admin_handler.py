from __future__ import annotations

import contextlib
import logging

from aiogram import Router, types as tg
from aiogram.filters import Command

router = Router(name=__name__)
log = logging.getLogger(__name__)


# ---------- utils ----------


async def _resolve_target_id(bot, message: tg.Message) -> int | None:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π user_id:
      1) reply_to_message.from_user.id
      2) entity 'text_mention' (—Ç–∞–º —É–∂–µ –µ—Å—Ç—å id)
      3) –∞—Ä–≥—É–º–µ–Ω—Ç-—á–∏—Å–ª–æ (user_id)
      4) @username -> bot.get_chat('@username') (—Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —é–∑–µ—Ä –ø–∏—Å–∞–ª –±–æ—Ç—É/–≤ —á–∞—Ç–µ)
    """
    # 1) reply
    if message.reply_to_message and message.reply_to_message.from_user:
        return message.reply_to_message.from_user.id

    text = message.text or ""
    entities = message.entities or []

    # 2) text_mention
    for ent in entities:
        if ent.type == "text_mention" and ent.user:
            return ent.user.id

    # 3) number id
    parts = text.split()
    if len(parts) >= 2:
        candidate = parts[1].strip()
        if candidate.isdigit() or (
            candidate.startswith("-") and candidate[1:].isdigit()
        ):
            try:
                return int(candidate)
            except Exception:
                pass
        # 4) @username
        if candidate.startswith("@"):
            with contextlib.suppress(Exception):
                chat = await bot.get_chat(candidate)
                if chat and chat.id:
                    return chat.id

    return None


def _is_admin(user_id: int, chat_member: tg.ChatMember) -> bool:
    status = getattr(chat_member, "status", "")
    return status in ("creator", "administrator")


# ---------- commands ----------


@router.message(Command("ban"))
async def cmd_ban(m: tg.Message, **data) -> None:
    bot = m.bot
    deps = data.get("deps")
    chat = m.chat
    if not chat:
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –¥–∞–ª –∞–¥–º–∏–Ω
    member = await bot.get_chat_member(chat.id, m.from_user.id)
    if not _is_admin(m.from_user.id, member):
        await m.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±–∞–Ω–∏—Ç—å.")
        return

    target_id = await _resolve_target_id(bot, m)
    if target_id is None:
        await m.reply(
            "‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username/ID."
        )
        return

    with contextlib.suppress(Exception):
        await bot.ban_chat_member(chat_id=chat.id, user_id=target_id)

    # —Å–±—Ä–æ—Å–∏–º —Å—á—ë—Ç—á–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if getattr(deps, "security_service", None):
        with contextlib.suppress(Exception):
            await deps.security_service.pardon_user(m.from_user.id, target_id, chat.id)

    await m.reply(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_id}</code> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


@router.message(Command("unban"))
async def cmd_unban(m: tg.Message) -> None:
    bot = m.bot
    chat = m.chat
    if not chat:
        return
    member = await bot.get_chat_member(chat.id, m.from_user.id)
    if not _is_admin(m.from_user.id, member):
        await m.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        return
    target_id = await _resolve_target_id(bot, m)
    if target_id is None:
        await m.reply("–£–∫–∞–∂–∏—Ç–µ @username/ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    with contextlib.suppress(Exception):
        await bot.unban_chat_member(chat.id, target_id, only_if_banned=True)
    await m.reply(f"‚úÖ –†–∞–∑–±–∞–Ω–∏–ª <code>{target_id}</code>.")


@router.message(Command("mute"))
async def cmd_mute(m: tg.Message) -> None:
    bot = m.bot
    chat = m.chat
    if not chat:
        return
    member = await bot.get_chat_member(chat.id, m.from_user.id)
    if not _is_admin(m.from_user.id, member):
        await m.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        return

    parts = (m.text or "").split()
    minutes = 60
    if len(parts) >= 2 and parts[1].isdigit():
        minutes = max(1, int(parts[1]))
        # –¥–ª—è target —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        parts = [parts[0]] + parts[2:]
        m.text = " ".join(parts)  # —á—Ç–æ–±—ã _resolve_target_id –ø—Ä–æ—á–∏—Ç–∞–ª @username/ID

    target_id = await _resolve_target_id(bot, m)
    if target_id is None:
        await m.reply("–£–∫–∞–∂–∏—Ç–µ @username/ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    until_date = tg.utils.datetime.datetime.now(
        tg.utils.datetime.timezone.utc
    ) + tg.utils.timedelta(minutes=minutes)
    with contextlib.suppress(Exception):
        await bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=target_id,
            permissions=tg.ChatPermissions(can_send_messages=False),
            until_date=until_date,
        )
    await m.reply(
        f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_id}</code> –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {minutes} –º–∏–Ω."
    )


@router.message(Command("warn"))
async def cmd_warn(m: tg.Message, **data) -> None:
    bot = m.bot
    deps = data.get("deps")
    chat = m.chat
    if not chat:
        return
    member = await bot.get_chat_member(chat.id, m.from_user.id)
    if not _is_admin(m.from_user.id, member):
        await m.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        return
    target_id = await _resolve_target_id(bot, m)
    if target_id is None:
        await m.reply("–£–∫–∞–∂–∏—Ç–µ @username/ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    if getattr(deps, "security_service", None):
        with contextlib.suppress(Exception):
            await deps.security_service.register_violation(
                target_id, chat.id, reason="manual_warn", weight=1
            )
    await m.reply(f"‚ö†Ô∏è –í—ã–Ω–µ—Å–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ <code>{target_id}</code>.")


@router.message(Command("pardon"))
async def cmd_pardon(m: tg.Message, **data) -> None:
    bot = m.bot
    deps = data.get("deps")
    chat = m.chat
    if not chat:
        return
    member = await bot.get_chat_member(chat.id, m.from_user.id)
    if not _is_admin(m.from_user.id, member):
        await m.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        return
    target_id = await _resolve_target_id(bot, m)
    if target_id is None:
        await m.reply("–£–∫–∞–∂–∏—Ç–µ @username/ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    if getattr(deps, "security_service", None):
        with contextlib.suppress(Exception):
            await deps.security_service.pardon_user(m.from_user.id, target_id, chat.id)
    await m.reply(f"üïä –°—á—ë—Ç—á–∏–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–ª—è <code>{target_id}</code> –æ—á–∏—â–µ–Ω—ã.")
