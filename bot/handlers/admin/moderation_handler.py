# ===============================================================
# –§–∞–π–ª: bot/handlers/admin/moderation_handler.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É—é—Ç RBAC (—Ñ–∏–ª—å—Ç—Ä—ã
# —Ä–æ–ª–µ–π), –¥–µ–ª–µ–≥–∏—Ä—É—é—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –≤ ModerationService –∏ –æ—Ç–≤–µ—á–∞—é—Ç
# —Ç–æ–ª—å–∫–æ –∑–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞.
# ===============================================================
import re
import logging
from datetime import timedelta

from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from bot.services.moderation_service import ModerationService
from bot.services.ai_service import AIService
from bot.filters.access_filters import PrivilegeFilter, UserRole
from bot.utils.helpers import parse_duration, get_command_args

moderation_router = Router()
logger = logging.getLogger(__name__)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ---

@moderation_router.message(Command("ban", "–±–∞–Ω", prefix="!/"), PrivilegeFilter(min_role=UserRole.ADMIN))
async def handle_ban_user(message: types.Message, moderation_service: ModerationService):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞. –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –≤ ModerationService.
    –§–æ—Ä–º–∞—Ç—ã:
    - –í –≥—Ä—É–ø–ø–µ (–æ—Ç–≤–µ—Ç–æ–º): !ban [–ø—Ä–∏—á–∏–Ω–∞]
    - –ò–∑ –õ–° –∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ: !ban <chat_id> <user_id> [–ø—Ä–∏—á–∏–Ω–∞]
    """
    args_str = get_command_args(message.text)
    target_user_id: int | None = None
    target_chat_id: int | None = None
    reason = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞."
    spam_message_text: str | None = None

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞ {message.message_id}: {e}")

    # –†–µ–∂–∏–º –±–∞–Ω–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
        target_chat_id = message.chat.id
        spam_message_text = message.reply_to_message.text or message.reply_to_message.caption
        if args_str:
            reason = args_str
    # –†–µ–∂–∏–º –±–∞–Ω–∞ –ø–æ ID
    else:
        args = args_str.split() if args_str else []
        if len(args) < 2:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "- –í –≥—Ä—É–ø–ø–µ (–æ—Ç–≤–µ—Ç–æ–º): <code>!ban [–ø—Ä–∏—á–∏–Ω–∞]</code>\n"
                "- –ò–∑ –õ–° –∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ: <code>!ban [chat_id] [user_id] [–ø—Ä–∏—á–∏–Ω–∞]</code>",
                disable_notification=True
            )
            return
        
        chat_id_str, user_id_str = args[0], args[1]
        if not (chat_id_str.replace('-', '').isdigit() and user_id_str.isdigit()):
            await message.answer("‚ö†Ô∏è Chat ID –∏ User ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.", disable_notification=True)
            return
        
        target_chat_id, target_user_id = int(chat_id_str), int(user_id_str)
        if len(args) > 2:
            reason = " ".join(args[2:])

    # –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∞
    success, status_message = await moderation_service.ban_user(
        admin_id=message.from_user.id,
        target_user_id=target_user_id,
        target_chat_id=target_chat_id,
        reason=reason,
        spam_message_text=spam_message_text
    )
    
    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –õ–°, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –Ω–µ –∏–∑ –õ–° –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    if message.chat.type != 'private' or not success:
        try:
            await message.bot.send_message(message.from_user.id, status_message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞ –∞–¥–º–∏–Ω—É {message.from_user.id}: {e}")

@moderation_router.message(Command("warn", "–ø—Ä–µ–¥", prefix="!/"), PrivilegeFilter(min_role=UserRole.MODERATOR))
async def handle_warn_user(message: types.Message, user_service: UserService):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤—ã—à–µ)."""
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # ... –ª–æ–≥–∏–∫–∞ –≤—ã–∑–æ–≤–∞ moderation_service.warn_user(...) ...
    await message.reply("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@moderation_router.message(Command("mute", "–º—É—Ç", prefix="!/"), PrivilegeFilter(min_role=UserRole.MODERATOR))
async def handle_mute_user(message: types.Message, moderation_service: ModerationService):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤—ã—à–µ)."""
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    try:
        await message.delete()
    except Exception: pass
    
    args = get_command_args(message.text).split(maxsplit=1)
    if not args:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>!mute 30m –ü—Ä–∏—á–∏–Ω–∞</code>")
        return
        
    duration = parse_duration(args[0])
    if not duration:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'm', 'h', 'd'. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>30m</code>, <code>2h</code>, <code>1d</code>.")
        return
        
    reason = args[1] if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."
    
    success, status_message = await moderation_service.mute_user(
        admin_id=message.from_user.id,
        target_user_id=message.reply_to_message.from_user.id,
        chat_id=message.chat.id,
        duration=duration,
        reason=reason
    )
    
    if not success:
        await message.answer(f"‚ùå {status_message}")


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ---

@moderation_router.message(Command("add_stop_word", prefix="!/"), PrivilegeFilter(min_role=UserRole.ADMIN))
async def handle_add_stop_word(message: types.Message, ai_service: AIService):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç."""
    word = get_command_args(message.text).lower().strip()
    if not word:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>!add_stop_word –∫–∞–∑–∏–Ω–æ</code>")
        return
        
    success = await ai_service.add_stop_word(word)
    if success:
        await message.reply(f"‚úÖ –°–ª–æ–≤–æ '<code>{word}</code>' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç.")
    else:
        await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<code>{word}</code>' —É–∂–µ –±—ã–ª–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")

@moderation_router.message(Command("del_stop_word", prefix="!/"), PrivilegeFilter(min_role=UserRole.ADMIN))
async def handle_delete_stop_word(message: types.Message, ai_service: AIService):
    """–£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞."""
    word = get_command_args(message.text).lower().strip()
    if not word:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
        
    success = await ai_service.remove_stop_word(word)
    if success:
        await message.reply(f"‚úÖ –°–ª–æ–≤–æ '<code>{word}</code>' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<code>{word}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")

@moderation_router.message(Command("list_stop_words", prefix="!/"), PrivilegeFilter(min_role=UserRole.ADMIN))
async def handle_list_stop_words(message: types.Message, ai_service: AIService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–ø-–ª–∏—Å—Ç."""
    words = await ai_service.get_all_stop_words()
    if not words:
        await message.reply("üö´ –°—Ç–æ–ø-–ª–∏—Å—Ç –ø—É—Å—Ç.")
        return
        
    text = "üìú –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞:\n\n" + "\n".join([f"‚Ä¢ <code>{word}</code>" for word in sorted(words)])
    await message.reply(text)
