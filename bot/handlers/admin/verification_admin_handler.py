# bot/handlers/admin/verification_admin_handler.py
# –í–µ—Ä—Å–∏—è: 1.0.0 (28.10.2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.config.settings import settings
from bot.utils.dependencies import Deps

logger = logging.getLogger(__name__)

router = Router(name="verification_admin")


# ====================== FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ======================

class VerificationStates(StatesGroup):
    waiting_username = State()
    waiting_deposit_amount = State()


# ====================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======================

def get_verification_menu_kb(user_id: int) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"verify_user:{user_id}")],
        [InlineKeyboardButton(text="‚ùå –°–Ω—è—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data=f"unverify_user:{user_id}")],
        [InlineKeyboardButton(text="üìù –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç", callback_data=f"verify_passport:{user_id}")],
        [InlineKeyboardButton(text="üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç", callback_data=f"set_deposit:{user_id}")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="admin_menu")],
    ])


def get_confirm_verification_kb(user_id: int) -> InlineKeyboardMarkup:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"confirm_verify:{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"verify_menu:{user_id}")
        ]
    ])


def get_confirm_unverify_kb(user_id: int) -> InlineKeyboardMarkup:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —Å–Ω—è—Ç—å", callback_data=f"confirm_unverify:{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"verify_menu:{user_id}")
        ]
    ])


# ====================== –ö–æ–º–∞–Ω–¥—ã ======================

@router.message(Command("verify"))
async def cmd_verify(message: Message, state: FSMContext, deps: Deps):
    """
    /verify @username - –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    if not message.from_user or message.from_user.id not in settings.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await state.set_state(VerificationStates.waiting_username)
        await message.answer(
            "üë§ –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ @username\n"
            "‚Ä¢ 123456789"
        )
        return
    
    target = args[1].strip().lstrip("@")
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_service = deps.user_service
    user = None
    
    if target.isdigit():
        user = await user_service.get_user(int(target))
    else:
        user = await user_service.get_user_by_username(target)
    
    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    vd = user.verification_data
    status = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if vd.is_verified else "‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    passport = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω" if vd.passport_verified else "‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
    deposit = f"${vd.deposit:,.0f}".replace(",", " ") if vd.deposit > 0 else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    text = (
        f"<b>üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}\n"
        f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>ID:</b> <code>{user.id}</code>\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n"
        f"‚Ä¢ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {status}\n"
        f"‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç: {passport}\n"
        f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: {deposit}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(text, reply_markup=get_verification_menu_kb(user.id), parse_mode="HTML")


# ====================== FSM Handlers ======================

@router.message(VerificationStates.waiting_username, F.text)
async def process_username_input(message: Message, state: FSMContext, deps: Deps):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ username"""
    target = message.text.strip().lstrip("@")
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = None
    if target.isdigit():
        user = await deps.user_service.get_user(int(target))
    else:
        user = await deps.user_service.get_user_by_username(target)
    
    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel")
        return
    
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    vd = user.verification_data
    status = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if vd.is_verified else "‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    passport = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω" if vd.passport_verified else "‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
    deposit = f"${vd.deposit:,.0f}".replace(",", " ") if vd.deposit > 0 else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    text = (
        f"<b>üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}\n"
        f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>ID:</b> <code>{user.id}</code>\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n"
        f"‚Ä¢ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {status}\n"
        f"‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç: {passport}\n"
        f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: {deposit}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(text, reply_markup=get_verification_menu_kb(user.id), parse_mode="HTML")


@router.message(VerificationStates.waiting_deposit_amount, F.text)
async def process_deposit_amount(message: Message, state: FSMContext, deps: Deps):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞"""
    data = await state.get_data()
    user_id = data.get("user_id")
    
    if not user_id:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
    try:
        amount_str = message.text.strip().replace(" ", "").replace(",", "")
        amount = float(amount_str)
        
        if amount < 0:
            await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000):")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
    success = await deps.verification_service.update_deposit(user_id, amount)
    
    if success:
        await message.answer(
            f"‚úÖ <b>–î–µ–ø–æ–∑–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–°—É–º–º–∞: <b>${amount:,.0f}</b>".replace(",", " "),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–ø–æ–∑–∏—Ç–∞.")
    
    await state.clear()


# ====================== Callback Handlers ======================

@router.callback_query(F.data.startswith("verify_menu:"))
async def show_verification_menu(callback: CallbackQuery, deps: Deps):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = int(callback.data.split(":")[1])
    
    user = await deps.user_service.get_user(user_id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    vd = user.verification_data
    status = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if vd.is_verified else "‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    passport = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω" if vd.passport_verified else "‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
    deposit = f"${vd.deposit:,.0f}".replace(",", " ") if vd.deposit > 0 else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    text = (
        f"<b>üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}\n"
        f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>ID:</b> <code>{user.id}</code>\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n"
        f"‚Ä¢ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {status}\n"
        f"‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç: {passport}\n"
        f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: {deposit}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(text, reply_markup=get_verification_menu_kb(user.id), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("verify_user:"))
async def ask_confirm_verify(callback: CallbackQuery, deps: Deps):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = int(callback.data.split(":")[1])
    
    user = await deps.user_service.get_user(user_id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = (
        f"<b>‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}\n"
        f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>ID:</b> <code>{user.id}</code>"
    )
    
    await callback.message.edit_text(text, reply_markup=get_confirm_verification_kb(user.id), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_verify:"))
async def confirm_verify(callback: CallbackQuery, deps: Deps):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = int(callback.data.split(":")[1])
    
    # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
    success = await deps.verification_service.set_verification_status(
        user_id=user_id,
        is_verified=True,
        passport_verified=True
    )
    
    if success:
        user = await deps.user_service.get_user(user_id)
        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}\n"
            f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>ID:</b> <code>{user_id}</code>",
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    
    await callback.answer()


@router.callback_query(F.data.startswith("unverify_user:"))
async def ask_confirm_unverify(callback: CallbackQuery, deps: Deps):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–Ω—è—Ç–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = int(callback.data.split(":")[1])
    
    user = await deps.user_service.get_user(user_id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = (
        f"<b>‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é?\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}\n"
        f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>ID:</b> <code>{user.id}</code>"
    )
    
    await callback.message.edit_text(text, reply_markup=get_confirm_unverify_kb(user.id), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_unverify:"))
async def confirm_unverify(callback: CallbackQuery, deps: Deps):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = int(callback.data.split(":")[1])
    
    # –°–Ω–∏–º–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    success = await deps.verification_service.set_verification_status(
        user_id=user_id,
        is_verified=False,
        passport_verified=False
    )
    
    if success:
        user = await deps.user_service.get_user(user_id)
        await callback.message.edit_text(
            f"‚úÖ <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–Ω—è—Ç–∞!</b>\n\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}\n"
            f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>ID:</b> <code>{user_id}</code>",
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    
    await callback.answer()


@router.callback_query(F.data.startswith("verify_passport:"))
async def verify_passport_only(callback: CallbackQuery, deps: Deps):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–±–µ–∑ –ø–æ–ª–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
    user_id = int(callback.data.split(":")[1])
    
    user = await deps.user_service.get_user(user_id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Å–ø–æ—Ä—Ç
    success = await deps.verification_service.set_verification_status(
        user_id=user_id,
        is_verified=user.verification_data.is_verified,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        passport_verified=True
    )
    
    if success:
        await callback.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await show_verification_menu(callback, deps)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞", show_alert=True)


@router.callback_query(F.data.startswith("set_deposit:"))
async def start_set_deposit(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    user_id = int(callback.data.split(":")[1])
    
    await state.set_state(VerificationStates.waiting_deposit_amount)
    await state.update_data(user_id=user_id)
    
    await callback.message.edit_text(
        f"üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ USD:\n\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 5000</i>",
        parse_mode="HTML"
    )
    await callback.answer()