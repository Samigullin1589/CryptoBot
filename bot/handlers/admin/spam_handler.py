# ===============================================================
# –§–∞–π–ª: bot/handlers/admin/spam_handler.py (–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô FIX)
# –û–ø–∏—Å–∞–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ !warn. –£–ª—É—á—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ !ban.
# –ö–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç "–ê–ª—å—Ñ–∞" —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
# ===============================================================
import re
import logging
from datetime import timedelta, datetime

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, ChatPermissions

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ DI
from bot.services.user_service import UserService
from bot.services.ai_service import AIService
from bot.services.admin_service import AdminService
from bot.filters.admin_filter import IsAdminFilter
from bot.utils.helpers import sanitize_html

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ –±–æ—Ä—å–±–µ —Å–æ —Å–ø–∞–º–æ–º
admin_spam_router = Router()

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ:
# 1. –û–Ω–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.
# 2. –û–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.
admin_spam_router.message.filter(
    F.chat.type.in_({'group', 'supergroup'}),
    IsAdminFilter()
)

def parse_duration(text: str) -> timedelta | None:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "30m", "1h", "2d") –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç timedelta.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.
    """
    match = re.match(r"(\d+)([mhd])", text.lower())
    if not match:
        return None
    
    value, unit = int(match.group(1)), match.group(2)
    
    if unit == 'm':
        return timedelta(minutes=value)
    elif unit == 'h':
        return timedelta(hours=value)
    elif unit == 'd':
        return timedelta(days=value)
    return None

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---

@admin_spam_router.message(Command("ban", "–±–∞–Ω", prefix="!/"))
async def handle_ban_user(message: Message, bot: Bot, user_service: UserService, ai_service: AIService, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã !ban. –ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.
    """
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å.")
        return

    target_user = message.reply_to_message.from_user
    spam_message = message.reply_to_message
    
    try:
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=target_user.id)
        await user_service.update_user_status(user_id=target_user.id, chat_id=message.chat.id, is_banned=True)
        await ai_service.learn_from_spam(spam_message)
        
        await spam_message.delete()
        await message.delete()

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–∞–Ω–∞ ---
        await message.answer_photo(
            photo="https://placehold.co/1280x720/ef4444/ffffff?text=BANNED&font=impact",
            caption=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sanitize_html(target_user.full_name)} –∑–∞–±–∞–Ω–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º—ã."
        )
        await admin_service.track_command_usage("!ban")

    except Exception as e:
        logger.error(f"Failed to ban user {target_user.id}: {e}")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}")


# --- –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ---
@admin_spam_router.message(Command("warn", "–ø—Ä–µ–¥", prefix="!/"))
async def handle_warn_user(message: Message, user_service: UserService, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã !warn. –í—ã–Ω–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Å–Ω–∏–∂–∞–µ—Ç –µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è.
    """
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user = message.reply_to_message.from_user
    admin_user = message.from_user
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        await user_service.log_violation(
            user_id=target_user.id, 
            chat_id=message.chat.id,
            reason=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_user.full_name} (ID: {admin_user.id})",
            penalty=10 # –°–Ω–∏–º–∞–µ–º 10 –æ—á–∫–æ–≤ –∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        updated_profile = await user_service.get_or_create_user(target_user.id, message.chat.id)
        
        await message.reply_to_message.delete()
        await message.delete()

        await message.answer(
            f"‚ùóÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {sanitize_html(admin_user.full_name)} –≤—ã–Ω–µ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sanitize_html(target_user.full_name)}.\n"
            f"üìâ –ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è: <b>{updated_profile.trust_score}/100</b>."
        )
        await admin_service.track_command_usage("!warn")

    except Exception as e:
        logger.error(f"Failed to warn user {target_user.id}: {e}")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –ö–û–ú–ê–ù–î–´ ---


@admin_spam_router.message(Command("mute", "–º—É—Ç", prefix="!/"))
async def handle_mute_user(message: Message, bot: Bot, user_service: UserService, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã !mute. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    """
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å.")
        return

    command_args = message.text.split()
    if len(command_args) < 2:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>!mute 30m</code> –∏–ª–∏ <code>!mute 1h</code>.")
        return
        
    duration = parse_duration(command_args[1])
    if not duration:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'm' –¥–ª—è –º–∏–Ω—É—Ç, 'h' –¥–ª—è —á–∞—Å–æ–≤, 'd' –¥–ª—è –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30m, 2h, 1d).")
        return

    target_user = message.reply_to_message.from_user
    mute_end_timestamp = datetime.now() + duration

    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(), # –ü—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∞ = –ø–æ–ª–Ω—ã–π –º—É—Ç
            until_date=mute_end_timestamp
        )
        
        await user_service.update_user_mute(user_id=target_user.id, chat_id=message.chat.id, mute_until=mute_end_timestamp.timestamp())
        
        await message.reply_to_message.delete()
        await message.delete()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sanitize_html(target_user.full_name)} –∑–∞–º—É—á–µ–Ω –¥–æ {mute_end_timestamp.strftime('%Y-%m-%d %H:%M:%S')}.")
        await admin_service.track_command_usage("!mute")

    except Exception as e:
        logger.error(f"Failed to mute user {target_user.id}: {e}")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}")


@admin_spam_router.message(Command("unmute", "—Ä–∞–∑–º—É—Ç", prefix="!/"))
async def handle_unmute_user(message: Message, bot: Bot, user_service: UserService, admin_service: AdminService):
    """
    –°–Ω–∏–º–∞–µ—Ç –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user = message.reply_to_message.from_user
    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=ChatPermissions(can_send_messages=True)
        )
        await user_service.update_user_mute(user_id=target_user.id, chat_id=message.chat.id, mute_until=0)
        await message.delete()
        await message.answer(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sanitize_html(target_user.full_name)} —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")
        await admin_service.track_command_usage("!unmute")
    except Exception as e:
        logger.error(f"Failed to unmute user {target_user.id}: {e}")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –û—à–∏–±–∫–∞: {e}")


# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π ---

@admin_spam_router.message(Command("add_stop_word", prefix="!/"))
async def handle_add_stop_word(message: Message, ai_service: AIService, admin_service: AdminService):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AI-—Å–µ—Ä–≤–∏—Å.
    """
    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>!add_stop_word –∫–∞–∑–∏–Ω–æ</code>")
        return
        
    word = command_args[1].lower().strip()
    success = await ai_service.add_stop_word(word)
    
    if success:
        await message.reply(f"‚úÖ –°–ª–æ–≤–æ '<code>{word}</code>' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç.")
    else:
        await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<code>{word}</code>' —É–∂–µ –±—ã–ª–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")
    await admin_service.track_command_usage("!add_stop_word")


@admin_spam_router.message(Command("del_stop_word", prefix="!/"))
async def handle_delete_stop_word(message: Message, ai_service: AIService, admin_service: AdminService):
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.")
        return
        
    word = command_args[1].lower().strip()
    success = await ai_service.remove_stop_word(word)

    if success:
        await message.reply(f"‚úÖ –°–ª–æ–≤–æ '<code>{word}</code>' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞.")
    else:
        await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<code>{word}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")
    await admin_service.track_command_usage("!del_stop_word")


@admin_spam_router.message(Command("list_stop_words", prefix="!/"))
async def handle_list_stop_words(message: Message, ai_service: AIService, admin_service: AdminService):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤.
    """
    words = await ai_service.get_all_stop_words()
    if not words:
        await message.reply("üö´ –°—Ç–æ–ø-–ª–∏—Å—Ç –ø—É—Å—Ç.")
        return
        
    text = "üìú –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞:\n\n" + "\n".join([f"‚Ä¢ <code>{word}</code>" for word in words])
    await message.reply(text)
    await admin_service.track_command_usage("!list_stop_words")
