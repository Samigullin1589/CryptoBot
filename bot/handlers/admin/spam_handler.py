# ===============================================================
# –§–∞–π–ª: bot/handlers/admin/spam_handler.py (v4 - –§–∏–Ω–∞–ª—å–Ω–∞—è)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ï–¥–∏–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞.
# –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å "!" –∏ –æ–±–ª–∞–¥–∞—é—Ç –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.
# ===============================================================
import re
import logging
from datetime import timedelta, datetime

from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest

from bot.services.user_service import UserService
from bot.services.ai_service import AIService
from bot.filters.admin_filter import IsAdminFilter
from bot.utils.helpers import sanitize_html

admin_spam_router = Router()
logger = logging.getLogger(__name__)

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ:
# 1. –û–Ω–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.
# 2. –û–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.
admin_spam_router.message.filter(
    F.chat.type.in_({'group', 'supergroup'}),
    IsAdminFilter()
)

def parse_duration(text: str) -> timedelta | None:
    match = re.match(r"(\d+)([mhd])", text.lower())
    if not match:
        return None
    value, unit = int(match.group(1)), match.group(2)
    if unit == 'm': return timedelta(minutes=value)
    if unit == 'h': return timedelta(hours=value)
    if unit == 'd': return timedelta(days=value)
    return None

# --- –•–ï–ù–î–õ–ï–†–´ –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò –ò –ê–ù–¢–ò–°–ü–ê–ú–ê ---

@admin_spam_router.message(Command("ban", "–±–∞–Ω", prefix="!/"))
async def handle_ban_user(message: types.Message, bot: Bot, user_service: UserService, ai_service: AIService):
    """
    –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞: –±–∞–Ω–∏—Ç, —É–¥–∞–ª—è–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±—É—á–∞–µ—Ç AI, —É–≤–µ–¥–æ–º–ª—è–µ—Ç.
    """
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.")
        return

    # --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
    target_user = message.reply_to_message.from_user
    spam_message_to_learn = message.reply_to_message
    admin_user = message.from_user
    reason = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞."
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        reason = args[1]

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏ ---
    try:
        target_member = await bot.get_chat_member(message.chat.id, target_user.id)
        if target_member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await message.reply("üòÖ –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞.")
            return
    except TelegramBadRequest:
        pass # OK

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
    try:
        # 1. –ë–∞–Ω —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.ban_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            revoke_messages=True
        )
        
        # 2. –û–±—É—á–µ–Ω–∏–µ AI –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await ai_service.learn_from_spam(spam_message_to_learn)
        
        # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –Ω–∞—à–µ–π –ë–î
        await user_service.update_user_status(user_id=target_user.id, chat_id=message.chat.id, is_banned=True)
        logger.info(f"Admin {admin_user.id} banned {target_user.id} and revoked all messages. Reason: {reason}")
        
        # 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° (–ø–æ–ø—ã—Ç–∫–∞)
        try:
            chat_info = await bot.get_chat(message.chat.id)
            notification_text = (
                f"‚ùóÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —á–∞—Ç–µ ¬´<b>{sanitize_html(chat_info.title)}</b>¬ª.\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}"
            )
            await bot.send_message(target_user.id, notification_text)
        except Exception as e:
            logger.warning(f"Failed to notify user {target_user.id} about ban: {e}")

        # 5. –ü—É–±–ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        target_link = f"<a href='tg://user?id={target_user.id}'>{sanitize_html(target_user.full_name)}</a>"
        public_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_link} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}\n\n"
            "<i>–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É–¥–∞–ª–µ–Ω—ã.</i>"
        )
        await bot.send_message(message.chat.id, public_text)

        # 6. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.delete()

    except Exception as e:
        logger.error(f"Failed to ban user {target_user.id}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}")

@admin_spam_router.message(Command("unban", "—Ä–∞–∑–±–∞–Ω", prefix="!/"))
async def handle_unban_user(message: types.Message, bot: Bot):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–±–∞–Ω–∞. –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ ID –∏–ª–∏ –ø–æ –æ—Ç–≤–µ—Ç—É.
    """
    target_id = None
    if message.reply_to_message:
        target_id = message.reply_to_message.from_user.id
    else:
        args = message.text.split()
        if len(args) > 1 and args[1].isdigit():
            target_id = int(args[1])
    
    if not target_id:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ <code>!unban [user_id]</code>.")
        return
        
    try:
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=target_id)
        logger.info(f"Admin {message.from_user.id} unbanned user {target_id} in chat {message.chat.id}")
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_id}</code> –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except TelegramBadRequest as e:
        if "user not found" in e.message:
            await message.reply("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
        else:
            logger.error(f"Failed to unban user: {e}")
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–∞–∑–±–∞–Ω–∞: {e.message}")
    except Exception as e:
        logger.error(f"An unexpected error occurred in unban_user: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")


@admin_spam_router.message(Command("warn", "–ø—Ä–µ–¥", prefix="!/"))
async def handle_warn_user(message: types.Message, bot: Bot, user_service: UserService):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user = message.reply_to_message.from_user
    admin_user = message.from_user
    reason = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        reason = args[1]
    
    try:
        penalty = 15
        await user_service.log_violation(
            user_id=target_user.id, 
            chat_id=message.chat.id,
            reason=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç {admin_user.id}: {reason}",
            penalty=penalty
        )
        updated_profile = await user_service.get_user_profile(target_user.id, message.chat.id)
        
        admin_link = f"<a href='tg://user?id={admin_user.id}'>{sanitize_html(admin_user.full_name)}</a>"
        target_link = f"<a href='tg://user?id={target_user.id}'>{sanitize_html(target_user.full_name)}</a>"
        
        public_text = (
            f"‚ùóÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_link} –≤—ã–Ω–µ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_link}.\n\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}\n"
            f"üìâ –†–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è —Å–Ω–∏–∂–µ–Ω. –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{updated_profile.trust_score}</b>."
        )
        
        await message.reply_to_message.delete()
        await message.delete()
        await bot.send_message(message.chat.id, public_text)
        logger.info(f"Admin {admin_user.id} warned {target_user.id}. Reason: {reason}")
        
    except Exception as e:
        logger.error(f"Failed to warn user {target_user.id}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")

@admin_spam_router.message(Command("mute", "–º—É—Ç", prefix="!/"))
async def handle_mute_user(message: types.Message, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 2:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>!mute 30m –ü—Ä–∏—á–∏–Ω–∞</code>")
        return
        
    duration = parse_duration(args[1])
    if not duration:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'm', 'h', 'd'.")
        return

    reason = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."
    if len(args) > 2:
        reason = args[2]

    target_user = message.reply_to_message.from_user
    admin_user = message.from_user
    mute_end_timestamp = datetime.now() + duration

    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=types.ChatPermissions(),
            until_date=mute_end_timestamp
        )
        
        admin_link = f"<a href='tg://user?id={admin_user.id}'>{sanitize_html(admin_user.full_name)}</a>"
        target_link = f"<a href='tg://user?id={target_user.id}'>{sanitize_html(target_user.full_name)}</a>"

        public_text = (
            f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_link} –±—ã–ª –∑–∞–º—É—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_link} –¥–æ {mute_end_timestamp.strftime('%Y-%m-%d %H:%M')}.\n\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}"
        )

        await message.reply_to_message.delete()
        await message.delete()
        await bot.send_message(message.chat.id, public_text)
        logger.info(f"Admin {admin_user.id} muted {target_user.id} for {duration}. Reason: {reason}")

    except Exception as e:
        logger.error(f"Failed to mute user {target_user.id}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}")

@admin_spam_router.message(Command("unmute", "—Ä–∞–∑–º—É—Ç", prefix="!/"))
async def handle_unmute_user_command(message: types.Message, bot: Bot, user_service: UserService):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user = message.reply_to_message.from_user
    try:
        chat = await bot.get_chat(message.chat.id)
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=chat.permissions
        )
        await user_service.update_user_mute(user_id=target_user.id, chat_id=message.chat.id, mute_until=0)
        await message.delete()
        await message.answer(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sanitize_html(target_user.full_name)} —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"Failed to unmute user {target_user.id}: {e}")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –û—à–∏–±–∫–∞: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏ ---
@admin_spam_router.message(Command("add_stop_word", prefix="!/"))
async def handle_add_stop_word(message: types.Message, ai_service: AIService):
    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>!add_stop_word –∫–∞–∑–∏–Ω–æ</code>")
        return
    word = command_args[1].lower().strip()
    success = await ai_service.add_stop_word(word)
    if success:
        await message.reply(f"‚úÖ –°–ª–æ–≤–æ '<code>{word}</code>' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç.")
    else:
        await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<code>{word}</code>' —É–∂–µ –±—ã–ª–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")

@admin_spam_router.message(Command("del_stop_word", prefix="!/"))
async def handle_delete_stop_word(message: types.Message, ai_service: AIService):
    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    word = command_args[1].lower().strip()
    success = await ai_service.remove_stop_word(word)
    if success:
        await message.reply(f"‚úÖ –°–ª–æ–≤–æ '<code>{word}</code>' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<code>{word}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")

@admin_spam_router.message(Command("list_stop_words", prefix="!/"))
async def handle_list_stop_words(message: types.Message, ai_service: AIService):
    words = await ai_service.get_all_stop_words()
    if not words:
        await message.reply("üö´ –°—Ç–æ–ø-–ª–∏—Å—Ç –ø—É—Å—Ç.")
        return
    text = "üìú –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞:\n\n" + "\n".join([f"‚Ä¢ <code>{word}</code>" for word in words])
    await message.reply(text)
