# ===============================================================
# –§–∞–π–ª: bot/handlers/admin/spam_handler.py (v7 - –§–∏–∫—Å —É–¥–∞–ª–µ–Ω–∏—è)
# –û–ø–∏—Å–∞–Ω–∏–µ: –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
# —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å race condition.
# ===============================================================
import re
import logging
from datetime import timedelta, datetime

from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest

from bot.services.user_service import UserService
from bot.services.ai_service import AIService
from bot.filters.admin_filter import IsAdminFilter
from bot.utils.helpers import sanitize_html

admin_spam_router = Router()
logger = logging.getLogger(__name__)

# –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
def parse_duration(text: str) -> timedelta | None:
    match = re.match(r"(\d+)([mhd])", text.lower())
    if not match: return None
    value, unit = int(match.group(1)), match.group(2)
    if unit == 'm': return timedelta(minutes=value)
    if unit == 'h': return timedelta(hours=value)
    if unit == 'd': return timedelta(days=value)
    return None

@admin_spam_router.message(Command("ban", "–±–∞–Ω", prefix="!/"), IsAdminFilter())
async def handle_ban_user(message: types.Message, bot: Bot, user_service: UserService, ai_service: AIService):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞.
    - –í –≥—Ä—É–ø–ø–µ (–æ—Ç–≤–µ—Ç–æ–º): !ban [–ø—Ä–∏—á–∏–Ω–∞]
    - –ò–∑ –õ–° –∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ: !ban <chat_id> <user_id> [–ø—Ä–∏—á–∏–Ω–∞]
    """
    admin_user = message.from_user
    target_user_id: int | None = None
    target_chat_id: int | None = None
    reason = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞."
    spam_message_to_learn: types.Message | None = None

    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã ---
    if message.reply_to_message and message.chat.type != 'private':
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞ >>>
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"Could not delete admin's command message {message.message_id}: {e}")
            try:
                await bot.send_message(admin_user.id, f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É <code>!ban</code> –≤ —á–∞—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, —É –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
            except Exception:
                pass # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
        # <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø >>>

        target_user_id = message.reply_to_message.from_user.id
        target_chat_id = message.chat.id
        spam_message_to_learn = message.reply_to_message
        args = message.text.split(maxsplit=1)
        if len(args) > 1: reason = args[1]

    else: # –†–µ–∂–∏–º –±–∞–Ω–∞ –∏–∑ –õ–°
        args = message.text.split()[1:]
        if len(args) < 2:
            await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n- –í –≥—Ä—É–ø–ø–µ (–æ—Ç–≤–µ—Ç–æ–º): <code>!ban [–ø—Ä–∏—á–∏–Ω–∞]</code>\n- –ò–∑ –õ–°: <code>!ban [chat_id] [user_id] [–ø—Ä–∏—á–∏–Ω–∞]</code>")
            return
        chat_id_str, user_id_str = args[0], args[1]
        if not (chat_id_str.replace('-', '').isdigit() and user_id_str.isdigit()):
            await message.reply("‚ö†Ô∏è Chat ID –∏ User ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return
        target_chat_id, target_user_id = int(chat_id_str), int(user_id_str)
        if len(args) > 2: reason = " ".join(args[2:])

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ ---
    try:
        bot_member = await bot.get_chat_member(target_chat_id, bot.id)
        if not bot_member.status == ChatMemberStatus.ADMINISTRATOR or not bot_member.can_restrict_members:
            await message.reply(f"‚ùå –Ø –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ <code>{target_chat_id}</code> –∏–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤–∞ –±–∞–Ω–∏—Ç—å.")
            return
        can_delete = bot_member.can_delete_messages
    except Exception as e:
        logger.error(f"Could not get bot status in chat {target_chat_id}: {e}")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ <code>{target_chat_id}</code>.")
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏ ---
    try:
        target_member = await bot.get_chat_member(target_chat_id, target_user_id)
        if target_member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await message.reply("üòÖ –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞.")
            return
    except TelegramBadRequest as e:
        if "user not found" in e.message.lower(): pass
        else: raise e

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    try:
        await bot.ban_chat_member(chat_id=target_chat_id, user_id=target_user_id, revoke_messages=True)
        
        if spam_message_to_learn: await ai_service.learn_from_spam(spam_message_to_learn)
        
        await user_service.update_user_status(user_id=target_user_id, chat_id=target_chat_id, is_banned=True)
        logger.info(f"Admin {admin_user.id} banned {target_user_id} in chat {target_chat_id}. Reason: {reason}")
        
        try:
            chat_info = await bot.get_chat(target_chat_id)
            await bot.send_message(target_user_id, f"‚ùóÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —á–∞—Ç–µ ¬´<b>{sanitize_html(chat_info.title)}</b>¬ª.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}")
        except Exception:
            logger.warning(f"Failed to notify user {target_user_id} about ban.")

        try:
            user_info = await bot.get_chat(target_user_id)
            target_link = f"<a href='tg://user?id={user_info.id}'>{sanitize_html(user_info.full_name or f'User {user_info.id}')}</a>"
        except Exception:
            target_link = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_user_id}</code>"
        
        if can_delete:
            deletion_info = "<i>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.</i>"
        else:
            deletion_info = "<i>–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ —á–∞—Ç–µ.</i>"

        public_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_link} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}\n\n"
            f"{deletion_info}"
        )
        await bot.send_message(target_chat_id, public_text)

        if message.chat.type == 'private':
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_user_id}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ <code>{target_chat_id}</code>.")

    except Exception as e:
        logger.error(f"Failed to ban user {target_user_id}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}")

# --- –û–°–¢–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ (–†–ê–ë–û–¢–ê–Æ–¢ –¢–û–õ–¨–ö–û –í –ì–†–£–ü–ü–ê–•) ---
GROUP_ONLY_FILTER = F.chat.type.in_({'group', 'supergroup'})

@admin_spam_router.message(Command("unban", "—Ä–∞–∑–±–∞–Ω", prefix="!/"), IsAdminFilter(), GROUP_ONLY_FILTER)
async def handle_unban_user(message: types.Message, bot: Bot):
    target_id = None
    if message.reply_to_message:
        target_id = message.reply_to_message.from_user.id
    else:
        args = message.text.split()
        if len(args) > 1 and args[1].isdigit():
            target_id = int(args[1])
    if not target_id:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ <code>!unban [user_id]</code>.")
        return
    try:
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=target_id)
        logger.info(f"Admin {message.from_user.id} unbanned user {target_id} in chat {message.chat.id}")
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_id}</code> –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except TelegramBadRequest as e:
        if "user not found" in e.message:
            await message.reply("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e.message}")

@admin_spam_router.message(Command("warn", "–ø—Ä–µ–¥", prefix="!/"), IsAdminFilter(), GROUP_ONLY_FILTER)
async def handle_warn_user_command(message: types.Message, bot: Bot, user_service: UserService):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    try:
        await message.delete()
    except Exception: pass

    target_user, admin_user = message.reply_to_message.from_user, message.from_user
    reason = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."
    args = message.text.split(maxsplit=1)
    if len(args) > 1: reason = args[1]
    await user_service.log_violation(user_id=target_user.id, chat_id=message.chat.id, reason=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç {admin_user.id}: {reason}", penalty=15)
    updated_profile = await user_service.get_user_profile(target_user.id, message.chat.id)
    admin_link, target_link = f"<a href='tg://user?id={admin_user.id}'>{sanitize_html(admin_user.full_name)}</a>", f"<a href='tg://user?id={target_user.id}'>{sanitize_html(target_user.full_name)}</a>"
    public_text = f"‚ùóÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_link} –≤—ã–Ω–µ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_link}.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}\nüìâ –†–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è —Å–Ω–∏–∂–µ–Ω. –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{updated_profile.trust_score}</b>."
    await bot.send_message(message.chat.id, public_text)
    await message.reply_to_message.delete()


@admin_spam_router.message(Command("mute", "–º—É—Ç", prefix="!/"), IsAdminFilter(), GROUP_ONLY_FILTER)
async def handle_mute_user_command(message: types.Message, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    try:
        await message.delete()
    except Exception: pass
        
    args = message.text.split(maxsplit=2)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>!mute 30m –ü—Ä–∏—á–∏–Ω–∞</code>")
        return
    duration = parse_duration(args[1])
    if not duration:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'm', 'h', 'd'.")
        return
    reason = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."
    if len(args) > 2: reason = args[2]
    target_user, admin_user = message.reply_to_message.from_user, message.from_user
    mute_end_timestamp = datetime.now() + duration
    await bot.restrict_chat_member(chat_id=message.chat.id, user_id=target_user.id, permissions=types.ChatPermissions(), until_date=mute_end_timestamp)
    admin_link, target_link = f"<a href='tg://user?id={admin_user.id}'>{sanitize_html(admin_user.full_name)}</a>", f"<a href='tg://user?id={target_user.id}'>{sanitize_html(target_user.full_name)}</a>"
    public_text = f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_link} –±—ã–ª –∑–∞–º—É—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_link} –¥–æ {mute_end_timestamp.strftime('%Y-%m-%d %H:%M')}.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}"
    await bot.send_message(message.chat.id, public_text)
    await message.reply_to_message.delete()


@admin_spam_router.message(Command("unmute", "—Ä–∞–∑–º—É—Ç", prefix="!/"), IsAdminFilter(), GROUP_ONLY_FILTER)
async def handle_unmute_user_command(message: types.Message, bot: Bot, user_service: UserService):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    target_user = message.reply_to_message.from_user
    chat = await bot.get_chat(message.chat.id)
    await bot.restrict_chat_member(chat_id=message.chat.id, user_id=target_user.id, permissions=chat.permissions)
    await user_service.update_user_mute(user_id=target_user.id, chat_id=message.chat.id, mute_until=0)
    await message.delete()
    await message.answer(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sanitize_html(target_user.full_name)} —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")


@admin_spam_router.message(Command("add_stop_word", prefix="!/"), IsAdminFilter())
async def handle_add_stop_word_command(message: types.Message, ai_service: AIService):
    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>!add_stop_word –∫–∞–∑–∏–Ω–æ</code>")
        return
    word = command_args[1].lower().strip()
    success = await ai_service.add_stop_word(word)
    if success: await message.reply(f"‚úÖ –°–ª–æ–≤–æ '<code>{word}</code>' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç.")
    else: await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<code>{word}</code>' —É–∂–µ –±—ã–ª–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")


@admin_spam_router.message(Command("del_stop_word", prefix="!/"), IsAdminFilter())
async def handle_delete_stop_word_command(message: types.Message, ai_service: AIService):
    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    word = command_args[1].lower().strip()
    success = await ai_service.remove_stop_word(word)
    if success: await message.reply(f"‚úÖ –°–ª–æ–≤–æ '<code>{word}</code>' —É–¥–∞–ª–µ–Ω–æ.")
    else: await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<code>{word}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")


@admin_spam_router.message(Command("list_stop_words", prefix="!/"), IsAdminFilter())
async def handle_list_stop_words_command(message: types.Message, ai_service: AIService):
    words = await ai_service.get_all_stop_words()
    if not words:
        await message.reply("üö´ –°—Ç–æ–ø-–ª–∏—Å—Ç –ø—É—Å—Ç.")
        return
    text = "üìú –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞:\n\n" + "\n".join([f"‚Ä¢ <code>{word}</code>" for word in words])
    await message.reply(text)
