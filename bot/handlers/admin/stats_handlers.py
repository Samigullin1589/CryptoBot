# ===============================================================
# –§–∞–π–ª: bot/handlers/admin/stats_handlers.py (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# –û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ—Ç —Ñ–∞–π–ª —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
# —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º AdminService.
# ===============================================================
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery

from bot.filters.admin_filter import IsAdminFilter
from bot.keyboards.admin_keyboards import get_back_to_admin_menu_keyboard
from bot.services.admin_service import AdminService

stats_router = Router()
logger = logging.getLogger(__name__)

stats_router.callback_query.filter(IsAdminFilter())


@stats_router.callback_query(F.data == "admin_stats_general")
async def show_general_stats(call: CallbackQuery, admin_service: AdminService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É."""
    await admin_service.track_command_usage("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ê–¥–º–∏–Ω)")
    
    stats = await admin_service.get_general_stats()
    text = (
        "<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
        f"üöÄ –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: <b>{stats['new_24h']}</b>\n"
        f"üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: <b>{stats['active_24h']}</b>"
    )
    await call.message.edit_text(text, reply_markup=get_back_to_admin_menu_keyboard())


@stats_router.callback_query(F.data == "admin_stats_mining")
async def show_mining_stats(call: CallbackQuery, admin_service: AdminService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–µ '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥'."""
    await admin_service.track_command_usage("üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ (–ê–¥–º–∏–Ω)")
    
    stats = await admin_service.get_mining_stats()
    text = (
        "<b>üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ú–∞–π–Ω–∏–Ω–≥–∞'</b>\n\n"
        f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å–µ–π—á–∞—Å: <b>{stats['active_sessions']}</b>\n"
        f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö: <b>{stats['total_balance']:.2f}</b>\n"
        f"üì§ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: <b>{stats['total_withdrawn']:.2f}</b>\n"
        f"ü§ù –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{stats['total_referrals']}</b>"
    )
    await call.message.edit_text(text, reply_markup=get_back_to_admin_menu_keyboard())


@stats_router.callback_query(F.data == "admin_stats_commands")
async def show_command_stats(call: CallbackQuery, admin_service: AdminService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥."""
    await admin_service.track_command_usage("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥ (–ê–¥–º–∏–Ω)")
    
    top_commands = await admin_service.get_command_stats()
    
    if not top_commands:
        stats_text = "–ï—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        # –¢–µ–ø–µ—Ä—å `cmd` –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–æ–π, –∏ `sanitize_html` –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º
        stats_text = "\n".join([f"üîπ <code>{cmd}</code> - {score} —Ä–∞–∑" for cmd, score in top_commands])

    text = (
        "<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥</b>\n\n"
        f"{stats_text}"
    )
    await call.message.edit_text(text, reply_markup=get_back_to_admin_menu_keyboard())
