import logging
import re
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from bot.services.asic_service import AsicService
from bot.services.admin_service import AdminService

router = Router()
logger = logging.getLogger(__name__)

def format_asic_passport(data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è ASIC."""
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ —Å—Ç—Ä–æ–∫–∏
    specs_text = "\n".join([f"  ‚ñ´Ô∏è <b>{key.replace('_', ' ').capitalize()}:</b> {value}" for key, value in data.items() if key != 'name'])
        
    text = (
        f"üìã <b>–ü–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {data['name']}</b>\n\n"
        f"<b><u>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u></b>\n{specs_text}\n"
    )
    return text

@router.message(Command("asic"))
async def asic_passport_handler(message: Message, asic_service: AsicService, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /asic [–º–æ–¥–µ–ª—å] –∏ –≤—ã–¥–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –∫—ç—à–∞ Redis.
    """
    await admin_service.track_command_usage("/asic")
    
    try:
        # –£–±–∏—Ä–∞–µ–º /asic –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —É–¥–∞–ª—è—è –ø—Ä–æ–±–µ–ª—ã
        model_query = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å ASIC –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/asic s19k pro</code>")
        return

    found_asic = await asic_service.find_asic_by_query(model_query)
            
    if found_asic:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        response_text = format_asic_passport(found_asic.model_dump())
        await message.answer(response_text, disable_web_page_preview=True)
    else:
        await message.answer(f"üòï –ú–æ–¥–µ–ª—å, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ '{model_query}', –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ. "
                             "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")