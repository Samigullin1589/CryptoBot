import logging
import re
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from bot.services.asic_service import AsicService
from bot.services.admin_service import AdminService

router = Router()
logger = logging.getLogger(__name__)

def format_asic_passport(data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è ASIC."""
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–¥–∞–Ω–Ω—ã–µ –∏–∑ Redis)
    clean_data = {k.decode('utf-8') if isinstance(k, bytes) else k: v.decode('utf-8') if isinstance(v, bytes) else v for k, v in data.items()}
    
    name = clean_data.get('name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    specs_map = {
        "algorithm": "–ê–ª–≥–æ—Ä–∏—Ç–º",
        "hashrate": "–•–µ—à—Ä–µ–π—Ç",
        "power": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
        "efficiency": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    
    specs_text = "\n".join([f"  ‚ñ´Ô∏è <b>{rus_name}:</b> {clean_data.get(key)}" for key, rus_name in specs_map.items() if clean_data.get(key) not in [None, "N/A"]])
        
    text = (
        f"üìã <b>–ü–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {name}</b>\n\n"
        f"<b><u>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u></b>\n{specs_text}\n"
    )
    return text

@router.message(Command("asic"))
async def asic_passport_handler(message: Message, asic_service: AsicService, admin_service: AdminService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /asic [–º–æ–¥–µ–ª—å] –∏ –≤—ã–¥–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –∫—ç—à–∞ Redis.
    """
    await admin_service.track_command_usage("/asic")
    
    try:
        model_query = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å ASIC –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/asic s19k pro</code>")
        return

    found_asic_dict = await asic_service.find_asic_by_query(model_query)
            
    if found_asic_dict:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º .model_dump(), —Ç–∞–∫ –∫–∞–∫ found_asic_dict - —ç—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å
        response_text = format_asic_passport(found_asic_dict)
        await message.answer(response_text, disable_web_page_preview=True)
    else:
        await message.answer(f"üòï –ú–æ–¥–µ–ª—å, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ '{model_query}', –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ. "
                             "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /force_update_asics –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")