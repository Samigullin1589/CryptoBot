import logging
from datetime import datetime, timezone
import redis.asyncio as redis
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config.settings import settings
from bot.services.admin_service import AdminService
from bot.services.asic_service import AsicService
from bot.services.user_service import UserService

router = Router()
logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---

def format_asic_passport(data: dict, electricity_cost: float = 0.0) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è ASIC —Å —Ä–∞—Å—á–µ—Ç–æ–º —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏."""
    name = data.get('name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –∏–∑ Redis –≤—Å–µ–≥–¥–∞ "–≥—Ä—è–∑–Ω–∞—è", –¥–æ –≤—ã—á–µ—Ç–∞ —ç/—ç
    gross_profitability = float(data.get('profitability', 0.0))
    power = int(data.get('power', 0))

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å
    net_profit = AsicService.calculate_net_profit(gross_profitability, power, electricity_cost)

    specs_map = {
        "algorithm": "–ê–ª–≥–æ—Ä–∏—Ç–º",
        "hashrate": "–•–µ—à—Ä–µ–π—Ç",
        "power": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
        "efficiency": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    
    specs_list = []
    for key, rus_name in specs_map.items():
        value = data.get(key)
        if value and value != "N/A":
            unit = " –í—Ç" if key == "power" else ""
            specs_list.append(f"  ‚ñ´Ô∏è <b>{rus_name}:</b> {value}{unit}")

    specs_text = "\n".join(specs_list)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é
    profit_text = (
        f"  ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–º–∏):</b> ${gross_profitability:.2f}/–¥–µ–Ω—å\n"
        f"  ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (—á–∏—Å—Ç—ã–º–∏):</b> ${net_profit:.2f}/–¥–µ–Ω—å\n"
        f"     (–ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á)"
    )

    text = (
        f"üìã <b>–ü–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {name}</b>\n\n"
        f"<b><u>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</u></b>\n{profit_text}\n\n"
        f"<b><u>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u></b>\n{specs_text}\n"
    )
    return text

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@router.message(Command("top_asics"))
async def top_asics_handler(message: Message, asic_service: AsicService, admin_service: AdminService, redis_client: redis.Redis):
    """
    –í—ã–¥–∞–µ—Ç —Ç–æ–ø-10 —Å–∞–º—ã—Ö –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await admin_service.track_command_usage("/top_asics")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç/—ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_service = UserService(redis_client)
    electricity_cost = await user_service.get_user_electricity_cost(message.from_user.id)
    
    msg = await message.answer("üîç –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–º—ã—Ö –¥–æ—Ö–æ–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    top_miners, last_update_time = await asic_service.get_top_asics(count=10, electricity_cost=electricity_cost)

    if not top_miners:
        await msg.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    response_lines = [f"üèÜ <b>–¢–æ–ø-10 –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC</b> (—á–∏—Å—Ç—ã–º–∏, –ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á)\n"]
    
    for i, miner in enumerate(top_miners, 1):
        line = (
            f"{i}. <b>{miner.name}</b>\n"
            f"   –î–æ—Ö–æ–¥: <b>${miner.profitability:.2f}/–¥–µ–Ω—å</b> | {miner.algorithm}"
        )
        response_lines.append(line)
    
    if last_update_time:
        now = datetime.now(timezone.utc)
        minutes_ago = int((now - last_update_time).total_seconds() / 60)
        response_lines.append(f"\n<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã {minutes_ago} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.</i>")
    else:
        response_lines.append("\n<i>–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.</i>")

    await msg.edit_text("\n".join(response_lines), disable_web_page_preview=True)


@router.message(Command("asic"))
async def asic_passport_handler(message: Message, asic_service: AsicService, admin_service: AdminService, redis_client: redis.Redis):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /asic [–º–æ–¥–µ–ª—å] –∏ –≤—ã–¥–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –∫—ç—à–∞ Redis.
    """
    await admin_service.track_command_usage("/asic")
    
    try:
        model_query = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å ASIC –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/asic s19k pro</code>")
        return

    found_asic_dict = await asic_service.find_asic_by_query(model_query)
            
    if found_asic_dict:
        user_service = UserService(redis_client)
        electricity_cost = await user_service.get_user_electricity_cost(message.from_user.id)
        response_text = format_asic_passport(found_asic_dict, electricity_cost)
        await message.answer(response_text, disable_web_page_preview=True)
    else:
        await message.answer(f"üòï –ú–æ–¥–µ–ª—å, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ '<code>{model_query}</code>', –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ. "
                             "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("set_cost"))
async def set_electricity_cost_handler(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é.
    """
    builder = InlineKeyboardBuilder()
    for tariff_name in settings.ELECTRICITY_TARIFFS.keys():
        builder.button(text=tariff_name, callback_data=f"set_tariff:{tariff_name}")
    
    builder.adjust(1) # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é. –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("set_tariff:"))
async def process_tariff_selection(callback: CallbackQuery, redis_client: redis.Redis):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    try:
        tariff_name = callback.data.split(":")[1]
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ.", show_alert=True)
        return

    tariff_info = settings.ELECTRICITY_TARIFFS.get(tariff_name)
    if not tariff_info:
        await callback.answer("–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", show_alert=True)
        return

    cost = tariff_info["cost_per_hour"]
    
    user_service = UserService(redis_client)
    await user_service.set_user_electricity_cost(callback.from_user.id, cost)
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à —Ç–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '<b>{tariff_name}</b>'.\n"
        f"–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤: <b>${cost:.4f}/–∫–í—Ç¬∑—á</b>."
    )
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
