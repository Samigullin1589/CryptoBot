# ===============================================================
# –§–∞–π–ª: bot/handlers/tools/calculator_handler.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: "–¢–æ–Ω–∫–∏–π" –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏".
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å
# DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º `Deps` –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–º.
# ===============================================================
import logging
from typing import Union
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.services.asic_service import AsicService
from bot.services.mining_service import MiningService
from bot.services.market_data_service import MarketDataService
from bot.states.mining_states import CalculatorStates
from bot.keyboards.mining_keyboards import (
    get_calculator_cancel_keyboard, get_currency_selection_keyboard,
    get_asic_selection_keyboard
)
from bot.utils.dependencies import Deps
from bot.utils.models import AsicMiner, CalculationInput
from bot.utils.formatters import format_calculation_result

calculator_router = Router()
logger = logging.getLogger(__name__)

# --- –ó–∞–ø—É—Å–∫ –∏ –æ—Ç–º–µ–Ω–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ Union[Message, CallbackQuery] –∫–∞–∫ 'call'
@calculator_router.callback_query(F.data == "nav:calculator")
@calculator_router.message(F.text == "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def start_profit_calculator(call: Union[Message, CallbackQuery], state: FSMContext, deps: Deps, **kwargs):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏."""
    await state.clear()
    await deps.admin_service.track_action(call.from_user.id, "nav:calculator")
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —É–∫–∞–∂–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:"
    keyboard = get_currency_selection_keyboard()
    
    target_message = call if isinstance(call, Message) else call.message
    if isinstance(call, CallbackQuery):
        await call.answer()
        await target_message.edit_text(text, reply_markup=keyboard)
    else:
        await target_message.answer(text, reply_markup=keyboard)
    
    await state.set_state(CalculatorStates.waiting_for_currency)

@calculator_router.callback_query(F.data == "calc_action:cancel", state="*")
async def cancel_calculator(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    await state.clear()
    await call.message.edit_text("‚úÖ –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
    await call.answer()

# --- –®–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è FSM ---

@calculator_router.callback_query(F.data.startswith("calc_currency:"), CalculatorStates.waiting_for_currency)
async def process_currency_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã."""
    await call.answer()
    currency = call.data.split(":")[1]
    await state.update_data(currency=currency)
    
    prompt_text = (
        "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>USD</b> –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>0.05</code>):"
        if currency == "usd" else
        "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>4.5</code>):"
    )
    
    await call.message.edit_text(prompt_text, reply_markup=get_calculator_cancel_keyboard())
    await state.set_state(CalculatorStates.waiting_for_electricity_cost)

@calculator_router.message(CalculatorStates.waiting_for_electricity_cost)
async def process_electricity_cost(message: Message, state: FSMContext, deps: Deps):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏."""
    try:
        cost = float(message.text.replace(',', '.').strip())
        if cost < 0: raise ValueError
    except (ValueError, TypeError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>0.05</b> –∏–ª–∏ <b>4.5</b>).")
        return

    msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    user_data = await state.get_data()
    
    cost_usd = cost
    if user_data.get("currency") == "rub":
        await msg.edit_text("‚è≥ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD/RUB...")
        # –ó–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        rate_usd_rub = 95.0
        if not rate_usd_rub:
            await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_calculator_cancel_keyboard())
            return
        cost_usd = cost / rate_usd_rub
    
    await msg.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
    all_asics, _ = await deps.asic_service.get_top_asics(0.05, count=1000)
    
    if not all_asics:
        await msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ ASIC.", reply_markup=get_calculator_cancel_keyboard())
        return

    await state.update_data(
        electricity_cost_usd=cost_usd,
        asic_list_json=[asic.model_dump() for asic in all_asics]
    )
    
    keyboard = get_asic_selection_keyboard(all_asics, page=0)
    await msg.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à ASIC-–º–∞–π–Ω–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    await state.set_state(CalculatorStates.waiting_for_asic_selection)

@calculator_router.callback_query(F.data.startswith("calc_page:"), CalculatorStates.waiting_for_asic_selection)
async def process_asic_pagination(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ ASIC."""
    await call.answer()
    page = int(call.data.split(":")[1])
    user_data = await state.get_data()
    asic_list = [AsicMiner(**data) for data in user_data.get("asic_list_json", [])]
    
    keyboard = get_asic_selection_keyboard(asic_list, page=page)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à ASIC-–º–∞–π–Ω–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)


@calculator_router.callback_query(F.data.startswith("calc_select_asic:"), CalculatorStates.waiting_for_asic_selection)
async def process_asic_selection_item(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä ASIC –∏–∑ —Å–ø–∏—Å–∫–∞."""
    await call.answer()
    asic_index = int(call.data.split(":")[1])
    user_data = await state.get_data()
    asic_list = [AsicMiner(**data) for data in user_data.get("asic_list_json", [])]

    if asic_index >= len(asic_list):
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –°–ø–∏—Å–æ–∫ –º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return
        
    await state.update_data(selected_asic_json=asic_list[asic_index].model_dump())
    
    await call.message.edit_text(
        "üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤–∞—à–µ–≥–æ –ø—É–ª–∞ –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1</code> –∏–ª–∏ <code>1.5</code>):",
        reply_markup=get_calculator_cancel_keyboard()
    )
    await state.set_state(CalculatorStates.waiting_for_pool_commission)

@calculator_router.message(CalculatorStates.waiting_for_pool_commission)
async def process_pool_commission(message: Message, state: FSMContext, deps: Deps):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–∏ –ø—É–ª–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç."""
    try:
        commission_percent = float(message.text.replace(',', '.').strip())
        if not (0 <= commission_percent < 100): raise ValueError
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∏—Å—Å–∏–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1.5</code>).")
        return

    msg = await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∏ —Å—á–∏—Ç–∞—é...")
    user_data = await state.get_data()
    
    selected_asic = AsicMiner(**user_data["selected_asic_json"])
    
    calc_input = CalculationInput(
        hashrate_str=selected_asic.hashrate,
        power_consumption_watts=selected_asic.power,
        electricity_cost=user_data["electricity_cost_usd"],
        pool_commission=commission_percent
    )
    
    result = await deps.mining_service.calculate_btc_profitability(calc_input)
    
    if not result:
         await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
         await state.clear()
         return

    result_text = format_calculation_result(result)
    
    await msg.edit_text(result_text, disable_web_page_preview=True)
    await state.clear()