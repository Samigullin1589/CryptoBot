# ===============================================================
# –§–∞–π–ª: bot/handlers/tools/calculator_handler.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏.
# –£–ø—Ä–∞–≤–ª—è–µ—Ç FSM –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –≤ —Å–µ—Ä–≤–∏—Å—ã.
# ===============================================================
import logging
from typing import Union

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from bot.states.mining_states import ProfitCalculatorStates
from bot.keyboards.mining_keyboards import *
from bot.services.mining_service import MiningService
from bot.services.admin_service import AdminService
from bot.utils.helpers import get_message_and_chat_id
from bot.utils.models import AsicMiner

router = Router()
logger = logging.getLogger(__name__)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏ –æ—Ç–º–µ–Ω–∞ ---
@router.callback_query(F.data == "menu_calculator")
@router.message(F.text == "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def start_calculator(update: Union[Message, CallbackQuery], state: FSMContext, admin_service: AdminService):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä."""
    await admin_service.track_command_usage("‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    await state.clear()
    
    message, _ = await get_message_and_chat_id(update)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:",
        reply_markup=get_calculator_currency_keyboard().as_markup()
    )
    await state.set_state(ProfitCalculatorStates.waiting_for_currency)
    if isinstance(update, CallbackQuery):
        await update.answer()

@router.callback_query(F.data == "calc_action:cancel")
async def cancel_calculator(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    await state.clear()
    await call.message.edit_text("‚úÖ –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
    await call.answer()

# --- –®–∞–≥–∏ FSM ---
@router.callback_query(ProfitCalculatorStates.waiting_for_currency, F.data.startswith("calc_action:set_currency:"))
async def process_currency_selection(call: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã."""
    await call.answer()
    currency = call.data.split(":")[-1]
    await state.update_data(currency=currency)
    
    prompt_text = "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>USD</b> –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>0.05</code>):"
    if currency == "rub":
        prompt_text = "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>4.5</code>):"
        
    await call.message.edit_text(prompt_text, reply_markup=get_calculator_cancel_keyboard().as_markup())
    await state.set_state(ProfitCalculatorStates.waiting_for_electricity_cost)

@router.message(ProfitCalculatorStates.waiting_for_electricity_cost)
async def process_electricity_cost(message: Message, state: FSMContext, mining_service: MiningService):
    """–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç/—ç –∏ –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ ASIC."""
    try:
        cost = float(message.text.replace(',', '.').strip())
        if cost < 0: raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>0.05</b>).")
        return

    msg = await message.answer("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∞–ª—é—Ç—É –∏ –∑–∞–≥—Ä—É–∂–∞—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ...")
    
    success, result = await mining_service.prepare_asic_list_for_calculator(
        cost_input=cost,
        currency=(await state.get_data()).get("currency")
    )
    
    if not success:
        await msg.edit_text(f"‚ùå {result}", reply_markup=get_calculator_cancel_keyboard().as_markup())
        return
        
    await state.update_data(electricity_cost_usd=result['cost_usd'], asic_list=result['asics'])
    
    keyboard = get_calculator_asic_keyboard([AsicMiner(**data) for data in result['asics']], page=0)
    await msg.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à ASIC-–º–∞–π–Ω–µ—Ä:", reply_markup=keyboard.as_markup())
    await state.set_state(ProfitCalculatorStates.waiting_for_asic_selection)

@router.callback_query(ProfitCalculatorStates.waiting_for_asic_selection, F.data.startswith("calc_nav:page:"))
async def process_asic_pagination(call: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 2.1: –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É ASIC."""
    await call.answer()
    page = int(call.data.split(":")[-1])
    user_data = await state.get_data()
    asic_list = [AsicMiner(**data) for data in user_data.get("asic_list", [])]
    keyboard = get_calculator_asic_keyboard(asic_list, page=page)
    await call.message.edit_reply_markup(reply_markup=keyboard.as_markup())

@router.callback_query(ProfitCalculatorStates.waiting_for_asic_selection, F.data == "calc_action:invalid_asic")
async def process_invalid_asic_selection(call: CallbackQuery):
    """–®–∞–≥ 2.2: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º ASIC."""
    await call.answer("‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.", show_alert=True)

@router.callback_query(ProfitCalculatorStates.waiting_for_asic_selection, F.data.startswith("calc_action:select_asic:"))
async def process_asic_selection(call: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ ASIC –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–∏—Å—Å–∏–∏ –ø—É–ª–∞."""
    await call.answer()
    asic_index = int(call.data.split(":")[-1])
    await state.update_data(selected_asic_index=asic_index)
    
    await call.message.edit_text(
        "üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤–∞—à–µ–≥–æ –ø—É–ª–∞ –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1</code> –∏–ª–∏ <code>1.5</code>):",
        reply_markup=get_calculator_cancel_keyboard().as_markup()
    )
    await state.set_state(ProfitCalculatorStates.waiting_for_pool_commission)

@router.message(ProfitCalculatorStates.waiting_for_pool_commission)
async def process_pool_commission(message: Message, state: FSMContext, mining_service: MiningService):
    """–®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç."""
    try:
        commission = float(message.text.replace(',', '.').strip())
        if not (0 <= commission < 100): raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99.9.")
        return

    msg = await message.answer("‚è≥ –°—á–∏—Ç–∞—é...")
    user_data = await state.get_data()
    
    result_text = await mining_service.get_calculator_result(
        user_data=user_data,
        pool_commission=commission
    )
    
    await msg.edit_text(result_text, disable_web_page_preview=True)
    await state.clear()
