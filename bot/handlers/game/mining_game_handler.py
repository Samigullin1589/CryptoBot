# ===============================================================
# –§–∞–π–ª: bot/handlers/game/mining_game_handler.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –£–õ–£–ß–®–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: "–¢–æ–Ω–∫–∏–π" –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π FSM –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
# –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ –∫–æ–ª–±—ç–∫–∞—Ö.
# ===============================================================
import logging
from aiogram import F, Router, Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.config.settings import settings
from bot.services.mining_game_service import MiningGameService
from bot.services.asic_service import AsicService
from bot.states.mining_states import MiningGameStates
from bot.keyboards.mining_keyboards import (
    get_mining_menu_keyboard, get_shop_keyboard, get_my_farm_keyboard,
    get_withdraw_keyboard
)

game_router = Router(name=__name__)
logger = logging.getLogger(__name__)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---

@game_router.callback_query(F.data == "nav:mining_game")
async def handle_mining_menu(call: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥'."""
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã
    text = "üíé <b>–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ú–∞–π–Ω–∏–Ω–≥–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await call.message.edit_text(text, reply_markup=get_mining_menu_keyboard())

# --- –ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (—Å FSM –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è) ---

async def show_shop_page(call: CallbackQuery, state: FSMContext, asic_service: AsicService, page: int = 0):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—è –∏—Ö."""
    fsm_data = await state.get_data()
    asics = fsm_data.get('shop_asics')

    if not asics:
        logger.info(f"User {call.from_user.id} fetching new ASIC list for shop.")
        # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –û–î–ò–ù –†–ê–ó ---
        asics, _ = await asic_service.get_top_asics(count=50) # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∏–≥—Ä—ã
        if not asics:
            await call.message.edit_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                reply_markup=get_mining_menu_keyboard()
            )
            return
        # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ö—ç—à–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ FSM ---
        await state.update_data(shop_asics=asics)
    
    text = "üè™ <b>–ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ ASIC –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:"
    keyboard = get_shop_keyboard(asics, page)
    await call.message.edit_text(text, reply_markup=keyboard)

@game_router.callback_query(F.data == "game_nav:shop")
async def handle_shop_menu(call: CallbackQuery, state: FSMContext, asic_service: AsicService):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞."""
    await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ...")
    await state.set_state(MiningGameStates.in_shop)
    await show_shop_page(call, state, asic_service, 0)

@game_router.callback_query(F.data.startswith("game_shop_page:"), MiningGameStates.in_shop)
async def handle_shop_pagination(call: CallbackQuery, state: FSMContext, asic_service: AsicService):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –º–∞–≥–∞–∑–∏–Ω–µ."""
    page = int(call.data.split(":")[-1])
    await show_shop_page(call, state, asic_service, page)

# --- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ---

@game_router.callback_query(F.data.startswith("game_action:start:"), MiningGameStates.in_shop)
async def handle_start_mining(call: CallbackQuery, state: FSMContext, game_service: MiningGameService):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –∞—Å–∏–∫–∞."""
    # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –≤–º–µ—Å—Ç–æ —Ö—Ä—É–ø–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ ---
    asic_id = call.data.split(":")[-1]
    
    fsm_data = await state.get_data()
    shop_asics = fsm_data.get('shop_asics', [])
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π ASIC –≤ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
    selected_asic = next((asic for asic in shop_asics if normalize_asic_name(asic.name) == asic_id), None)
    
    if not selected_asic:
        await call.answer("–û—à–∏–±–∫–∞! –≠—Ç–æ—Ç ASIC –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω.", show_alert=True)
        return

    result_text = await game_service.start_session(call.from_user.id, selected_asic)
    await call.message.edit_text(result_text, reply_markup=get_mining_menu_keyboard())
    await state.clear() # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞

@game_router.callback_query(F.data == "game_nav:my_farm")
async def handle_my_farm(call: CallbackQuery, game_service: MiningGameService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."""
    farm_info_text, user_stats_text = await game_service.get_farm_and_stats_info(call.from_user.id)
    full_text = f"{farm_info_text}\n\n{user_stats_text}"
    await call.message.edit_text(full_text, reply_markup=get_my_farm_keyboard())

# --- –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã ---

@game_router.callback_query(F.data == "game_action:withdraw")
async def handle_withdraw(call: CallbackQuery, game_service: MiningGameService):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤."""
    result_text, can_withdraw = await game_service.process_withdrawal(call.from_user.id)
    if can_withdraw:
        await call.message.edit_text(result_text, reply_markup=get_withdraw_keyboard())
    else:
        await call.answer(result_text, show_alert=True)

@game_gouter.callback_query(F.data == "game_action:invite")
async def handle_invite_friend(call: CallbackQuery, bot_info: types.User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ."""
    # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π `bot_info` –∏–∑ `deps` ---
    referral_link = f"https://t.me/{bot_info.username}?start={call.from_user.id}"
    text = (
        f"ü§ù <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ "
        f"<b>{settings.game.referral_bonus_amount:.2f} –º–æ–Ω–µ—Ç</b>!\n\n"
        f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
        f"<code>{referral_link}</code>"
    )
    await call.message.answer(text)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–µ–π ---

@game_router.callback_query(F.data == "game_nav:electricity")
async def handle_electricity_menu(call: CallbackQuery, game_service: MiningGameService):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏."""
    text, keyboard = await game_service.get_electricity_menu(call.from_user.id)
    await call.message.edit_text(text, reply_markup=keyboard)

@game_router.callback_query(F.data.startswith("game_tariff_select:"))
async def handle_select_tariff(call: CallbackQuery, game_service: MiningGameService):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–∞—Ä–∏—Ñ."""
    tariff_name = call.data.split(":")[-1]
    alert_text = await game_service.select_tariff(call.from_user.id, tariff_name)
    await call.answer(alert_text, show_alert=True)
    text, keyboard = await game_service.get_electricity_menu(call.from_user.id)
    await call.message.edit_text(text, reply_markup=keyboard)

@game_router.callback_query(F.data.startswith("game_tariff_buy:"))
async def handle_buy_tariff(call: CallbackQuery, game_service: MiningGameService):
    """–ü–æ–∫—É–ø–∞–µ—Ç —Ç–∞—Ä–∏—Ñ."""
    tariff_name = call.data.split(":")[-1]
    alert_text = await game_service.buy_tariff(call.from_user.id, tariff_name)
    await call.answer(alert_text, show_alert=True)
    if "üéâ" in alert_text:
        text, keyboard = await game_service.get_electricity_menu(call.from_user.id)
        await call.message.edit_text(text, reply_markup=keyboard)