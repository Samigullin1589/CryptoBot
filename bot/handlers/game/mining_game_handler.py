# ===============================================================
# –§–∞–π–ª: bot/handlers/game/mining_game_handler.py
# –ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 ‚Äî –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
# –û–ø–∏—Å–∞–Ω–∏–µ: "–¢–æ–Ω–∫–∏–π" –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å FSM –∏ –Ω–∞–¥—ë–∂–Ω—ã–º–∏ ID –≤ –∫–æ–ª–±—ç–∫–∞—Ö.
# ===============================================================

from __future__ import annotations

import logging
from aiogram import F, Router, Bot
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.config.settings import settings
from bot.states.game_states import MiningGameStates
from bot.keyboards.mining_keyboards import (
    get_mining_menu_keyboard,
    get_shop_keyboard,
    get_my_farm_keyboard,
    get_withdraw_keyboard,
    get_confirm_purchase_keyboard,
)
from bot.utils.text_utils import normalize_asic_name
from bot.utils.models import AsicMiner
from bot.utils.dependencies import Deps
from bot.keyboards.callback_factories import GameCallback

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
game_router = Router(name="mining_game_handler")
logger = logging.getLogger(__name__)


def _fmt_money(val, digits: int = 2, dash: str = "‚Äî") -> str:
    try:
        if val is None:
            return dash
        return f"{float(val):,.{digits}f}".replace(",", " ")
    except (TypeError, ValueError):
        return str(val) if val is not None else dash


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---

@game_router.callback_query(GameCallback.filter(F.action == "main_menu"))
async def handle_mining_menu(call: CallbackQuery, state: FSMContext, deps: Deps):
    game_service = deps.mining_game_service
    await state.clear()

    text = "üíé <b>–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ú–∞–π–Ω–∏–Ω–≥–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    farm_info, stats_info = await game_service.get_farm_and_stats_info(call.from_user.id)
    full_text = f"{text}\n\n{farm_info}\n\n{stats_info}"

    session_data = await game_service.redis.hgetall(
        game_service.keys.active_session(call.from_user.id)
    )
    is_session_active = bool(session_data)

    await call.message.edit_text(full_text, reply_markup=get_mining_menu_keyboard(is_session_active), parse_mode="HTML")
    await call.answer()


# --- –ú–∞–≥–∞–∑–∏–Ω (FSM-–∫—ç—à) ---

async def show_shop_page(call: CallbackQuery, state: FSMContext, deps: Deps, page: int = 0):
    asic_service = deps.asic_service
    game_service = deps.mining_game_service

    fsm_data = await state.get_data()
    asics_data = fsm_data.get("shop_asics")
    asics = [AsicMiner(**data) for data in asics_data] if asics_data else []

    if not asics:
        logger.info("User %s fetching new ASIC list for shop.", call.from_user.id)
        asics, _ = await asic_service.get_top_asics(electricity_cost=0.05, count=50)
        if not asics:
            is_session_active = await game_service.redis.exists(
                game_service.keys.active_session(call.from_user.id)
            )
            await call.message.edit_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                reply_markup=get_mining_menu_keyboard(bool(is_session_active)),
                parse_mode="HTML",
            )
            return
        await state.update_data(shop_asics=[asic.model_dump() for asic in asics])

    text = "üè™ <b>–ú–∞–≥–∞–∑–∏–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ ASIC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:"
    await call.message.edit_text(text, reply_markup=get_shop_keyboard(asics, page), parse_mode="HTML")
    await call.answer()


@game_router.callback_query(GameCallback.filter(F.action == "shop"))
async def handle_shop_menu(call: CallbackQuery, state: FSMContext, deps: Deps):
    await call.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ...", parse_mode="HTML")
    await state.set_state(MiningGameStates.in_shop)
    await show_shop_page(call, state, deps, 0)


@game_router.callback_query(GameCallback.filter(F.action == "shop_page"), MiningGameStates.in_shop)
async def handle_shop_pagination(call: CallbackQuery, callback_data: GameCallback, state: FSMContext, deps: Deps):
    page = int(getattr(callback_data, "page", 0))
    await show_shop_page(call, state, deps, page)


# --- –ü–æ–∫—É–ø–∫–∞ / –∑–∞–ø—É—Å–∫ ---

@game_router.callback_query(GameCallback.filter(F.action == "start"), MiningGameStates.in_shop)
async def handle_purchase_confirmation(call: CallbackQuery, callback_data: GameCallback, state: FSMContext, deps: Deps):
    asic_id_norm = callback_data.value

    fsm_data = await state.get_data()
    shop_asics_data = fsm_data.get("shop_asics", [])
    shop_asics = [AsicMiner(**data) for data in shop_asics_data]

    selected_asic = next(
        (asic for asic in shop_asics if normalize_asic_name(asic.name) == asic_id_norm),
        None,
    )

    if not selected_asic:
        await call.answer("–û—à–∏–±–∫–∞! –≠—Ç–æ—Ç ASIC –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω.", show_alert=True)
        return

    await state.update_data(selected_asic_json=selected_asic.model_dump())
    await state.set_state(MiningGameStates.confirm_purchase)

    text = (
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>{selected_asic.name}</b>.\n"
        f"–¶–µ–Ω–∞: <b>{_fmt_money(selected_asic.price)} –º–æ–Ω–µ—Ç</b>.\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Å–µ—Å—Å–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?"
    )
    await call.message.edit_text(text, reply_markup=get_confirm_purchase_keyboard(asic_id_norm), parse_mode="HTML")


@game_router.callback_query(GameCallback.filter(F.action == "buy_confirm"), MiningGameStates.confirm_purchase)
async def handle_start_mining(call: CallbackQuery, state: FSMContext, deps: Deps):
    game_service = deps.mining_game_service
    fsm_data = await state.get_data()
    selected_asic_data = fsm_data.get("selected_asic_json")

    if not selected_asic_data:
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.", show_alert=True)
        return

    selected_asic = AsicMiner(**selected_asic_data)

    result_text, success = await game_service.purchase_and_start_session(call.from_user.id, selected_asic)

    if not success:
        await call.answer(result_text, show_alert=True)
        return

    await call.message.edit_text(result_text, parse_mode="HTML")
    await state.clear()
    await handle_mining_menu(call, state, deps)


@game_router.callback_query(GameCallback.filter(F.action == "buy_cancel"), MiningGameStates.confirm_purchase)
async def handle_cancel_purchase(call: CallbackQuery, state: FSMContext, deps: Deps):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
    await state.set_state(MiningGameStates.in_shop)
    await show_shop_page(call, state, deps, 0)


# --- –ú–æ—è —Ñ–µ—Ä–º–∞ / –≤—ã–≤–æ–¥ / —Ä–µ—Ñ–µ—Ä–∞–ª—ã ---

@game_router.callback_query(GameCallback.filter(F.action == "my_farm"))
async def handle_my_farm(call: CallbackQuery, deps: Deps):
    farm_info_text, user_stats_text = await deps.mining_game_service.get_farm_and_stats_info(call.from_user.id)
    full_text = f"{farm_info_text}\n\n{user_stats_text}"
    await call.message.edit_text(full_text, reply_markup=get_my_farm_keyboard(), parse_mode="HTML")
    await call.answer()


@game_router.callback_query(GameCallback.filter(F.action == "withdraw"))
async def handle_withdraw(call: CallbackQuery, deps: Deps):
    game_service = deps.mining_game_service
    user, _ = await game_service.user_service.get_or_create_user(call.from_user)
    result_text, can_withdraw = await game_service.process_withdrawal(user)
    if can_withdraw:
        await call.message.edit_text(result_text, reply_markup=get_withdraw_keyboard(), parse_mode="HTML")
    else:
        await call.answer(result_text, show_alert=True)


@game_router.callback_query(GameCallback.filter(F.action == "invite"))
async def handle_invite_friend(call: CallbackQuery, bot: Bot):
    bot_info = await bot.get_me()
    referral_link = f"https://t.me/{bot_info.username}?start={call.from_user.id}"
    text = (
        f"ü§ù <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ "
        f"<b>{settings.game.min_withdrawal_amount / 20:.2f} –º–æ–Ω–µ—Ç</b>!\n\n"
        f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
        f"<code>{referral_link}</code>"
    )
    await call.message.edit_text(text, reply_markup=get_my_farm_keyboard(), parse_mode="HTML")
    await call.answer("–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!")


# --- –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ ---

@game_router.callback_query(GameCallback.filter(F.action == "electricity"))
async def handle_electricity_menu(call: CallbackQuery, deps: Deps):
    text, keyboard = await deps.mining_game_service.get_electricity_menu(call.from_user.id)
    await call.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await call.answer()


@game_router.callback_query(GameCallback.filter(F.action == "tariff_select"))
async def handle_select_tariff(call: CallbackQuery, callback_data: GameCallback, deps: Deps):
    game_service = deps.mining_game_service
    tariff_name = callback_data.value
    alert_text = await game_service.select_tariff(call.from_user.id, tariff_name)
    await call.answer(alert_text, show_alert=True)
    text, keyboard = await game_service.get_electricity_menu(call.from_user.id)
    await call.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@game_router.callback_query(GameCallback.filter(F.action == "tariff_buy"))
async def handle_buy_tariff(call: CallbackQuery, callback_data: GameCallback, deps: Deps):
    game_service = deps.mining_game_service
    tariff_name = callback_data.value
    alert_text = await game_service.buy_tariff(call.from_user.id, tariff_name)
    await call.answer(alert_text, show_alert=True)
    if "üéâ" in alert_text:
        text, keyboard = await game_service.get_electricity_menu(call.from_user.id)
        await call.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")