# ======================================================================================
# –§–∞–π–ª: bot/main.py
# –í–µ—Ä—Å–∏—è: –§–ò–ù–ê–õ–¨–ù–ê–Ø (28.10.2025) - Distinguished Engineer
# –û–ø–∏—Å–∞–Ω–∏–µ:
#   ‚Ä¢ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Resource –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ dependency-injector
#   ‚Ä¢ Resource –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç—É–ø–µ
#   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç–æ–¥–æ–≤ init/shutdown
# ======================================================================================

from __future__ import annotations

import asyncio
import inspect
import logging
import signal
from importlib import import_module
from typing import Any

from aiogram import Bot, Dispatcher, Router
from aiogram.types import BotCommand

from bot.config.settings import settings
from bot.containers import Container
from bot.utils.dependencies import dependencies_middleware
from bot.utils.logging_setup import setup_logging
from bot.middlewares.throttling_middleware import ThrottlingMiddleware
from bot.middlewares.activity_middleware import ActivityMiddleware
from bot.middlewares.action_tracking_middleware import ActionTrackingMiddleware

logger = logging.getLogger(__name__)


async def setup_commands(bot: Bot) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –º–µ–Ω—é Telegram."""
    commands: list[BotCommand] = [
        BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –∏ —Å–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="ask", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É (–≤ –õ–°)"),
        BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="admin", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ]
    await bot.set_my_commands(commands)
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def _collect_routers_from_module(module: Any) -> list[Router]:
    """–ò—â–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã Router –≤ –º–æ–¥—É–ª–µ."""
    routers: list[Router] = []
    for name, obj in vars(module).items():
        if isinstance(obj, Router):
            if not obj.name:
                obj.name = name
            routers.append(obj)
    return routers


def _import_optional(module_path: str) -> object | None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å."""
    try:
        return import_module(module_path)
    except ImportError as e:
        logger.debug("–ú–æ–¥—É–ª—å %s –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: %s", module_path, e)
        return None


def register_routers(dp: Dispatcher) -> None:
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
    module_paths: list[str] = [
        "bot.handlers.public.start_handler", "bot.handlers.public.menu_handlers",
        "bot.handlers.public.help_handler", "bot.handlers.public.common_handler",
        "bot.handlers.public.onboarding_handler", "bot.handlers.public.price_handler",
        "bot.handlers.public.asic_handler", "bot.handlers.public.news_handler",
        "bot.handlers.public.quiz_handler", "bot.handlers.public.market_info_handler",
        "bot.handlers.public.crypto_center_handler", "bot.handlers.public.achievements_handler",
        "bot.handlers.public.verification_public_handler", "bot.handlers.public.game_handler",
        "bot.handlers.public.market_handler", "bot.handlers.tools.calculator_handler",
        "bot.handlers.game.mining_game_handler", "bot.handlers.threats.threat_handler",
        "bot.handlers.admin.admin_menu", "bot.handlers.admin.moderation_handler",
        "bot.handlers.admin.stats_handler", "bot.handlers.admin.game_admin_handler",
        "bot.handlers.admin.verification_admin_handler", "bot.handlers.admin.cache_handler",
        "bot.handlers.admin.health_handler", "bot.handlers.admin.version_handler",
        "bot.handlers.public.text_handler",
    ]

    registered_routers = set()
    registered_routers_count = 0

    for path in module_paths:
        module = _import_optional(path)
        if module:
            routers = _collect_routers_from_module(module)
            if routers:
                for router in routers:
                    if id(router) not in registered_routers:
                        dp.include_router(router)
                        registered_routers.add(id(router))
                        registered_routers_count += 1
                        logger.debug(f"–†–æ—É—Ç–µ—Ä '{router.name or 'unknown'}' –∏–∑ '{path}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–æ—É—Ç–µ—Ä–æ–≤: %s", registered_routers_count)


async def setup_scheduler(container: Container) -> None:
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –ø–ª–∞–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏."""
    mod = _import_optional("bot.jobs.scheduled_tasks")
    if not mod:
        logger.info("‚ÑπÔ∏è –ú–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
        return
    setup = getattr(mod, "setup_scheduler", None)
    if callable(setup):
        res = setup(container)
        if inspect.isawaitable(res):
            await res
        logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


def _bind_signals(loop: asyncio.AbstractEventLoop, stop: asyncio.Event) -> None:
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã SIGINT –∏ SIGTERM."""
    def _handler(*_: object) -> None:
        if not stop.is_set():
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º polling...")
            stop.set()
    for s in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(s, _handler)
        except NotImplementedError:
            pass


async def init_resources(container: Container) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    Resource –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã dependency-injector –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è
    –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã.
    
    Args:
        container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º Redis client - —ç—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Resource
        redis = container.redis_client()
        logger.info("‚úÖ Redis client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis: {e}")
        raise

    try:
        # –ü–æ–ª—É—á–∞–µ–º HTTP client - —ç—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Resource
        http_client = container.http_client()
        logger.info("‚úÖ HTTP client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTTP client: {e}")
        raise

    logger.info("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")


async def shutdown_resources(container: Container) -> None:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
    Resource –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã dependency-injector –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞—é—Ç
    shutdown –ø—Ä–∏ –≤—ã–∑–æ–≤–µ container.shutdown_resources().
    
    Args:
        container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    try:
        # dependency-injector –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –≤—Å–µ Resource –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        await container.shutdown_resources()
        logger.info("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    setup_logging(level=settings.log_level, format="text")
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ CryptoBot...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    container = Container()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    bot = container.bot()
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
    logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware...")
    dp.update.outer_middleware(dependencies_middleware)
    dp.update.outer_middleware(ActivityMiddleware())
    dp.update.outer_middleware(ActionTrackingMiddleware(admin_service=container.admin_service()))
    dp.update.outer_middleware(ThrottlingMiddleware())
    logger.info("‚úÖ Middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤...")
    register_routers(dp)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    await setup_commands(bot)
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Resource –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    await init_resources(container)
    
    await setup_scheduler(container)

    logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–ø—É—Å–∫ polling...")
    stop_event = asyncio.Event()
    _bind_signals(asyncio.get_running_loop(), stop_event)

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        await dp.start_polling(
            bot, 
            allowed_updates=dp.resolve_used_update_types(), 
            stop_event=stop_event
        )
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}", exc_info=True)
        raise
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π shutdown
        await shutdown_resources(container)
        
        await bot.session.close()
        logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    except Exception as e:
        logger.critical(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)