# =================================================================================
# –§–∞–π–ª: bot/main.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –ê–í–ì–£–°–¢ 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –§–∏–Ω–∞–ª—å–Ω–∞—è, –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤—ã–∑–æ–≤ Deps.build —Å –ø–µ—Ä–µ–¥–∞—á–µ–π bot.
# –í—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Å—Ç—Ä–æ–≥–æ–º –∏ –ª–æ–≥–∏—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
# =================================================================================

import asyncio
import logging

import redis.asyncio as redis
from aiohttp import ClientSession
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
from bot.config.settings import settings
from bot.handlers.admin.admin_menu import admin_router
from bot.handlers.public.common_handler import public_router
from bot.jobs.scheduled_tasks import setup_jobs
from bot.middlewares.activity_middleware import ActivityMiddleware
from bot.middlewares.throttling_middleware import ThrottlingMiddleware
from bot.utils.dependencies import Deps
from bot.utils.logging_setup import setup_logging

logger = logging.getLogger(__name__)

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –º–µ–Ω—é Telegram."""
    commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="price", description="üìà –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"),
        BotCommand(command="market", description="üìä –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞"),
        BotCommand(command="news", description="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def on_startup(bot: Bot, deps: Deps):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_startup...")
    await set_bot_commands(bot)

    # –ü–µ—Ä–µ–¥–∞–µ–º deps –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    setup_jobs(deps.scheduler, deps)
    deps.scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç, —á—Ç–æ–±—ã –±–æ—Ç –±—ã–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å—Ä–∞–∑—É
    await deps.coin_list_service.update_coin_list()
    logger.info("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ
    await deps.admin_service.notify_admins("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

async def on_shutdown(deps: Deps):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_shutdown...")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    await deps.admin_service.notify_admins("‚ùóÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")

    if deps.scheduler and deps.scheduler.running:
        deps.scheduler.shutdown(wait=False) # –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    if deps.redis_pool:
        await deps.redis_pool.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ.")

    if deps.http_session and not deps.http_session.closed:
        await deps.http_session.close()
        logger.info("–°–µ—Å—Å–∏—è AIOHTTP –∑–∞–∫—Ä—ã—Ç–∞.")
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞."""
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(level=settings.log_level)
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ FSM
    redis_pool = redis.from_url(
        settings.REDIS_URL.get_secret_value(),
        encoding="utf-8",
        decode_responses=True
    )
    storage = RedisStorage(redis=redis_pool)

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=settings.BOT_TOKEN.get_secret_value(), parse_mode="HTML")
    dp = Dispatcher(storage=storage)

    # 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(admin_router)
    dp.include_router(public_router)
    logger.info("–†–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")

    # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
    async with ClientSession() as http_session:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∏–º –±–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ bot
        deps = Deps.build(
            settings=settings, 
            http_session=http_session, 
            redis_pool=redis_pool, 
            bot=bot
        )

        # –¢–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∏–º –Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ deps
        dp.update.middleware(ThrottlingMiddleware(storage=storage))
        dp.update.middleware(ActivityMiddleware(user_service=deps.user_service))
        logger.info("Middleware —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        
        # 6. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–æ–≤ startup/shutdown
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)

        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø—Ä–æ—Å–∞ Telegram...")
        # 7. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ —Ö—ç–Ω–¥–ª–µ—Ä—ã
        try:
            await dp.start_polling(bot, **deps.model_dump())
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ä–µ—Å—É—Ä—Å—ã –±—É–¥—É—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await on_shutdown(deps)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
