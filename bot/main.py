# bot/main.py

import asyncio
import signal
import sys
from typing import Optional
from contextlib import suppress

from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from loguru import logger

from bot.config.settings import settings
from bot.containers import Container
from bot.utils.logging_setup import setup_logging
from bot.middlewares.dependencies import DependenciesMiddleware

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot: Optional[Bot] = None
dp: Optional[Dispatcher] = None
container: Optional[Container] = None
app: Optional[web.Application] = None
runner: Optional[web.AppRunner] = None
shutdown_event: Optional[asyncio.Event] = None


async def setup_dependencies() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        await container.init_resources()
        redis = await container.redis_client()
        await redis.ping()
        logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        raise


async def setup_bot() -> tuple[Bot, Dispatcher]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
    
    bot_instance = await container.bot()
    dispatcher = Dispatcher()
    
    await register_handlers(dispatcher)
    await register_middlewares(dispatcher)
    
    logger.info("‚úÖ –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return bot_instance, dispatcher


async def register_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    handlers_registered = 0
    
    # Public handlers
    try:
        from bot.handlers.public import public_router
        dp.include_router(public_router)
        handlers_registered += 1
        logger.info("‚úÖ Public handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Public handlers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
    
    # Game handlers
    try:
        from bot.handlers.game import game_router
        dp.include_router(game_router)
        handlers_registered += 1
        logger.info("‚úÖ Game handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Game handlers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
    
    # Mining handlers
    try:
        from bot.handlers.game import mining_router
        dp.include_router(mining_router)
        handlers_registered += 1
        logger.info("‚úÖ Mining handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Mining handlers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
    
    # Admin handlers
    try:
        from bot.handlers.admin import admin_router
        dp.include_router(admin_router)
        handlers_registered += 1
        logger.info("‚úÖ Admin handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Admin handlers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
    
    if handlers_registered == 0:
        raise RuntimeError("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
    
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {handlers_registered} —Ä–æ—É—Ç–µ—Ä–æ–≤")


async def register_middlewares(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware"""
    logger.info("üîå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware...")
    
    try:
        dp.update.middleware(DependenciesMiddleware(container))
        logger.info("‚úÖ Dependencies middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ middleware: {e}")


async def on_startup() -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    await setup_dependencies()
    
    # –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º webhook –∏ pending updates –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await bot.delete_webhook(drop_pending_updates=True)
    await asyncio.sleep(1)  # –î–∞–µ–º Telegram –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    
    if settings.IS_WEB_PROCESS:
        webhook_url = await get_webhook_url()
        if not webhook_url:
            raise ValueError("Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è web process")
        
        await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
            allowed_updates=dp.resolve_used_update_types()
        )
        
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        logger.info("‚úÖ –†–µ–∂–∏–º polling –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    bot_user = await bot.get_me()
    logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_user.username} (ID: {bot_user.id})")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if settings.ADMIN_CHAT_ID:
        with suppress(Exception):
            await bot.send_message(
                settings.ADMIN_CHAT_ID,
                f"ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>\n\n"
                f"–†–µ–∂–∏–º: {'Webhook' if settings.IS_WEB_PROCESS else 'Polling'}\n"
                f"–í–µ—Ä—Å–∏—è: 3.0.0",
                parse_mode=ParseMode.HTML
            )


async def on_shutdown() -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if settings.ADMIN_CHAT_ID and bot:
        with suppress(Exception):
            await bot.send_message(
                settings.ADMIN_CHAT_ID,
                "üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>",
                parse_mode=ParseMode.HTML
            )
    
    # –£–¥–∞–ª—è–µ–º webhook
    if bot:
        with suppress(Exception):
            await bot.delete_webhook(drop_pending_updates=False)
            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if container:
        with suppress(Exception):
            await container.shutdown_resources()
            logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
    
    logger.info("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def get_webhook_url() -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å URL webhook"""
    import os
    render_url = os.environ.get("RENDER_EXTERNAL_URL")
    if render_url:
        render_url = render_url.rstrip('/')
        return f"{render_url}/webhook/bot"
    return None


async def health_check(request: web.Request) -> web.Response:
    """Health check endpoint –¥–ª—è Render"""
    bot_info = None
    if bot:
        with suppress(Exception):
            me = await bot.get_me()
            bot_info = {
                "id": me.id,
                "username": me.username,
                "first_name": me.first_name
            }
    
    return web.json_response(
        {
            "status": "healthy",
            "bot": bot_info,
            "mode": "webhook" if settings.IS_WEB_PROCESS else "polling",
            "version": "3.0.0"
        },
        status=200
    )


def create_app() -> web.Application:
    """–°–æ–∑–¥–∞—Ç—å web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook"""
    webhook_app = web.Application()
    
    # Health check endpoints
    webhook_app.router.add_get("/health", health_check)
    webhook_app.router.add_head("/health", health_check)
    webhook_app.router.add_get("/", health_check)
    
    # Webhook endpoint
    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(webhook_app, path="/webhook/bot")
    
    setup_application(webhook_app, dp, bot=bot)
    
    return webhook_app


async def start_webhook() -> None:
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    global app, runner
    
    host = "0.0.0.0"
    port = settings.PORT
    
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
    
    app = create_app()
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, host=host, port=port)
    await site.start()
    
    logger.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://{host}:{port}")
    logger.info(f"üîó Webhook endpoint: /webhook/bot")
    logger.info(f"‚ù§Ô∏è Health check: http://{host}:{port}/health")
    
    # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await shutdown_event.wait()


async def start_polling() -> None:
    """–ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ polling...")
    
    try:
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            handle_signals=False  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å–∞–º–∏
        )
    except asyncio.CancelledError:
        logger.info("‚ö†Ô∏è Polling –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}", exc_info=True)
        raise


def handle_signal(signum: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞—é graceful shutdown...")
    if shutdown_event:
        shutdown_event.set()


async def cleanup() -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dispatcher
    if dp:
        with suppress(Exception):
            await dp.stop_polling()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º web —Å–µ—Ä–≤–µ—Ä
    if runner:
        with suppress(Exception):
            await runner.cleanup()
            logger.info("‚úÖ Web —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    if bot and bot.session:
        with suppress(Exception):
            await bot.session.close()
            logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    
    logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    global bot, dp, container, shutdown_event
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_format = "json" if settings.logging.json_enabled else "text"
    setup_logging(level=settings.log_level, format=log_format)
    
    logger.info("=" * 60)
    logger.info("ü§ñ Mining AI Bot - Production Ready v3.0.0")
    logger.info("=" * 60)
    logger.info(f"üìù Log level: {settings.log_level}")
    logger.info(f"üîß Mode: {'Webhook (Web)' if settings.IS_WEB_PROCESS else 'Polling (Worker)'}")
    logger.info(f"üåç Port: {settings.PORT}")
    logger.info("=" * 60)
    
    shutdown_event = asyncio.Event()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container = Container()
        container.wire(modules=[__name__])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
        bot, dp = await setup_bot()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è startup/shutdown —Ö—É–∫–æ–≤
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(sig, lambda s=sig: handle_signal(s))
        
        # –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if settings.IS_WEB_PROCESS:
            await on_startup()
            await start_webhook()
            await on_shutdown()
        else:
            await start_polling()
        
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
    finally:
        await cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}", exc_info=True)
        sys.exit(1)