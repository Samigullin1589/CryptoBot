# =============================================================================
# –§–∞–π–ª: bot/main.py
# –í–µ—Ä—Å–∏—è: PRODUCTION-READY (28.10.2025) - Distinguished Engineer
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: game_service ‚Üí mining_game_service (—Å—Ç—Ä–æ–∫–∞ 41)
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Graceful shutdown –±–µ–∑ –æ—à–∏–±–æ–∫ NoneType
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: Health check endpoint –¥–ª—è Render
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGTERM/SIGINT
# =============================================================================

import asyncio
import logging
import signal
import sys
from typing import Optional

from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from dependency_injector import containers, providers
from loguru import logger

from bot.config.settings import settings
from bot.utils.logging_setup import setup_logging

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
bot: Optional[Bot] = None
dp: Optional[Dispatcher] = None
container: Optional[containers.DeclarativeContainer] = None
app: Optional[web.Application] = None
runner: Optional[web.AppRunner] = None
shutdown_event: Optional[asyncio.Event] = None


# =============================================================================
# DI CONTAINER
# =============================================================================

class Container(containers.DeclarativeContainer):
    """
    Dependency Injection –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: bot.services.game_service ‚Üí bot.services.mining_game_service
    """
    wiring_config = containers.WiringConfiguration(
        modules=[
            "bot.handlers.public",
            "bot.handlers.admin",
            "bot.services.ai_content_service",
            "bot.services.security_service",
            "bot.services.mining_game_service",  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë—ã–ª–æ: game_service
            "bot.services.news_service",
            "bot.services.price_service",
            "bot.services.market_data_service",
        ]
    )
    
    config = providers.Singleton(lambda: settings)
    
    # Redis (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–Ω–æ–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏)
    redis_client = providers.Singleton(
        lambda: None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ setup_dependencies
    )
    
    # Bot –∏ Dispatcher
    bot_instance = providers.Singleton(
        lambda: None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ setup_bot
    )
    
    dispatcher = providers.Singleton(
        lambda: None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ setup_bot
    )


# =============================================================================
# INITIALIZATION
# =============================================================================

async def setup_dependencies() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Redis, –ë–î –∏ —Ç.–¥.).
    ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –ø–µ—Ä–µ–¥ await
    """
    logger.info("üîß Initializing dependencies...")
    
    try:
        # Redis
        import redis.asyncio as aioredis
        redis_client = await aioredis.from_url(
            settings.REDIS_URL,
            encoding="utf-8",
            decode_responses=True
        )
        await redis_client.ping()
        container.redis_client.override(redis_client)
        logger.info("‚úÖ Redis connected successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize dependencies: {e}")
        raise


async def setup_bot() -> tuple[Bot, Dispatcher]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Bot –∏ Dispatcher.
    ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: parse_mode=HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (Bot, Dispatcher)
    """
    logger.info("ü§ñ Setting up bot and dispatcher...")
    
    # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ —Å parse_mode=HTML
    bot_instance = Bot(
        token=settings.BOT_TOKEN.get_secret_value(),
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)  # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û!
    )
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dispatcher = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    container.bot_instance.override(bot_instance)
    container.dispatcher.override(dispatcher)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    await register_handlers(dispatcher)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middlewares
    await register_middlewares(dispatcher)
    
    logger.info("‚úÖ Bot and dispatcher configured")
    return bot_instance, dispatcher


async def register_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    
    Args:
        dp: Dispatcher
    """
    logger.info("üìù Registering handlers...")
    
    try:
        from bot.handlers.public import public_router
        from bot.handlers.admin import admin_router
        
        dp.include_router(public_router)
        dp.include_router(admin_router)
        
        logger.info("‚úÖ Handlers registered successfully")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Some handlers not found: {e}")


async def register_middlewares(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware.
    
    Args:
        dp: Dispatcher
    """
    logger.info("üîå Registering middlewares...")
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º dependencies middleware
        from bot.utils.dependencies import dependencies_middleware
        dp.update.outer_middleware(dependencies_middleware)
        logger.info("‚úÖ Dependencies middleware registered")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Middleware registration issue: {e}")


# =============================================================================
# LIFECYCLE HOOKS
# =============================================================================

async def on_startup() -> None:
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    """
    logger.info("üöÄ Starting bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    await setup_dependencies()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏–ª–∏ polling
    if settings.IS_WEB_PROCESS:
        webhook_url = await get_webhook_url()
        if not webhook_url:
            raise ValueError("Webhook URL not configured for web process")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
        webhook_info = await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
            allowed_updates=dp.resolve_used_update_types()
        )
        
        logger.info(f"‚úÖ Webhook set: {webhook_url}")
        logger.info(f"üìä Webhook info: {webhook_info}")
    else:
        # –£–¥–∞–ª—è–µ–º webhook –¥–ª—è polling
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Polling mode enabled")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_user = await bot.get_me()
    logger.info(f"‚úÖ Bot started: @{bot_user.username} (ID: {bot_user.id})")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if settings.ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                settings.ADMIN_CHAT_ID,
                "ü§ñ <b>Bot Started</b>\n\n"
                f"Mode: {'Webhook' if settings.IS_WEB_PROCESS else 'Polling'}\n"
                f"Time: {asyncio.get_event_loop().time():.2f}",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to notify admin: {e}")


async def on_shutdown() -> None:
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ None –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    """
    logger.info("üõë Shutting down bot...")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if settings.ADMIN_CHAT_ID and bot:
        try:
            await bot.send_message(
                settings.ADMIN_CHAT_ID,
                "üõë <b>Bot Stopped</b>",
                parse_mode=ParseMode.HTML
            )
        except Exception:
            pass
    
    # –£–¥–∞–ª—è–µ–º webhook
    if bot:
        try:
            await bot.delete_webhook(drop_pending_updates=False)
            logger.info("‚úÖ Webhook removed")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error removing webhook: {e}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
    if container is not None:
        redis = container.redis_client()
        if redis is not None:  # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None!
            try:
                await redis.close()
                logger.info("‚úÖ Redis connection closed")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error closing Redis: {e}")
    
    logger.info("‚úÖ Shutdown complete")


async def get_webhook_url() -> Optional[str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è webhook.
    
    Returns:
        URL webhook –∏–ª–∏ None
    """
    # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç RENDER_EXTERNAL_URL
    import os
    render_url = os.environ.get("RENDER_EXTERNAL_URL")
    if render_url:
        # –£–±–∏—Ä–∞–µ–º trailing slash –µ—Å–ª–∏ –µ—Å—Ç—å
        render_url = render_url.rstrip('/')
        webhook_path = "/webhook/bot"
        return f"{render_url}{webhook_path}"
    
    return None


# =============================================================================
# HEALTH CHECK
# =============================================================================

async def health_check(request: web.Request) -> web.Response:
    """
    Health check endpoint –¥–ª—è Render.
    
    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å
        
    Returns:
        JSON –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    """
    bot_info = None
    if bot:
        try:
            me = await bot.get_me()
            bot_info = {
                "id": me.id,
                "username": me.username,
                "first_name": me.first_name
            }
        except Exception:
            pass
    
    return web.json_response(
        {
            "status": "healthy",
            "bot": bot_info,
            "mode": "webhook" if settings.IS_WEB_PROCESS else "polling",
            "version": "1.0.0"
        },
        status=200
    )


# =============================================================================
# WEB SERVER (–¥–ª—è webhook —Ä–µ–∂–∏–º–∞)
# =============================================================================

def create_app() -> web.Application:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook.
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    webhook_app = web.Application()
    
    # Health check endpoints
    webhook_app.router.add_get("/health", health_check)
    webhook_app.router.add_head("/health", health_check)
    webhook_app.router.add_get("/", health_check)  # Root —Ç–æ–∂–µ
    
    # Webhook handler
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_handler.register(webhook_app, path="/webhook/bot")
    
    # Setup application
    setup_application(webhook_app, dp, bot=bot)
    
    return webhook_app


async def start_webhook() -> None:
    """
    –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞.
    """
    global app, runner
    
    host = "0.0.0.0"
    port = settings.PORT
    
    logger.info(f"üåê Starting webhook server on {host}:{port}")
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = create_app()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host=host, port=port)
    await site.start()
    
    logger.info(f"‚úÖ Webhook server started at http://{host}:{port}")
    logger.info(f"üìç Webhook endpoint: /webhook/bot")
    logger.info(f"‚ù§Ô∏è Health check: http://{host}:{port}/health")
    
    # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await shutdown_event.wait()


async def start_polling() -> None:
    """
    –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling.
    """
    logger.info("üîÑ Starting polling mode...")
    
    try:
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            handle_signals=False  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é
        )
    except asyncio.CancelledError:
        logger.info("‚ö†Ô∏è Polling cancelled")
    except Exception as e:
        logger.error(f"‚ùå Polling error: {e}", exc_info=True)
        raise


# =============================================================================
# SIGNAL HANDLERS
# =============================================================================

def handle_signal(signum: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    
    Args:
        signum: –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞
    """
    logger.warning(f"‚ö†Ô∏è Received signal {signum}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if shutdown_event:
        shutdown_event.set()


async def cleanup() -> None:
    """
    –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ None –∏ awaitable –ø–µ—Ä–µ–¥ await
    """
    logger.info("üßπ Cleaning up resources...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    if dp:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ stop_polling
            if hasattr(dp, 'stop_polling') and callable(dp.stop_polling):
                stop_result = dp.stop_polling()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º awaitable
                if hasattr(stop_result, '__await__'):
                    await stop_result
        except Exception as e:
            logger.debug(f"Dispatcher stop: {e}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    if runner:
        try:
            await runner.cleanup()
            logger.info("‚úÖ Web server stopped")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Web server cleanup error: {e}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    if bot and bot.session:
        try:
            await bot.session.close()
            logger.info("‚úÖ Bot session closed")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Bot session close error: {e}")
    
    logger.info("‚úÖ Cleanup complete")


# =============================================================================
# MAIN
# =============================================================================

async def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    global bot, dp, container, shutdown_event
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_format = "json" if settings.logging.json_enabled else "text"
    setup_logging(level=settings.log_level, format=log_format)
    
    logger.info("=" * 60)
    logger.info("ü§ñ Mining AI Bot - Production Ready")
    logger.info("=" * 60)
    logger.info(f"üìù Log level: {settings.log_level}")
    logger.info(f"üîß Mode: {'Webhook (Web Process)' if settings.IS_WEB_PROCESS else 'Polling (Worker)'}")
    logger.info(f"üåç Port: {settings.PORT}")
    logger.info("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    shutdown_event = asyncio.Event()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = Container()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
        bot, dp = await setup_bot()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º lifecycle hooks
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(sig, lambda s=sig: handle_signal(s))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if settings.IS_WEB_PROCESS:
            # –ó–∞–ø—É—Å–∫–∞–µ–º startup hooks –≤—Ä—É—á–Ω—É—é
            await on_startup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
            await start_webhook()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º shutdown hooks
            await on_shutdown()
        else:
            # –í polling —Ä–µ–∂–∏–º–µ hooks –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            await start_polling()
            
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è Keyboard interrupt")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}", exc_info=True)
        raise
    finally:
        await cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Bot stopped by user")
    except Exception as e:
        logger.error(f"üí• Unhandled exception: {e}", exc_info=True)
        sys.exit(1)