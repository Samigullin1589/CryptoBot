# =================================================================================
# –§–∞–π–ª: bot/main.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –§–ò–ù–ê–õ–¨–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –§–∏–Ω–∞–ª—å–Ω–∞—è, –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π
# –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ on_startup/on_shutdown.
# =================================================================================

import asyncio
import logging

import redis.asyncio as redis
from aiohttp import ClientSession
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

from bot.config.settings import settings
from bot.handlers.admin.admin_menu import admin_router
from bot.handlers.public.common_handler import public_router
from bot.jobs.scheduled_tasks import setup_jobs
from bot.middlewares.activity_middleware import ActivityMiddleware
from bot.middlewares.throttling_middleware import ThrottlingMiddleware
from bot.utils.dependencies import Deps
from bot.utils.logging_setup import setup_logging

logger = logging.getLogger(__name__)

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –º–µ–Ω—é Telegram."""
    commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="price", description="üìà –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"),
        BotCommand(command="market", description="üìä –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞"),
        BotCommand(command="news", description="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


async def on_startup(bot: Bot, deps: Deps):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_startup...")
    await set_bot_commands(bot)

    setup_jobs(deps.scheduler, deps)
    deps.scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")

    await deps.coin_list_service.update_coin_list()
    logger.info("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    
    if deps.admin_service:
        await deps.admin_service.notify_admins("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")


async def on_shutdown(deps: Deps):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è —á–∏—Å—Ç–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_shutdown...")
    
    if hasattr(deps, 'admin_service') and deps.admin_service:
        await deps.admin_service.notify_admins("‚ùóÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")

    if deps.scheduler and deps.scheduler.running:
        deps.scheduler.shutdown(wait=False)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    if deps.redis_pool:
        await deps.redis_pool.aclose()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ.")
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞."""
    setup_logging(level=settings.log_level)
    
    redis_pool = redis.from_url(
        str(settings.REDIS_URL),
        encoding="utf-8",
        decode_responses=True
    )
    storage = RedisStorage(redis=redis_pool)

    bot = Bot(
        token=settings.BOT_TOKEN.get_secret_value(),
        default=DefaultBotProperties(parse_mode="HTML")
    )
    dp = Dispatcher(storage=storage)

    dp.include_router(admin_router)
    dp.include_router(public_router)
    logger.info("–†–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")

    async with ClientSession() as http_session:
        deps = Deps.build(
            settings=settings, 
            http_session=http_session, 
            redis_pool=redis_pool,
            bot=bot
        )

        dp.update.middleware(ThrottlingMiddleware(storage=storage))
        if hasattr(deps, 'user_service'):
             dp.update.middleware(ActivityMiddleware(user_service=deps.user_service))
        logger.info("Middleware —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)

        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø—Ä–æ—Å–∞ Telegram...")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç 'deps' —Ü–µ–ª–∏–∫–æ–º, –∞ –Ω–µ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –µ–≥–æ.
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç aiogram –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–Ω–µ–¥—Ä—è—Ç—å –µ–≥–æ –≤ on_startup –∏ on_shutdown.
        await dp.start_polling(bot, deps=deps)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
