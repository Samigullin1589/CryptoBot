# ===============================================================
# –§–∞–π–ª: bot/main.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø)
# ===============================================================
import asyncio
import logging

from aiogram import Bot
from aiogram.types import BotCommand, BotCommandScopeDefault

from bot.config.settings import settings
from bot.utils.dependencies import deps
from bot.utils.logging_setup import setup_logging

from bot.handlers.public import (
    common_handler, asic_handler, price_handler, market_data_handler,
    news_handler, quiz_handler, crypto_center_handler
)
from bot.handlers.admin import admin_menu, moderation_handler, stats_handler
from bot.handlers.game import mining_game_handler
from bot.handlers.tools import calculator_handler
from bot.handlers.threats import threat_handler

async def notify_admin(bot: Bot, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        await bot.send_message(settings.admin.admin_chat_id, f"ü§ñ **–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n{message}", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–∏–¥–∏–º—ã–µ –≤ –º–µ–Ω—é Telegram."""
    commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="price", description="üìà –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"),
        BotCommand(command="asics", description="‚öôÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞—Å–∏–∫–æ–≤"),
        BotCommand(command="calc", description="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"),
        BotCommand(command="news", description="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
        BotCommand(command="fng", description="üò® –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())
    logging.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    await deps.initialize()

    dp = deps.dp
    bot = deps.bot
    scheduler = deps.scheduler

    logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middlewares...")
    dp.message.middleware(deps.throttling_middleware)
    dp.update.middleware(deps.activity_middleware)
    dp.update.middleware(deps.action_tracking_middleware)

    logging.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤...")
    dp.include_router(admin_menu.admin_router)
    dp.include_router(stats_handler.stats_router)
    dp.include_router(moderation_handler.moderation_router)
    dp.include_router(calculator_handler.calculator_router)

    if settings.feature_flags.enable_mining_game:
        dp.include_router(mining_game_handler.game_router)
        logging.info("–ò–≥—Ä–æ–≤–æ–π –º–æ–¥—É–ª—å 'Mining Game' –≤–∫–ª—é—á–µ–Ω.")
    
    if settings.feature_flags.enable_crypto_center:
        dp.include_router(crypto_center_handler.crypto_center_router)
        logging.info("–ú–æ–¥—É–ª—å 'Crypto Center' –≤–∫–ª—é—á–µ–Ω.")

    dp.include_router(common_handler.common_router)
    dp.include_router(asic_handler.asic_router)
    dp.include_router(price_handler.price_router)
    dp.include_router(market_data_handler.market_data_router)
    dp.include_router(news_handler.news_router)
    dp.include_router(quiz_handler.quiz_router)
    dp.include_router(threat_handler.threat_router)

    scheduler.start()
    logging.info("Scheduler started.")

    await set_bot_commands(bot)

    try:
        await notify_admin(bot, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        logging.info("Bot started polling...")
        await dp.start_polling(bot, **deps.workflow_data)
    finally:
        logging.info("Bot is shutting down.")
        await deps.close()
        await notify_admin(bot, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.")
        logging.info("All resources closed. Goodbye!")

if __name__ == "__main__":
    setup_logging(level=settings.app.log_level, format=settings.app.log_format)
    logging.info("Starting bot...")
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped by user.")
    except Exception as e:
        logging.critical("Bot stopped due to a critical error.", exc_info=True)
        temp_bot = Bot(token=settings.api_keys.bot_token)
        asyncio.run(notify_admin(temp_bot, f"üî¥ **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê** üî¥\n\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:\n`{e}`"))
        asyncio.run(temp_bot.session.close())