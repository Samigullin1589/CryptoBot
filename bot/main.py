# =================================================================================
# –§–∞–π–ª: bot/main.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Graceful Shutdown –Ω–∞ Render.
# =================================================================================

import asyncio
import logging
import signal
from typing import Coroutine

from aiohttp import ClientSession
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

from bot.config.settings import settings
from bot.utils.dependencies import Deps
from bot.utils.logging_setup import setup_logging
from bot.middlewares.activity_middleware import ActivityMiddleware
from bot.middlewares.throttling_middleware import ThrottlingMiddleware
from bot.jobs.scheduled_tasks import setup_jobs

from bot.handlers import admin, tools, game, public, threats

logger = logging.getLogger(__name__)

def register_all_routers(dp: Dispatcher):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –∏ —è–≤–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    dp.include_router(admin.admin_router)
    dp.include_router(admin.verification_admin_router)
    dp.include_router(admin.stats_router)
    dp.include_router(admin.moderation_router)
    dp.include_router(admin.game_admin_router)
    dp.include_router(tools.calculator_router)
    dp.include_router(game.mining_game_router)
    dp.include_router(public.price_router)
    dp.include_router(public.asic_router)
    dp.include_router(public.news_router)
    dp.include_router(public.quiz_router)
    dp.include_router(public.market_info_router)
    dp.include_router(public.crypto_center_router)
    dp.include_router(public.verification_public_router)
    dp.include_router(public.achievements_router)
    dp.include_router(public.market_router)
    dp.include_router(public.game_router)
    dp.include_router(public.common_router)
    dp.include_router(public.menu_router) # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –±—ã–ª
    dp.include_router(threats.threat_router)
    logger.info("–í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="check", description="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="admin", description="üîí –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def on_startup(bot: Bot, deps: Deps):
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_startup...")
    await set_bot_commands(bot)
    setup_jobs(deps.scheduler, deps)
    deps.scheduler.start()
    if deps.admin_service:
        await deps.admin_service.notify_admins("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("–ü—Ä–æ—Ü–µ–¥—É—Ä—ã on_startup –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

async def on_shutdown(deps: Deps):
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_shutdown...")
    if deps.admin_service:
        await deps.admin_service.notify_admins("‚ùóÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")
    if deps.scheduler and deps.scheduler.running:
        deps.scheduler.shutdown(wait=True)
    if deps.redis_pool:
        await deps.redis_pool.close()
    if deps.http_session:
        await deps.http_session.close()
    logger.info("–ü—Ä–æ—Ü–µ–¥—É—Ä—ã on_shutdown –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

async def main():
    setup_logging(level=settings.log_level, format="json")
    
    async with ClientSession() as http_session:
        bot = Bot(token=settings.BOT_TOKEN.get_secret_value(), default=DefaultBotProperties(parse_mode="HTML"))
        
        try:
            deps = await Deps.build(settings=settings, http_session=http_session, bot=bot)
        except Exception as e:
            logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}", exc_info=True)
            return

        storage = RedisStorage(redis=deps.redis_pool)
        dp = Dispatcher(storage=storage, deps=deps)

        dp.update.middleware(ThrottlingMiddleware(storage=storage))
        dp.update.middleware(ActivityMiddleware(user_service=deps.user_service))
        
        register_all_routers(dp)
        
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        await bot.delete_webhook(drop_pending_updates=True)

        # Graceful shutdown setup
        loop = asyncio.get_running_loop()
        stop_signals = (signal.SIGINT, signal.SIGTERM)
        for sig in stop_signals:
            loop.add_signal_handler(sig, lambda s=sig: asyncio.create_task(graceful_shutdown(s, dp)))
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)

async def graceful_shutdown(s: signal.Signals, dp: Dispatcher):
    logger.warning(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {s.name}, –Ω–∞—á–∏–Ω–∞—é graceful shutdown...")
    await dp.stop_polling()
    # on_shutdown –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ dp.shutdown.register
    logger.warning("Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")