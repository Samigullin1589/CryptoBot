# =================================================================================
# –§–∞–π–ª: bot/main.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º Health Check —Å–µ—Ä–≤–µ—Ä–æ–º –∏
#           –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Graceful Shutdown –Ω–∞ Render.
# =================================================================================

import asyncio
import logging
import signal

import redis.asyncio as redis
from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

from bot.config.settings import settings
from bot.utils.dependencies import Deps
from bot.utils.logging_setup import setup_logging
from bot.middlewares.activity_middleware import ActivityMiddleware
from bot.middlewares.throttling_middleware import ThrottlingMiddleware
from bot.jobs.scheduled_tasks import setup_jobs

# --- –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
from bot.handlers.admin import admin_router, verification_admin_router, stats_router, moderation_router, game_admin_router
from bot.handlers.tools import calculator_router
from bot.handlers.game import mining_game_router
from bot.handlers.public import menu_router, price_router, asic_handler, news_handler, quiz_handler, market_info_handler, market_handler, crypto_center_handler, verification_public_handler, achievements_handler, game_handler, common_router
from bot.handlers.threats import threat_router

logger = logging.getLogger(__name__)

def register_all_routers(dp: Dispatcher):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –∏ —è–≤–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    dp.include_router(admin_router)
    dp.include_router(verification_admin_router)
    dp.include_router(stats_router)
    dp.include_router(moderation_router)
    dp.include_router(game_admin_router)
    dp.include_router(calculator_router)
    dp.include_router(mining_game_router)
    dp.include_router(menu_router)
    dp.include_router(price_router)
    dp.include_router(asic_handler.router)
    dp.include_router(news_handler.router)
    dp.include_router(quiz_handler.router)
    dp.include_router(market_info_handler.router)
    dp.include_router(crypto_center_handler.router)
    dp.include_router(verification_public_handler.router)
    dp.include_router(achievements_handler.router)
    dp.include_router(market_handler.router)
    dp.include_router(game_handler.router)
    dp.include_router(common_router)
    dp.include_router(threat_router)
    logger.info("–í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="check", description="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="infoverif", description="üìÑ –£–∑–Ω–∞—Ç—å –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
        BotCommand(command="admin", description="üîí –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def on_startup(bot: Bot, deps: Deps):
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_startup...")
    await set_bot_commands(bot)
    setup_jobs(deps.scheduler, deps)
    deps.scheduler.start()
    if deps.admin_service:
        await deps.admin_service.notify_admins("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info("–ü—Ä–æ—Ü–µ–¥—É—Ä—ã on_startup –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

async def on_shutdown(bot: Bot, deps: Deps):
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_shutdown...")
    if deps.admin_service:
        await deps.admin_service.notify_admins("‚ùóÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")
    if deps.scheduler and deps.scheduler.running:
        deps.scheduler.shutdown(wait=False)
    if deps.redis_pool:
        await deps.redis_pool.close()
    if bot.session:
        await bot.session.close()
    logger.info("–ü—Ä–æ—Ü–µ–¥—É—Ä—ã on_shutdown –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- Health Check –¥–ª—è Render ---
async def health_check(request: web.Request) -> web.Response:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ HTTP-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
    logger.debug("Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å.")
    return web.json_response({"status": "ok"})

async def start_health_check_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è Health Check."""
    app = web.Application()
    app.router.add_get("/healthz", health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    port = int(settings.PORT)
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}.")
    # Keep the server running
    while True:
        await asyncio.sleep(3600)

async def main():
    setup_logging(level=settings.log_level, format="json")
    
    async with ClientSession() as http_session:
        deps = await Deps.build(settings=settings, http_session=http_session, bot=Bot(token=settings.BOT_TOKEN.get_secret_value(), default=DefaultBotProperties(parse_mode="HTML")))
        
        storage = RedisStorage(redis=deps.redis_pool)
        dp = Dispatcher(storage=storage)
        bot = deps.bot

        dp.workflow_data["deps"] = deps
        dp.update.middleware(ThrottlingMiddleware(storage=storage))
        dp.update.middleware(ActivityMiddleware(user_service=deps.user_service))
        register_all_routers(dp)
        
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        await bot.delete_webhook(drop_pending_updates=True)
        
        # --- Graceful Shutdown & Health Check ---
        loop = asyncio.get_event_loop()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª–ª–∏–Ω–≥–∞ –∏ health check
        polling_task = loop.create_task(dp.start_polling(bot, deps=deps))
        health_check_task = loop.create_task(start_health_check_server())

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª SIGTERM –æ—Ç Render –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for sig in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(sig, lambda: asyncio.create_task(dp.stop_polling()))

        await asyncio.gather(polling_task, health_check_task)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)