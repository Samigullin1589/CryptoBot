# =================================================================================
# –§–∞–π–ª: bot/main.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º Health Check —Å–µ—Ä–≤–µ—Ä–æ–º –∏
#           –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Graceful Shutdown –Ω–∞ Render.
# =================================================================================

import asyncio
import logging
import signal

import redis.asyncio as redis
from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

from bot.config.settings import settings
from bot.utils.dependencies import Deps
from bot.utils.logging_setup import setup_logging
from bot.middlewares.activity_middleware import ActivityMiddleware
from bot.middlewares.throttling_middleware import ThrottlingMiddleware
from bot.jobs.scheduled_tasks import setup_jobs

# --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–æ–≤ ---
from bot.handlers import admin, tools, game, public, threats

logger = logging.getLogger(__name__)

def register_all_routers(dp: Dispatcher):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –∏ —è–≤–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ
    dp.include_router(admin.admin_router)
    dp.include_router(admin.verification_admin_router)
    dp.include_router(admin.stats_router)
    dp.include_router(admin.moderation_router)
    dp.include_router(admin.game_admin_router)

    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∏–≥—Ä–∞
    dp.include_router(tools.calculator_router)
    dp.include_router(game.mining_game_router)

    # –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    dp.include_router(public.menu_router)
    dp.include_router(public.price_router)
    dp.include_router(public.asic_router)
    dp.include_router(public.news_router)
    dp.include_router(public.quiz_router)
    dp.include_router(public.market_info_router)
    dp.include_router(public.crypto_center_router)
    dp.include_router(public.verification_public_router)
    dp.include_router(public.achievements_router)
    dp.include_router(public.market_router)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≠—Ç–æ—Ç —Ä–æ—É—Ç–µ—Ä —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
    dp.include_router(public.game_router)
    
    # –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ AI –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö
    dp.include_router(public.common_router)
    
    # –•—ç–Ω–¥–ª–µ—Ä —É–≥—Ä–æ–∑ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ, —á—Ç–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ –≤—ã—à–µ
    dp.include_router(threats.threat_router)

    logger.info("–í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="check", description="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="infoverif", description="üìÑ –£–∑–Ω–∞—Ç—å –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
        BotCommand(command="admin", description="üîí –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def on_startup(bot: Bot, deps: Deps):
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_startup...")
    await set_bot_commands(bot)
    setup_jobs(deps.scheduler, deps)
    deps.scheduler.start()
    if deps.admin_service:
        await deps.admin_service.notify_admins("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("–ü—Ä–æ—Ü–µ–¥—É—Ä—ã on_startup –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

async def on_shutdown(bot: Bot, deps: Deps):
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_shutdown...")
    if deps.admin_service:
        await deps.admin_service.notify_admins("‚ùóÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")
    if deps.scheduler and deps.scheduler.running:
        deps.scheduler.shutdown(wait=False)
    if deps.redis_pool:
        await deps.redis_pool.close()
    if deps.http_session:
        await deps.http_session.close()
    if bot.session:
        await bot.session.close()
    logger.info("–ü—Ä–æ—Ü–µ–¥—É—Ä—ã on_shutdown –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- Health Check –¥–ª—è Render ---
async def health_check(request: web.Request) -> web.Response:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ HTTP-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
    logger.debug("Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å.")
    deps: Deps = request.app['deps']
    try:
        await deps.redis_pool.ping()
        await deps.bot.get_me()
        return web.json_response({"status": "ok"})
    except Exception as e:
        logger.critical(f"Health check failed: {e}", exc_info=True)
        return web.json_response({"status": "error", "reason": str(e)}, status=503)

async def start_web_server(deps: Deps):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è Health Check."""
    app = web.Application()
    app['deps'] = deps
    app.router.add_get("/healthz", health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    port = int(settings.PORT)
    site = web.TCPSite(runner, '0.0.0.0', port)
    try:
        await site.start()
        logger.info(f"Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}.")
        # Keep the server running
        await asyncio.Event().wait()
    finally:
        await runner.cleanup()


async def main():
    setup_logging(level=settings.log_level, format="json")
    
    async with ClientSession() as http_session:
        bot = Bot(token=settings.BOT_TOKEN.get_secret_value(), default=DefaultBotProperties(parse_mode="HTML"))
        deps = await Deps.build(settings=settings, http_session=http_session, bot=bot)
        
        storage = RedisStorage(redis=deps.redis_pool)
        dp = Dispatcher(storage=storage)

        dp.workflow_data["deps"] = deps
        dp.update.middleware(ThrottlingMiddleware(storage=storage))
        dp.update.middleware(ActivityMiddleware(user_service=deps.user_service))
        register_all_routers(dp)
        
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        await bot.delete_webhook(drop_pending_updates=True)
        
        # --- Graceful Shutdown & Health Check ---
        loop = asyncio.get_event_loop()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª–ª–∏–Ω–≥–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        polling_task = loop.create_task(dp.start_polling(bot, deps=deps))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ web-–ø—Ä–æ—Ü–µ—Å—Å Render
        # –í –Ω–∞—à–µ–º –Ω–æ–≤–æ–º render.yaml –±–æ—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç worker, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
        # –ù–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
        if settings.IS_WEB_PROCESS:
             web_server_task = loop.create_task(start_web_server(deps))
        else:
             web_server_task = None

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è graceful shutdown
        for sig in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(sig, lambda s=sig: asyncio.create_task(graceful_shutdown(s, dp, polling_task)))
        
        tasks_to_gather = [task for task in [polling_task, web_server_task] if task]
        await asyncio.gather(*tasks_to_gather)

async def graceful_shutdown(s, dp, polling_task):
    logger.warning(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {s.name}, –Ω–∞—á–∏–Ω–∞—é graceful shutdown...")
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø–æ–ª–ª–∏–Ω–≥–∞, —á—Ç–æ–±—ã –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ –∞–ø–¥–µ–π—Ç—ã
    polling_task.cancel()
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    await dp.stop_polling()
    logger.warning("Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit, asyncio.CancelledError):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)