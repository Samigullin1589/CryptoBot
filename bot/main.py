# =============================================================================
# –§–∞–π–ª: bot/main.py
# –í–µ—Ä—Å–∏—è: 2.3.0 - PRODUCTION READY (29.10.2025) - Distinguished Engineer
# –û–ø–∏—Å–∞–Ω–∏–µ:
#   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —á–µ—Ä–µ–∑ Redis lock
#   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ webhook –ø–µ—Ä–µ–¥ polling
#   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Graceful shutdown —Å proper cleanup
#   ‚úÖ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–û–í!
# =============================================================================

import asyncio
import logging
import signal
import sys
import time
from typing import Optional

from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from loguru import logger
from redis.asyncio import Redis

from bot.config.settings import settings
from bot.utils.logging_setup import setup_logging
from bot.containers import Container

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
bot: Optional[Bot] = None
dp: Optional[Dispatcher] = None
container: Optional[Container] = None
app: Optional[web.Application] = None
runner: Optional[web.AppRunner] = None
shutdown_event: Optional[asyncio.Event] = None
instance_lock_key = "bot:instance:lock"
instance_id: Optional[str] = None


# =============================================================================
# INSTANCE LOCK (–ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í)
# =============================================================================

async def acquire_instance_lock(redis: Redis) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤ Redis.
    
    Args:
        redis: Redis –∫–ª–∏–µ–Ω—Ç
        
    Returns:
        True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞, False –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    global instance_id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    import uuid
    instance_id = f"{uuid.uuid4()}-{int(time.time())}"
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å TTL 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
    # NX = —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    lock_acquired = await redis.set(
        instance_lock_key,
        instance_id,
        nx=True,  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ex=300    # TTL 5 –º–∏–Ω—É—Ç
    )
    
    if lock_acquired:
        logger.info(f"‚úÖ Instance lock acquired: {instance_id}")
        return True
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ –¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        existing_id = await redis.get(instance_lock_key)
        if existing_id:
            existing_id = existing_id.decode('utf-8') if isinstance(existing_id, bytes) else existing_id
            logger.error(f"‚ùå Another bot instance is already running: {existing_id}")
        return False


async def refresh_instance_lock(redis: Redis) -> None:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç TTL –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
    –î–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ.
    
    Args:
        redis: Redis –∫–ª–∏–µ–Ω—Ç
    """
    global instance_id
    
    while True:
        try:
            await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å—ë –µ—â—ë –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞–º
            current_holder = await redis.get(instance_lock_key)
            if current_holder:
                current_holder = current_holder.decode('utf-8') if isinstance(current_holder, bytes) else current_holder
                
                if current_holder == instance_id:
                    # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º TTL
                    await redis.expire(instance_lock_key, 300)
                    logger.debug(f"üîÑ Instance lock refreshed: {instance_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è Instance lock was taken by another instance: {current_holder}")
                    break
            else:
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–ø–∞–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è –µ—ë –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                logger.warning("‚ö†Ô∏è Instance lock disappeared, attempting to reacquire...")
                await redis.set(instance_lock_key, instance_id, ex=300)
                
        except asyncio.CancelledError:
            logger.info("üõë Instance lock refresh task cancelled")
            break
        except Exception as e:
            logger.error(f"‚ùå Error refreshing instance lock: {e}")
            await asyncio.sleep(5)


async def release_instance_lock(redis: Redis) -> None:
    """
    –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
    
    Args:
        redis: Redis –∫–ª–∏–µ–Ω—Ç
    """
    global instance_id
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Lua —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lua_script = """
        if redis.call("get", KEYS[1]) == ARGV[1] then
            return redis.call("del", KEYS[1])
        else
            return 0
        end
        """
        
        result = await redis.eval(lua_script, 1, instance_lock_key, instance_id)
        
        if result:
            logger.info(f"‚úÖ Instance lock released: {instance_id}")
        else:
            logger.warning(f"‚ö†Ô∏è Instance lock was not ours or already released")
            
    except Exception as e:
        logger.error(f"‚ùå Error releasing instance lock: {e}")


# =============================================================================
# INITIALIZATION
# =============================================================================

async def setup_dependencies() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Redis, –ë–î –∏ —Ç.–¥.)."""
    logger.info("üîß Initializing dependencies...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        redis = container.redis_client()
        await redis.ping()
        logger.info("‚úÖ Redis connected successfully")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è polling —Ä–µ–∂–∏–º–∞)
        if not settings.IS_WEB_PROCESS:
            lock_acquired = await acquire_instance_lock(redis)
            if not lock_acquired:
                logger.critical("‚ùå CRITICAL: Another bot instance is already running!")
                logger.critical("‚ùå This instance will shut down to prevent conflicts.")
                raise RuntimeError("Multiple bot instances detected - shutting down to prevent TelegramConflictError")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            asyncio.create_task(refresh_instance_lock(redis))
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize dependencies: {e}")
        raise


async def setup_bot() -> tuple[Bot, Dispatcher]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Bot –∏ Dispatcher.
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (Bot, Dispatcher)
    """
    logger.info("ü§ñ Setting up bot and dispatcher...")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    bot_instance = container.bot()
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dispatcher = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    await register_handlers(dispatcher)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middlewares
    await register_middlewares(dispatcher)
    
    logger.info("‚úÖ Bot and dispatcher configured")
    return bot_instance, dispatcher


async def register_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    
    Args:
        dp: Dispatcher
    """
    logger.info("üìù Registering handlers...")
    
    try:
        from bot.handlers.public import public_router
        from bot.handlers.admin import admin_router
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(public_router)
        dp.include_router(admin_router)
        
        logger.info(f"‚úÖ Public router: {len(public_router.sub_routers)} sub-routers registered")
        logger.info("‚úÖ Admin router registered")
        logger.info("‚úÖ Handlers registered successfully")
        
    except ImportError as e:
        logger.error(f"‚ùå Failed to import handlers: {e}")
        raise


async def register_middlewares(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware.
    
    Args:
        dp: Dispatcher
    """
    logger.info("üîå Registering middlewares...")
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º dependencies middleware
        from bot.utils.dependencies import dependencies_middleware
        dp.update.outer_middleware(dependencies_middleware)
        logger.info("‚úÖ Dependencies middleware registered")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Middleware registration issue: {e}")


# =============================================================================
# LIFECYCLE HOOKS
# =============================================================================

async def on_startup() -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    logger.info("üöÄ Starting bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–≤–∫–ª—é—á–∞—è instance lock)
    await setup_dependencies()
    
    # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    logger.info("üîÑ Removing any existing webhook...")
    try:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.warning(f"‚ö†Ô∏è Found existing webhook: {webhook_info.url}")
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook removed")
            # –î–∞—ë–º Telegram API –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            await asyncio.sleep(2)
        else:
            logger.info("‚úÖ No webhook found")
    except Exception as e:
        logger.error(f"‚ùå Error checking/removing webhook: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏–ª–∏ polling
    if settings.IS_WEB_PROCESS:
        webhook_url = await get_webhook_url()
        if not webhook_url:
            raise ValueError("Webhook URL not configured for web process")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        webhook_info = await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
            allowed_updates=dp.resolve_used_update_types()
        )
        
        logger.info(f"‚úÖ Webhook set: {webhook_url}")
        logger.info(f"üìä Webhook info: {webhook_info}")
    else:
        # Polling mode - –µ—â–µ —Ä–∞–∑ —É–±–µ–¥–∏–º—Å—è —á—Ç–æ webhook —É–¥–∞–ª–µ–Ω
        await bot.delete_webhook(drop_pending_updates=True)
        await asyncio.sleep(1)
        logger.info("‚úÖ Polling mode enabled")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_user = await bot.get_me()
    logger.info(f"‚úÖ Bot started: @{bot_user.username} (ID: {bot_user.id})")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if settings.ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                settings.ADMIN_CHAT_ID,
                "ü§ñ <b>Bot Started</b>\n\n"
                f"Mode: {'Webhook' if settings.IS_WEB_PROCESS else 'Polling'}\n"
                f"Username: @{bot_user.username}\n"
                f"ID: {bot_user.id}\n"
                f"Instance: {instance_id[:16]}..." if instance_id else "",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to notify admin: {e}")


async def on_shutdown() -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    logger.info("üõë Shutting down bot...")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if settings.ADMIN_CHAT_ID and bot:
        try:
            await bot.send_message(
                settings.ADMIN_CHAT_ID,
                "üõë <b>Bot Stopped</b>",
                parse_mode=ParseMode.HTML
            )
        except Exception:
            pass
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º instance lock
    if container is not None and not settings.IS_WEB_PROCESS:
        try:
            redis = container.redis_client()
            await release_instance_lock(redis)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error releasing instance lock: {e}")
    
    # –£–¥–∞–ª—è–µ–º webhook
    if bot:
        try:
            await bot.delete_webhook(drop_pending_updates=False)
            logger.info("‚úÖ Webhook removed")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error removing webhook: {e}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
    if container is not None:
        try:
            redis = container.redis_client()
            if redis is not None:
                await redis.close()
                logger.info("‚úÖ Redis closed")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error closing Redis: {e}")
    
    logger.info("‚úÖ Shutdown complete")


async def get_webhook_url() -> Optional[str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è webhook.
    
    Returns:
        URL webhook –∏–ª–∏ None
    """
    import os
    render_url = os.environ.get("RENDER_EXTERNAL_URL")
    if render_url:
        render_url = render_url.rstrip('/')
        webhook_path = "/webhook/bot"
        return f"{render_url}{webhook_path}"
    
    return None


# =============================================================================
# HEALTH CHECK
# =============================================================================

async def health_check(request: web.Request) -> web.Response:
    """Health check endpoint –¥–ª—è Render."""
    bot_info = None
    if bot:
        try:
            me = await bot.get_me()
            bot_info = {
                "id": me.id,
                "username": me.username,
                "first_name": me.first_name
            }
        except Exception:
            pass
    
    return web.json_response(
        {
            "status": "healthy",
            "bot": bot_info,
            "mode": "webhook" if settings.IS_WEB_PROCESS else "polling",
            "instance_id": instance_id[:16] if instance_id else None,
            "version": "2.3.0"
        },
        status=200
    )


# =============================================================================
# WEB SERVER (–¥–ª—è webhook —Ä–µ–∂–∏–º–∞)
# =============================================================================

def create_app() -> web.Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook."""
    webhook_app = web.Application()
    
    # Health check endpoints
    webhook_app.router.add_get("/health", health_check)
    webhook_app.router.add_head("/health", health_check)
    webhook_app.router.add_get("/", health_check)
    
    # Webhook handler
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_handler.register(webhook_app, path="/webhook/bot")
    
    # Setup application
    setup_application(webhook_app, dp, bot=bot)
    
    return webhook_app


async def start_webhook() -> None:
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞."""
    global app, runner
    
    host = "0.0.0.0"
    port = settings.PORT
    
    logger.info(f"üåê Starting webhook server on {host}:{port}")
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = create_app()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host=host, port=port)
    await site.start()
    
    logger.info(f"‚úÖ Webhook server started at http://{host}:{port}")
    logger.info(f"üìç Webhook endpoint: /webhook/bot")
    logger.info(f"‚ù§Ô∏è Health check: http://{host}:{port}/health")
    
    # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await shutdown_event.wait()


async def start_polling() -> None:
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling."""
    logger.info("üîÑ Starting polling mode...")
    
    try:
        # –ö–†–ò–¢–ò–ß–ù–û: –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ webhook —É–¥–∞–ª–µ–Ω
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.warning(f"‚ö†Ô∏è Webhook still exists: {webhook_info.url}, removing...")
            await bot.delete_webhook(drop_pending_updates=True)
            await asyncio.sleep(2)
        
        logger.info("‚úÖ Starting polling for updates...")
        
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            handle_signals=False  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é
        )
    except asyncio.CancelledError:
        logger.info("‚ö†Ô∏è Polling cancelled")
    except Exception as e:
        logger.error(f"‚ùå Polling error: {e}", exc_info=True)
        raise


# =============================================================================
# SIGNAL HANDLERS
# =============================================================================

def handle_signal(signum: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
    logger.warning(f"‚ö†Ô∏è Received signal {signum}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if shutdown_event:
        shutdown_event.set()


async def cleanup() -> None:
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤."""
    logger.info("üßπ Cleaning up resources...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    if dp:
        try:
            if hasattr(dp, 'stop_polling') and callable(dp.stop_polling):
                stop_result = dp.stop_polling()
                if hasattr(stop_result, '__await__'):
                    await stop_result
        except Exception as e:
            logger.debug(f"Dispatcher stop: {e}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    if runner:
        try:
            await runner.cleanup()
            logger.info("‚úÖ Web server stopped")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Web server cleanup error: {e}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    if bot and bot.session:
        try:
            await bot.session.close()
            logger.info("‚úÖ Bot session closed")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Bot session close error: {e}")
    
    logger.info("‚úÖ Cleanup complete")


# =============================================================================
# MAIN
# =============================================================================

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global bot, dp, container, shutdown_event
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_format = "json" if settings.logging.json_enabled else "text"
    setup_logging(level=settings.log_level, format=log_format)
    
    logger.info("=" * 60)
    logger.info("ü§ñ Mining AI Bot - Production Ready v2.3.0")
    logger.info("=" * 60)
    logger.info(f"üìù Log level: {settings.log_level}")
    logger.info(f"üîß Mode: {'Webhook (Web Process)' if settings.IS_WEB_PROCESS else 'Polling (Worker)'}")
    logger.info(f"üåç Port: {settings.PORT}")
    logger.info("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    shutdown_event = asyncio.Event()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = Container()
        container.wire(
            modules=[__name__],
            packages=["bot.handlers", "bot.middlewares"]
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
        bot, dp = await setup_bot()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º lifecycle hooks
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(sig, lambda s=sig: handle_signal(s))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if settings.IS_WEB_PROCESS:
            # –ó–∞–ø—É—Å–∫–∞–µ–º startup hooks –≤—Ä—É—á–Ω—É—é
            await on_startup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
            await start_webhook()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º shutdown hooks
            await on_shutdown()
        else:
            # –í polling —Ä–µ–∂–∏–º–µ hooks –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            await start_polling()
            
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è Keyboard interrupt")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}", exc_info=True)
        raise
    finally:
        await cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Bot stopped by user")
    except Exception as e:
        logger.error(f"üí• Unhandled exception: {e}", exc_info=True)
        sys.exit(1)