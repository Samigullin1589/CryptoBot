# =================================================================================
# –§–∞–π–ª: bot/main.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –§–ò–ù–ê–õ–¨–ù–ê–Ø –£–°–ò–õ–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, —Ä–æ—É—Ç–∏–Ω–≥–æ–º –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π
#           –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.
# =================================================================================

import asyncio
import logging

import redis.asyncio as redis
from aiohttp import ClientSession
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

from bot.config.config import settings
from bot.utils.dependencies import Deps
from bot.utils.logging_setup import setup_logging
from bot.middlewares.activity_middleware import ActivityMiddleware
from bot.middlewares.throttling_middleware import ThrottlingMiddleware
from bot.jobs.scheduled_tasks import setup_jobs

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —Å —Ä–æ—É—Ç–µ—Ä–∞–º–∏
from bot.handlers import admin, game, public, tools, threats

logger = logging.getLogger(__name__)

def register_routers(dp: Dispatcher):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —É–ø—Ä–æ—â–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(admin.admin_menu.admin_router)
    dp.include_router(admin.verification_admin_handler.router)
    dp.include_router(admin.stats_handler.stats_router)
    dp.include_router(admin.moderation_handler.moderation_router)
    dp.include_router(admin.game_admin_handler.router)

    # –ü—É–±–ª–∏—á–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(public.common_handler.router)
    dp.include_router(public.menu_handlers.router)
    dp.include_router(public.price_handler.router)
    dp.include_router(public.asic_handler.router)
    dp.include_router(public.news_handler.router)
    dp.include_router(public.quiz_handler.router)
    dp.include_router(public.market_info_handler.router)
    dp.include_router(public.crypto_center_handler.router)
    dp.include_router(public.verification_public_handler.router)
    dp.include_router(public.achievements_handler.router)
    dp.include_router(public.market_handler.router) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—ã–Ω–∫–∞

    # –ò–≥—Ä–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(game.mining_game_handler.game_router)

    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    dp.include_router(tools.calculator_handler.calculator_router)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥—Ä–æ–∑ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –≤—Å–µ, —á—Ç–æ –Ω–µ –ø–æ–π–º–∞–ª–∏ –¥—Ä—É–≥–∏–µ)
    dp.include_router(threats.threat_handler.threat_router)

    logger.info("–í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –º–µ–Ω—é Telegram."""
    commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="check", description="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="infoverif", description="üìÑ –£–∑–Ω–∞—Ç—å –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
        BotCommand(command="admin", description="üîí –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def on_startup(bot: Bot, deps: Deps):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_startup...")
    await set_bot_commands(bot)
    await deps.coin_list_service.update_coin_list()
    setup_jobs(deps.scheduler, deps)
    deps.scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")
    if deps.admin_service:
        await deps.admin_service.notify_admins("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info("–ü—Ä–æ—Ü–µ–¥—É—Ä—ã on_startup –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

async def on_shutdown(bot: Bot, deps: Deps):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è —á–∏—Å—Ç–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä on_shutdown...")
    if deps.admin_service:
        await deps.admin_service.notify_admins("‚ùóÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!")
    if deps.scheduler and deps.scheduler.running:
        deps.scheduler.shutdown(wait=False)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    if deps.redis_pool:
        await deps.redis_pool.close()
        logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π Redis –∑–∞–∫—Ä—ã—Ç.")
    if bot.session:
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    logger.info("–ü—Ä–æ—Ü–µ–¥—É—Ä—ã on_shutdown –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞."""
    setup_logging(level=settings.log_level, format="json") # JSON-–ª–æ–≥–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    
    redis_pool = redis.from_url(str(settings.REDIS_URL), encoding="utf-8", decode_responses=True)
    storage = RedisStorage(redis=redis_pool)

    bot = Bot(token=settings.BOT_TOKEN.get_secret_value(), default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=storage)

    register_routers(dp)

    async with ClientSession() as http_session:
        deps = await Deps.build(
            settings=settings,
            http_session=http_session,
            redis_pool=redis_pool,
            bot=bot
        )

        dp.update.middleware(ThrottlingMiddleware(storage=storage))
        dp.update.middleware(ActivityMiddleware(user_service=deps.user_service))
        logger.info("–í—Å–µ Middleware —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)

        await bot.delete_webhook(drop_pending_updates=True)

        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø—Ä–æ—Å–∞ Telegram...")
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤–æ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        await dp.start_polling(bot, deps=deps)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt/SystemExit).")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)