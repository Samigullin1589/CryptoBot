# =================================================================================
# bot/containers.py
# –í–µ—Ä—Å–∏—è: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø (28.10.2025) - Distinguished Engineer
# –û–ø–∏—Å–∞–Ω–∏–µ:
#   ‚Ä¢ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ BOT_TOKEN —á–µ—Ä–µ–∑ providers.Callable
#   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–æ–¥—ã init_resources() –∏ shutdown_resources()
#   ‚Ä¢ –£–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =================================================================================

import logging
from dependency_injector import containers, providers
from redis.asyncio import Redis
from aiogram import Bot

from bot.config.settings import Settings
from bot.services.achievement_service import AchievementService
from bot.services.admin_service import AdminService
from bot.services.asic_service import AsicService
from bot.services.coin_alias_service import CoinAliasService
from bot.services.coin_list_service import CoinListService
from bot.services.crypto_center_service import CryptoCenterService
from bot.services.market_data_service import MarketDataService
from bot.services.mining_game_service import MiningGameService
from bot.services.news_service import NewsService
from bot.services.price_service import PriceService
from bot.services.quiz_service import QuizService
from bot.services.user_service import UserService
from bot.services.verification_service import VerificationService
from bot.services.ai_content_service import AIContentService
from bot.utils.http_client import HttpClient
from bot.services.parser_service import ParserService
from bot.services.mining_service import MiningService
from bot.services.moderation_service import ModerationService
from bot.services.security_service import SecurityService
from bot.services.image_vision_service import ImageVisionService

logger = logging.getLogger(__name__)


class Container(containers.DeclarativeContainer):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    """
    wiring_config = containers.WiringConfiguration(
        modules=[
            "bot.main", 
            "bot.utils.dependencies", 
            "bot.jobs.scheduled_tasks",
        ],
        packages=[
            "bot.handlers", 
            "bot.middlewares",
        ],
    )

    # ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
    config = providers.Singleton(Settings)

    # ==================== BOT TOKEN (–ò–°–ü–†–ê–í–õ–ï–ù–û) ====================
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º providers.Callable –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    # —á—Ç–æ–±—ã –º–µ—Ç–æ–¥ get_secret_value() –≤—ã–∑—ã–≤–∞–ª—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    bot_token = providers.Callable(
        lambda cfg: cfg.BOT_TOKEN.get_secret_value() if cfg.BOT_TOKEN else "",
        config
    )

    # ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ ====================
    bot = providers.Singleton(
        Bot, 
        token=bot_token
    )

    redis_client = providers.Resource(
        Redis.from_url,
        url=config.provided.REDIS_URL,
        decode_responses=True,
    )

    http_client = providers.Resource(
        HttpClient, 
        config=config.provided.endpoints
    )

    # ==================== –°–ï–†–í–ò–°–´ ====================
    ai_content_service = providers.Singleton(
        AIContentService
    )

    image_vision_service = providers.Singleton(
        ImageVisionService, 
        ai_service=ai_content_service
    )

    user_service = providers.Singleton(
        UserService, 
        redis_client=redis_client
    )

    coin_list_service = providers.Singleton(
        CoinListService, 
        redis_client=redis_client, 
        http_client=http_client, 
        config=config.provided.coin_list_service
    )

    coin_alias_service = providers.Singleton(
        CoinAliasService, 
        redis_client=redis_client
    )

    parser_service = providers.Singleton(
        ParserService, 
        http_client=http_client
    )

    market_data_service = providers.Singleton(
        MarketDataService, 
        redis_client=redis_client, 
        http_client=http_client, 
        coin_list_service=coin_list_service, 
        config=config.provided.market_data
    )

    price_service = providers.Singleton(
        PriceService, 
        redis_client=redis_client, 
        market_data_service=market_data_service, 
        config=config.provided.price_service
    )

    news_service = providers.Singleton(
        NewsService, 
        redis_client=redis_client, 
        http_client=http_client
    )

    quiz_service = providers.Singleton(
        QuizService, 
        ai_content_service=ai_content_service
    )

    achievement_service = providers.Singleton(
        AchievementService, 
        market_data_service=market_data_service, 
        redis_client=redis_client
    )

    asic_service = providers.Singleton(
        AsicService, 
        parser_service=parser_service, 
        redis_client=redis_client
    )

    crypto_center_service = providers.Singleton(
        CryptoCenterService, 
        ai_service=ai_content_service, 
        news_service=news_service, 
        redis_client=redis_client
    )

    mining_service = providers.Singleton(
        MiningService, 
        market_data_service=market_data_service
    )

    mining_game_service = providers.Singleton(
        MiningGameService, 
        user_service=user_service, 
        asic_service=asic_service, 
        achievement_service=achievement_service, 
        redis_client=redis_client
    )

    verification_service = providers.Singleton(
        VerificationService, 
        user_service=user_service
    )

    admin_service = providers.Singleton(
        AdminService, 
        redis_client=redis_client, 
        bot=bot
    )

    moderation_service = providers.Singleton(
        ModerationService, 
        redis_client=redis_client, 
        bot=bot
    )

    security_service = providers.Singleton(
        SecurityService, 
        ai_content_service=ai_content_service, 
        image_vision_service=image_vision_service, 
        moderation_service=moderation_service, 
        redis_client=redis_client, 
        bot=bot
    )

    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–°–£–†–°–ê–ú–ò
    # =============================================================================

    async def init_resources(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Redis, HTTP-–∫–ª–∏–µ–Ω—Ç).
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
        """
        logger.info("üîß –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis connection
            await self.redis_client.init()
            logger.info("‚úÖ Redis client —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis: {e}")
            raise

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP client
            await self.http_client.init()
            logger.info("‚úÖ HTTP client —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTTP client: {e}")
            raise

        logger.info("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    async def shutdown_resources(self) -> None:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (Redis, HTTP-–∫–ª–∏–µ–Ω—Ç).
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
        """
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP client
            await self.http_client.shutdown()
            logger.info("‚úÖ HTTP client —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ HTTP client: {e}")

        try:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ Redis connection
            await self.redis_client.shutdown()
            logger.info("‚úÖ Redis client —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Redis: {e}")

        logger.info("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")