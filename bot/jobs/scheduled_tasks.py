# bot/jobs/scheduled_tasks.py
# =================================================================================
# –§–∞–π–ª: bot/jobs/scheduled_tasks.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –ü–û–õ–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è setup_jobs.
# =================================================================================

import logging
from typing import TYPE_CHECKING
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ò—Å–ø–æ–ª—å–∑—É–µ–º TYPE_CHECKING –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Ç–∏–ø–æ–≤, –∏–∑–±–µ–≥–∞—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
if TYPE_CHECKING:
    from bot.utils.dependencies import Deps

logger = logging.getLogger(__name__)


# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á ---

async def update_asics_db_job(deps: "Dependencies"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ASIC-–º–∞–π–Ω–µ—Ä–æ–≤."""
    logger.info("Running scheduled job: 'update_asics_db_job'...")
    try:
        updated_count = await deps.asic_service.update_asic_list_from_sources()
        logger.info(f"Scheduled ASIC DB update job completed. Updated/added {updated_count} ASICs.")
    except Exception as e:
        logger.error(f"Error in scheduled job 'update_asics_db_job': {e}", exc_info=True)


async def send_news_job(deps: "Dependencies"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–±–æ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."""
    logger.info("Running scheduled job: 'send_news_job'...")
    try:
        news_service = deps.news_service
        bot = deps.bot
        news_chat_id = deps.settings.NEWS_CHAT_ID
        
        if not news_chat_id:
            logger.warning("NEWS_CHAT_ID not set, skipping job.")
            return

        await news_service.send_news_digest(bot, news_chat_id)
        logger.info(f"Scheduled news digest sent to chat {news_chat_id}.")
    except Exception as e:
        logger.error(f"Error in scheduled job 'send_news_job': {e}", exc_info=True)


async def send_morning_summary_job(deps: "Dependencies"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    logger.info("Running scheduled job: 'send_morning_summary_job'...")
    try:
        admin_service = deps.admin_service
        bot = deps.bot
        admin_chat_id = deps.settings.ADMIN_CHAT_ID

        if not admin_chat_id:
            logger.warning("ADMIN_CHAT_ID not set, skipping job.")
            return

        stats_text, _ = await admin_service.get_stats_page_content("main")
        header = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        await bot.send_message(admin_chat_id, f"{header}{stats_text}")
        logger.info("Morning summary job completed.")
    except Exception as e:
        logger.error(f"Error in scheduled job 'send_morning_summary_job': {e}", exc_info=True)


async def send_leaderboard_job(deps: "Dependencies"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏."""
    logger.info("Running scheduled job: 'send_leaderboard_job'...")
    try:
        game_service = deps.mining_game_service
        bot = deps.bot
        news_chat_id = deps.settings.NEWS_CHAT_ID

        if not news_chat_id:
            logger.warning("NEWS_CHAT_ID not set for leaderboard, skipping job.")
            return

        leaderboard_data = await game_service.get_leaderboard(top_n=10)
        
        if not leaderboard_data:
            logger.info("No data for leaderboard, skipping.")
            return

        leaderboard_rows = [f"üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏</b> üèÜ\n"]
        for i, (user_id, balance) in enumerate(leaderboard_data.items(), 1):
            user_info = await deps.user_service.get_user_info(user_id)
            username = user_info.get('username') or f"User {user_id}"
            emoji = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else "üîπ"
            leaderboard_rows.append(f"{emoji} {i}. @{username} - {balance:,.2f} –º–æ–Ω–µ—Ç")

        text = "\n".join(leaderboard_rows)
        await bot.send_message(news_chat_id, text)
        logger.info("Leaderboard sent successfully.")
    except Exception as e:
        logger.error(f"Error in scheduled job 'send_leaderboard_job': {e}", exc_info=True)


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á ---

def setup_jobs(scheduler: AsyncIOScheduler, deps: "Dependencies"):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    """
    try:
        # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ASIC-–æ–≤ - –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        scheduler.add_job(
            update_asics_db_job, 'interval', hours=6,
            id='update_asics_db', replace_existing=True, args=[deps]
        )
        # –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π - –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
        scheduler.add_job(
            send_news_job, 'interval', hours=3,
            id='send_news', replace_existing=True, args=[deps]
        )
        # –ó–∞–¥–∞—á–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ UTC
        scheduler.add_job(
            send_morning_summary_job, 'cron', hour=9, minute=0,
            id='morning_summary', replace_existing=True, args=[deps]
        )
        # –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ - –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 12:00 –ø–æ UTC
        scheduler.add_job(
            send_leaderboard_job, 'cron', day_of_week='mon', hour=12, minute=0,
            id='weekly_leaderboard', replace_existing=True, args=[deps]
        )
        
        logger.info("–í—Å–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏: {e}", exc_info=True)

