# ===============================================================
# –§–∞–π–ª: bot/jobs/scheduled_tasks.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –£–õ–£–ß–®–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á. –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–ª—É—á–∞–µ—Ç
# –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä 'deps'.
# ===============================================================

import logging
from typing import TYPE_CHECKING

# --- –£–õ–£–ß–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º TYPE_CHECKING –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Ç–∏–ø–æ–≤, –∏–∑–±–µ–≥–∞—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ ---
if TYPE_CHECKING:
    from bot.utils.dependencies import Dependencies

logger = logging.getLogger(__name__)


async def update_asics_db_job(deps: "Dependencies"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ASIC-–º–∞–π–Ω–µ—Ä–æ–≤."""
    logger.info("Running scheduled job: 'update_asics_db_job'...")
    try:
        # --- –£–õ–£CH–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ---
        updated_count = await deps.asic_service.update_asic_list_from_sources()
        logger.info(f"Scheduled ASIC DB update job completed. Updated/added {updated_count} ASICs.")
    except Exception as e:
        logger.error(f"Error in scheduled job 'update_asics_db_job': {e}", exc_info=True)


async def send_news_job(deps: "Dependencies"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–±–æ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."""
    logger.info("Running scheduled job: 'send_news_job'...")
    try:
        # --- –£–õ–£CH–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ---
        news_service = deps.news_service
        bot = deps.bot
        news_chat_id = deps.settings.admin.news_chat_id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ scheduler.py, –Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–≤—Ä–µ–¥–∏—Ç
        if not news_chat_id:
            logger.warning("NEWS_CHAT_ID not set, skipping job.")
            return

        await news_service.send_news_digest(bot, news_chat_id)
        logger.info(f"Scheduled news digest sent to chat {news_chat_id}.")
    except Exception as e:
        logger.error(f"Error in scheduled job 'send_news_job': {e}", exc_info=True)


async def send_morning_summary_job(deps: "Dependencies"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    logger.info("Running scheduled job: 'send_morning_summary_job'...")
    try:
        admin_service = deps.admin_service
        bot = deps.bot
        admin_chat_id = deps.settings.admin.admin_chat_id

        stats_text = await admin_service.get_stats_page_content("general")
        header = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        await bot.send_message(admin_chat_id, f"{header}{stats_text}")
        logger.info("Morning summary job completed.")
    except Exception as e:
        logger.error(f"Error in scheduled job 'send_morning_summary_job': {e}", exc_info=True)


async def send_leaderboard_job(deps: "Dependencies"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏."""
    logger.info("Running scheduled job: 'send_leaderboard_job'...")
    try:
        game_service = deps.mining_game_service
        bot = deps.bot
        news_chat_id = deps.settings.admin.news_chat_id # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç

        leaderboard_data = await game_service.get_leaderboard(top_n=10)
        
        if not leaderboard_data:
            logger.info("No data for leaderboard, skipping.")
            return

        leaderboard_rows = [f"üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏</b> üèÜ\n"]
        for i, (user_id, balance) in enumerate(leaderboard_data.items(), 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await deps.user_service.get_user_info(user_id) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞
            username = user_info.get('username') or f"User {user_id}"
            emoji = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else "üîπ"
            leaderboard_rows.append(f"{emoji} {i}. @{username} - {balance:,.2f} –º–æ–Ω–µ—Ç")

        text = "\n".join(leaderboard_rows)
        await bot.send_message(news_chat_id, text)
        logger.info("Leaderboard sent successfully.")
    except Exception as e:
        logger.error(f"Error in scheduled job 'send_leaderboard_job': {e}", exc_info=True)