# =================================================================================
# –§–∞–π–ª: bot/jobs/scheduled_tasks.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, –≤–∫–ª—é—á–∞—è –≤–∞—à–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ
# –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
# =================================================================================

import logging
from typing import TYPE_CHECKING
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ò—Å–ø–æ–ª—å–∑—É–µ–º TYPE_CHECKING –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Ç–∏–ø–æ–≤, –∏–∑–±–µ–≥–∞—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
if TYPE_CHECKING:
    from bot.utils.dependencies import Deps

logger = logging.getLogger(__name__)


# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á ---

async def update_asics_db_job(deps: "Deps"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ASIC-–º–∞–π–Ω–µ—Ä–æ–≤."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã ASIC...")
    try:
        updated_count = await deps.asic_service.update_asic_list_from_sources()
        logger.info(f"Scheduler: –ë–∞–∑–∞ ASIC –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–æ/–¥–æ–±–∞–≤–ª–µ–Ω–æ: {updated_count}.")
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'update_asics_db_job': {e}", exc_info=True)


async def send_news_job(deps: "Deps"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–±–æ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    try:
        if not deps.settings.NEWS_CHAT_ID:
            logger.warning("Scheduler: NEWS_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏.")
            return

        await deps.news_service.send_news_digest(deps.bot, deps.settings.NEWS_CHAT_ID)
        logger.info(f"Scheduler: –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {deps.settings.NEWS_CHAT_ID}.")
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'send_news_job': {e}", exc_info=True)


async def send_morning_summary_job(deps: "Deps"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏...")
    try:
        if not deps.settings.ADMIN_CHAT_ID:
            logger.warning("Scheduler: ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏.")
            return

        stats_text, _ = await deps.admin_service.get_stats_page_content("main")
        header = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        await deps.bot.send_message(deps.settings.ADMIN_CHAT_ID, f"{header}{stats_text}")
        logger.info("Scheduler: –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'send_morning_summary_job': {e}", exc_info=True)


async def send_leaderboard_job(deps: "Deps"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤...")
    try:
        if not deps.settings.NEWS_CHAT_ID:
            logger.warning("Scheduler: NEWS_CHAT_ID –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫.")
            return

        leaderboard_data = await deps.mining_game_service.get_leaderboard(top_n=10)
        if not leaderboard_data:
            logger.info("Scheduler: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")
            return

        leaderboard_rows = [f"üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏</b> üèÜ\n"]
        for i, (user_id, balance) in enumerate(leaderboard_data.items(), 1):
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º get_user_profile –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            profile = await deps.user_service.get_user_profile(int(user_id))
            username = profile.username if profile and profile.username != "N/A" else f"User_{user_id}"
            emoji = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else "üîπ"
            leaderboard_rows.append(f"{emoji} {i}. {username} - {balance:,.2f} –º–æ–Ω–µ—Ç")

        text = "\n".join(leaderboard_rows)
        await deps.bot.send_message(deps.settings.NEWS_CHAT_ID, text)
        logger.info("Scheduler: –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'send_leaderboard_job': {e}", exc_info=True)


async def check_market_achievements_for_all_users(deps: "Deps"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...")
    all_user_ids = await deps.user_service.get_all_user_ids()
    if not all_user_ids:
        logger.info("Scheduler: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
        return

    logger.info(f"Scheduler: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è {len(all_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    for user_id in all_user_ids:
        try:
            unlocked_achievements = await deps.achievement_service.check_market_events(user_id)
            if unlocked_achievements:
                full_list = await deps.achievement_service.get_user_achievements(user_id)
                for ach in unlocked_achievements:
                    for unlocked_data in full_list:
                        if unlocked_data.get('name') == ach.name:
                             message = (
                                f"üèÜ <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</b>\n\n"
                                f"<b>{unlocked_data['name']}</b>\n"
                                f"<i>{unlocked_data['description']}</i>\n\n"
                                f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: +{unlocked_data['reward']} –º–æ–Ω–µ—Ç!"
                            )
                             await deps.bot.send_message(user_id, message)
                             break
        except Exception as e:
            logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á ---

def setup_jobs(scheduler: AsyncIOScheduler, deps: "Deps"):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    try:
        scheduler.add_job(update_asics_db_job, 'interval', hours=6, id='update_asics_db', replace_existing=True, args=[deps])
        scheduler.add_job(send_news_job, 'interval', hours=3, id='send_news', replace_existing=True, args=[deps])
        scheduler.add_job(send_morning_summary_job, 'cron', hour=9, minute=0, id='morning_summary', replace_existing=True, args=[deps])
        scheduler.add_job(send_leaderboard_job, 'cron', day_of_week='mon', hour=12, minute=0, id='weekly_leaderboard', replace_existing=True, args=[deps])
        scheduler.add_job(check_market_achievements_for_all_users, 'interval', minutes=15, id='market_achievements_check', replace_existing=True, args=[deps])
        
        logger.info(f"–í—Å–µ {len(scheduler.get_jobs())} –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏: {e}", exc_info=True)
