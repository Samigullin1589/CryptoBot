# =================================================================================
# –§–∞–π–ª: bot/jobs/scheduled_tasks.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 'update_coin_list_job' –¥–ª—è
#              —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–∞–º–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –≤ —Ñ–æ–Ω–µ.
# =================================================================================

import logging
from typing import TYPE_CHECKING
from apscheduler.schedulers.asyncio import AsyncIOScheduler

if TYPE_CHECKING:
    from bot.utils.dependencies import Deps

logger = logging.getLogger(__name__)

# =================================================================
# --- –õ–û–ì–ò–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ê–î–ê–ß ---
# =================================================================

async def update_coin_list_job(deps: "Deps"):
    """[–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê] –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –≤ —Ñ–æ–Ω–µ."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç...")
    try:
        await deps.coin_list_service.update_coin_list()
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'update_coin_list_job': {e}", exc_info=True)

async def update_asics_db_job(deps: "Deps"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ASIC-–º–∞–π–Ω–µ—Ä–æ–≤."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã ASIC...")
    try:
        updated_count = await deps.asic_service.update_asic_list_from_sources()
        logger.info(f"Scheduler: –ë–∞–∑–∞ ASIC –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–æ/–¥–æ–±–∞–≤–ª–µ–Ω–æ: {updated_count}.")
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'update_asics_db_job': {e}", exc_info=True)


async def send_news_job(deps: "Deps"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–±–æ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    try:
        news_chat_id = deps.settings.NEWS_CHAT_ID
        if not news_chat_id:
            logger.warning("Scheduler: NEWS_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")
            return
        logger.info(f"Scheduler: –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {news_chat_id}.")
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'send_news_job': {e}", exc_info=True)


async def send_morning_summary_job(deps: "Deps"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏...")
    try:
        admin_chat_id = deps.settings.ADMIN_CHAT_ID
        if not admin_chat_id:
            logger.warning("Scheduler: ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏.")
            return

        stats, _ = await deps.admin_service.get_stats_page_content("general")
        header = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        await deps.bot.send_message(admin_chat_id, f"{header}{stats}")
        logger.info("Scheduler: –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'send_morning_summary_job': {e}", exc_info=True)


async def send_leaderboard_job(deps: "Deps"):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤...")
    try:
        news_chat_id = deps.settings.NEWS_CHAT_ID
        if not news_chat_id:
            logger.warning("Scheduler: NEWS_CHAT_ID –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫.")
            return

        leaderboard_data = await deps.mining_game_service.get_leaderboard(top_n=10)
        if not leaderboard_data:
            logger.info("Scheduler: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")
            return

        leaderboard_rows = [f"üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏</b> üèÜ\n"]
        for i, (user_id, balance) in enumerate(leaderboard_data.items(), 1):
            user = await deps.user_service.get_user(int(user_id))
            username = user.first_name if user else f"User_{user_id}"
            emoji = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else "üîπ"
            leaderboard_rows.append(f"{emoji} {i}. {username} - {balance:,.2f} –º–æ–Ω–µ—Ç")

        text = "\n".join(leaderboard_rows)
        await deps.bot.send_message(news_chat_id, text)
        logger.info("Scheduler: –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 'send_leaderboard_job': {e}", exc_info=True)


async def check_market_achievements_for_all_users(deps: "Deps"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...")
    all_user_ids = await deps.user_service.get_all_user_ids()
    if not all_user_ids:
        return

    logger.info(f"Scheduler: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è {len(all_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    for user_id in all_user_ids:
        try:
            unlocked_achievements = await deps.achievement_service.check_market_events(user_id)
            if unlocked_achievements:
                for ach in unlocked_achievements:
                    message = (
                        f"üèÜ <b>–ù–æ–≤–æ–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</b>\n\n"
                        f"<b>{ach.name}</b>\n"
                        f"<i>{ach.description}</i>\n\n"
                        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: +{ach.reward_coins} –º–æ–Ω–µ—Ç!"
                    )
                    await deps.bot.send_message(user_id, message)
        except Exception as e:
            logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# =================================================================
# --- –§–£–ù–ö–¶–ò–Ø-–†–ï–ì–ò–°–¢–†–ê–¢–û–† ---
# =================================================================

def setup_jobs(scheduler: AsyncIOScheduler, deps: "Deps"):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    """
    try:
        jobs = [
            {
                "func": update_coin_list_job, "trigger": "interval",
                "kwargs": {"hours": deps.settings.coin_list_service.update_interval_hours},
                "id": "update_coin_list"
            },
            {
                "func": update_asics_db_job, "trigger": "interval",
                "kwargs": {"hours": deps.settings.asic_service.update_interval_hours},
                "id": "update_asics_db"
            },
            {
                "func": send_news_job, "trigger": "interval",
                "kwargs": {"hours": 3}, "id": "send_news"
            },
            {
                "func": send_morning_summary_job, "trigger": "cron",
                "kwargs": {"hour": 9, "minute": 0}, "id": "morning_summary"
            },
            {
                "func": send_leaderboard_job, "trigger": "cron",
                "kwargs": {"day_of_week": "mon", "hour": 12, "minute": 0},
                "id": "weekly_leaderboard"
            },
            {
                "func": check_market_achievements_for_all_users, "trigger": "interval",
                "kwargs": {"minutes": 15}, "id": "market_achievements_check"
            },
        ]

        for job in jobs:
            scheduler.add_job(
                job["func"],
                trigger=job["trigger"],
                id=job["id"],
                replace_existing=True,
                args=[deps],
                **job["kwargs"]
            )
        
        logger.info(f"–í—Å–µ {len(scheduler.get_jobs())} –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
    
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: {e}", exc_info=True)