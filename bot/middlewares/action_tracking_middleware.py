# ===============================================================
# –§–∞–π–ª: bot/middlewares/action_tracking_middleware.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –û–ø–∏—Å–∞–Ω–∏–µ: Middleware –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥ –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏). –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π
# StatsMiddleware.
# ===============================================================
import logging
from typing import Callable, Dict, Any, Awaitable, Optional

from aiogram import BaseMiddleware
from aiogram.types import Update, Message, CallbackQuery

from bot.services.admin_service import AdminService

logger = logging.getLogger(__name__)

class ActionTrackingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫.
    
    –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∏–∑
      —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö callback-–¥–∞–Ω–Ω—ã—Ö.
    - –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –í—Å—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–∞
      –≤ AdminService.
    """
    def __init__(self, admin_service: AdminService):
        self.admin_service = admin_service

    def _parse_action_name(self, event: Update) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Å–æ–±—ã—Ç–∏—è.
        
        :param event: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ Update.
        :return: –ò–º—è –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å.
        """
        if event.message and event.message.text:
            text = event.message.text
            if text.startswith('/'):
                return text.split()[0] # e.g., "/start"
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # 'üíπ –ö—É—Ä—Å' -> 'nav:price'
            
        if event.callback_query and event.callback_query.data:
            data = event.callback_query.data
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'domain:action:value' –≤ 'domain:action' –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä, 'game_nav:shop:1' –∏ 'game_nav:shop:2' –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞–∫ 'game_nav:shop'
            parts = data.split(':')
            if len(parts) > 1:
                return f"{parts[0]}:{parts[1]}" # e.g., "nav:price", "game_action:start"
            return data # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤ –≤—Ä–æ–¥–µ "back_to_main_menu"
            
        return None

    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è.
        """
        user = data.get('event_from_user')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Å–ª–µ–¥–∏—Ç—å –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
        if user:
            action_name = self._parse_action_name(event)
            if action_name:
                try:
                    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å—É
                    await self.admin_service.track_action(user.id, action_name)
                    logger.debug(f"Tracked action '{action_name}' for user {user.id}")
                except Exception as e:
                    logger.error(f"Failed to track action '{action_name}' for user {user.id}: {e}")

        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        return await handler(event, data)
