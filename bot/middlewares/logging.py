"""
Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –æ—à–∏–±–æ–∫.
"""
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Update, TelegramObject
import logging

logger = logging.getLogger(__name__)


class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ü–µ–ø–æ—á–∫–µ
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            data: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if isinstance(event, Update):
            update_info = self._get_update_info(event)
            logger.info(f"üì® Received update: {update_info}")
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            result = await handler(event, data)
            return result
            
        except Exception as e:
            logger.error(
                f"‚ùå Error processing update: {e}",
                exc_info=True,
                extra={"update": event.model_dump() if hasattr(event, "model_dump") else str(event)}
            )
            raise
    
    @staticmethod
    def _get_update_info(update: Update) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        """
        if update.message:
            user = update.message.from_user
            text = update.message.text or "[media]"
            return f"Message from @{user.username} ({user.id}): {text}"
        elif update.callback_query:
            user = update.callback_query.from_user
            data = update.callback_query.data
            return f"Callback from @{user.username} ({user.id}): {data}"
        elif update.inline_query:
            user = update.inline_query.from_user
            query = update.inline_query.query
            return f"Inline query from @{user.username} ({user.id}): {query}"
        else:
            return f"Update type: {update.event_type}"