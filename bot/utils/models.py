# =================================================================================
# –§–∞–π–ª: bot/utils/models.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø, –ê–í–ì–£–°–¢ 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π –∏ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –Ω–∞–±–æ—Ä Pydantic-–º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.
# =================================================================================

from __future__ import annotations
from typing import Optional, List, Any, Dict
from pydantic import BaseModel, Field

class Coin(BaseModel):
    """
    Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ,
    –ø–æ–ª—É—á–∞–µ–º—ã—Ö –æ—Ç API CoinGecko.
    """
    id: str = Field(description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä CoinGecko (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'bitcoin')")
    symbol: str = Field(description="–¢–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'btc')")
    name: str = Field(description="–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Bitcoin')")

class PriceInfo(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.
    """
    price: float
    market_cap: Optional[float] = None
    volume_24h: Optional[float] = None
    change_24h: Optional[float] = None

class MiningEvent(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –≤–ª–∏—è—é—â–µ–≥–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–π–Ω–∏–Ω–≥–∞.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ events_config.json.
    """
    name: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    description: str = Field(description="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    probability: float = Field(ge=0.0, le=1.0, description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è (0.0-1.0)")
    profit_multiplier: float = Field(default=1.0, description="–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ—Ö–æ–¥–∞ (–Ω–∞–ø—Ä., 1.5 –¥–ª—è +50%)")
    cost_multiplier: float = Field(default=1.0, description="–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞—Ç—Ä–∞—Ç (–Ω–∞–ø—Ä., 0.5 –¥–ª—è -50%)")

class AsicMiner(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ASIC-–º–∞–π–Ω–µ—Ä–∞."""
    id: str
    name: str
    hashrate: str
    power: int
    algorithm: str
    profitability: Optional[float] = None
    price: Optional[float] = None

class NewsArticle(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏."""
    title: str
    url: str
    body: Optional[str] = None # –°–¥–µ–ª–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º, —Ç.–∫. –Ω–µ –≤—Å–µ RSS –æ—Ç–¥–∞—é—Ç —Ç–µ–ª–æ
    source: str
    timestamp: Optional[int] = None # –°–¥–µ–ª–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
    published_at: Optional[str] = None # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞—Ç
    ai_summary: Optional[str] = None

class AirdropProject(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è Airdrop-–ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Crypto Center."""
    id: str
    name: str
    description: str
    status: str
    tasks: List[str]
    guide_url: Optional[str] = None

class Achievement(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ achievements_config.json.
    """
    id: str
    name: str
    description: str
    reward_coins: float
    trigger_event: str
    type: str = "static" # 'static' –∏–ª–∏ 'dynamic'
    trigger_conditions: Optional[Dict[str, Any]] = None

class MiningSessionResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–∏."""
    asic_name: str
    user_tariff_name: str
    gross_earned: float
    total_electricity_cost: float
    net_earned: float
    event_description: Optional[str] = None
    unlocked_achievement: Optional[Achievement] = None

class MarketListing(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –ª–æ—Ç–∞, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –Ω–∞ —Ä—ã–Ω–∫–µ.
    """
    id: str
    seller_id: int
    price: float
    created_at: int
    asic_data: str # –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–∫–∞ –≤ –≤–∏–¥–µ JSON-—Å—Ç—Ä–æ–∫–∏

class QuizQuestion(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ."""
    question: str
    options: List[str]
    correct_option_index: int
    explanation: Optional[str] = None

class AIVerdict(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    """
    intent: str = Field(default="other", description="–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    toxicity_score: float = Field(default=0.0, description="–û—Ü–µ–Ω–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç 0.0 –¥–æ 1.0.")
    is_potential_scam: bool = Field(default=False, description="True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.")
    is_potential_phishing: bool = Field(default=False, description="True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏.")

# --- –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ---

class VerificationData(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –Ø–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ User.
    """
    is_verified: bool = False
    passport_verified: bool = False
    deposit: float = 0.0
    country_code: str = "üá∑üá∫" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

class User(BaseModel):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –ø—Ä–æ—Ñ–∏–ª—å Telegram
    —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.
    """
    id: int = Field(alias="user_id") # –ò—Å–ø–æ–ª—å–∑—É–µ–º alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UserProfile
    username: Optional[str] = None
    first_name: str = Field(alias="full_name") # –ò—Å–ø–æ–ª—å–∑—É–µ–º alias
    language_code: Optional[str] = None
    
    # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä—è–º–æ –≤ –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    verification_data: VerificationData = Field(default_factory=VerificationData)

    class Config:
        populate_by_name = True # –†–∞–∑—Ä–µ—à–∞–µ–º Pydantic –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å alias'—ã
