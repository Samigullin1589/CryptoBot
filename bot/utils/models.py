# =================================================================================
# –§–∞–π–ª: bot/utils/models.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä Pydantic-–º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏ CalculationInput –∏ CalculationResult
# –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ ImportError –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
# =================================================================================

from __future__ import annotations
from typing import Optional, List, Any, Dict
from pydantic import BaseModel, Field, ConfigDict
from enum import IntEnum

# --- –ò–ï–†–ê–†–•–ò–Ø –†–û–õ–ï–ô (–ü–ï–†–ï–ù–ï–°–ï–ù–û –°–Æ–î–ê) ---
class UserRole(IntEnum):
    BANNED = 0
    USER = 1
    MODERATOR = 2
    ADMIN = 3
    SUPER_ADMIN = 4

# --- –ú–û–î–ï–õ–¨ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ---
class VerificationData(BaseModel):
    is_verified: bool = False
    passport_verified: bool = False
    deposit: float = 0.0
    country_code: str = "üá∑üá∫"

# --- –ú–û–î–ï–õ–¨ –î–õ–Ø –ò–ì–†–û–í–´–• –î–ê–ù–ù–´–• ---
class UserGameProfile(BaseModel):
    balance: float = 0.0
    total_earned: float = 0.0
    current_tariff: str
    owned_tariffs: List[str]

# --- –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
class User(BaseModel):
    id: int
    username: Optional[str] = None
    first_name: str
    language_code: Optional[str] = None
    role: UserRole = UserRole.USER
    verification_data: VerificationData = Field(default_factory=VerificationData)
    electricity_cost: float = 0.05 # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ASIC

    model_config = ConfigDict(
        populate_by_name=True
    )

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---

class CalculationInput(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏."""
    hashrate_str: str
    power_consumption_watts: int
    electricity_cost: float
    pool_commission: float

class CalculationResult(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π."""
    btc_price_usd: float
    usd_rub_rate: float
    network_hashrate_ths: float
    block_reward_btc: float
    gross_revenue_usd_daily: float
    electricity_cost_usd_daily: float
    pool_fee_usd_daily: float
    total_expenses_usd_daily: float
    net_profit_usd_daily: float

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---

class Coin(BaseModel):
    id: str
    symbol: str
    name: str

class PriceInfo(BaseModel):
    price: float
    market_cap: Optional[float] = None
    volume_24h: Optional[float] = None
    change_24h: Optional[float] = None

class MiningEvent(BaseModel):
    name: str
    description: str
    probability: float = Field(ge=0.0, le=1.0)
    profit_multiplier: float = 1.0
    cost_multiplier: float = 1.0

class AsicMiner(BaseModel):
    id: str
    name: str
    hashrate: str
    power: int
    algorithm: str
    profitability: Optional[float] = None
    price: Optional[float] = None
    # –ü–æ–ª—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    net_profit: Optional[float] = None
    gross_profit: Optional[float] = None
    electricity_cost_per_day: Optional[float] = None


class NewsArticle(BaseModel):
    title: str
    url: str
    body: Optional[str] = None
    source: Optional[str] = None
    timestamp: Optional[int] = None
    published_at: Optional[str] = None
    ai_summary: Optional[str] = None

class AirdropProject(BaseModel):
    id: str
    name: str
    description: str
    status: str
    tasks: List[str]
    guide_url: Optional[str] = None

class Achievement(BaseModel):
    id: str
    name: str
    description: str
    reward_coins: float
    trigger_event: str
    type: str = "static"
    trigger_conditions: Optional[Dict[str, Any]] = None

class MiningSessionResult(BaseModel):
    asic_name: str
    user_tariff_name: str
    gross_earned: float
    total_electricity_cost: float
    net_earned: float
    event_description: Optional[str] = None
    unlocked_achievement: Optional[Achievement] = None

class MarketListing(BaseModel):
    id: str
    seller_id: int
    price: float
    created_at: int
    asic_data: str

class QuizQuestion(BaseModel):
    question: str
    options: List[str]
    correct_option_index: int
    explanation: Optional[str] = None

class AIVerdict(BaseModel):
    intent: str = "other"
    toxicity_score: float = 0.0
    is_potential_scam: bool = False
    is_potential_phishing: bool = False