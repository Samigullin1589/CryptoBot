# =================================================================================
# –§–∞–π–ª: bot/utils/models.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø, –ê–í–ì–£–°–¢ 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π –∏ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –Ω–∞–±–æ—Ä Pydantic-–º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞,
# –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–∏—Å—Ç–µ–º—É —Ä–æ–ª–µ–π –≤ –µ–¥–∏–Ω–æ–π –º–æ–¥–µ–ª–∏ User.
# =================================================================================

from __future__ import annotations
from typing import Optional, List, Any, Dict
from pydantic import BaseModel, Field, ConfigDict
from enum import IntEnum

# --- –ò–ï–†–ê–†–•–ò–Ø –†–û–õ–ï–ô ---
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
class UserRole(IntEnum):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    BANNED = 0
    USER = 1
    MODERATOR = 2
    ADMIN = 3
    SUPER_ADMIN = 4

# --- –ú–û–î–ï–õ–¨ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ---
class VerificationData(BaseModel):
    is_verified: bool = False
    passport_verified: bool = False
    deposit: float = 0.0
    country_code: str = "üá∑üá∫"

# --- –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
class User(BaseModel):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –ø—Ä–æ—Ñ–∏–ª—å Telegram,
    —Ä–æ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ alias'—ã.
    """
    id: int = Field(alias="user_id")
    username: Optional[str] = None
    first_name: str = Field(alias="full_name") # –ò–º—è –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
    language_code: Optional[str] = None
    
    # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –†–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role: UserRole = UserRole.USER
    
    # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä—è–º–æ –≤ –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    verification_data: VerificationData = Field(default_factory=VerificationData)

    model_config = ConfigDict(
        populate_by_name=True # –†–∞–∑—Ä–µ—à–∞–µ–º Pydantic –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å alias'—ã
    )

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---

class Coin(BaseModel):
    id: str = Field(description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä CoinGecko (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'bitcoin')")
    symbol: str = Field(description="–¢–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'btc')")
    name: str = Field(description="–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Bitcoin')")

class PriceInfo(BaseModel):
    price: float
    market_cap: Optional[float] = None
    volume_24h: Optional[float] = None
    change_24h: Optional[float] = None

class MiningEvent(BaseModel):
    name: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    description: str = Field(description="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    probability: float = Field(ge=0.0, le=1.0, description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è (0.0-1.0)")
    profit_multiplier: float = Field(default=1.0, description="–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ—Ö–æ–¥–∞ (–Ω–∞–ø—Ä., 1.5 –¥–ª—è +50%)")
    cost_multiplier: float = Field(default=1.0, description="–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞—Ç—Ä–∞—Ç (–Ω–∞–ø—Ä., 0.5 –¥–ª—è -50%)")

class AsicMiner(BaseModel):
    id: str
    name: str
    hashrate: str
    power: int
    algorithm: str
    profitability: Optional[float] = None
    price: Optional[float] = None

class NewsArticle(BaseModel):
    title: str
    url: str
    body: Optional[str] = None
    source: str
    timestamp: Optional[int] = None
    published_at: Optional[str] = None
    ai_summary: Optional[str] = None

class AirdropProject(BaseModel):
    id: str
    name: str
    description: str
    status: str
    tasks: List[str]
    guide_url: Optional[str] = None

class Achievement(BaseModel):
    id: str
    name: str
    description: str
    reward_coins: float
    trigger_event: str
    type: str = "static"
    trigger_conditions: Optional[Dict[str, Any]] = None

class MiningSessionResult(BaseModel):
    asic_name: str
    user_tariff_name: str
    gross_earned: float
    total_electricity_cost: float
    net_earned: float
    event_description: Optional[str] = None
    unlocked_achievement: Optional[Achievement] = None

class MarketListing(BaseModel):
    id: str
    seller_id: int
    price: float
    created_at: int
    asic_data: str

class QuizQuestion(BaseModel):
    question: str
    options: List[str]
    correct_option_index: int
    explanation: Optional[str] = None

class AIVerdict(BaseModel):
    intent: str = Field(default="other", description="–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    toxicity_score: float = Field(default=0.0, description="–û—Ü–µ–Ω–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç 0.0 –¥–æ 1.0.")
    is_potential_scam: bool = Field(default=False, description="True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.")
    is_potential_phishing: bool = Field(default=False, description="True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏.")
