# =================================================================================
# –§–∞–π–ª: bot/utils/formatters.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ format_halving_info –∏ format_network_status
# –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è ImportError –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
# =================================================================================
from typing import List, Dict, Any, Optional
from datetime import datetime, timezone

from bot.utils.models import AsicMiner, NewsArticle, Coin

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ASIC ---

def format_asic_list(asics: List[AsicMiner], page: int, total_pages: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    if not asics:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ASIC –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

    header = "‚öôÔ∏è <b>–¢–æ–ø ASIC –ø–æ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ (Net Profit)</b>\n\n"
    body = []
    for asic in asics:
        profit_str = f"{asic.net_profit:+.2f}$/–¥–µ–Ω—å" if hasattr(asic, 'net_profit') and asic.net_profit is not None else "N/A"
        power_str = f"{asic.power}W" if asic.power else "N/A"
        body.append(
            f"üîπ <b>{asic.name}</b>\n"
            f"   - –ü—Ä–∏–±—ã–ª—å: <b>{profit_str}</b>\n"
            f"   - –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {power_str}"
        )
    
    footer = f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    return header + "\n".join(body) + footer

def format_asic_passport(asic: AsicMiner, electricity_cost: float) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è ASIC —Å —Ä–∞—Å—á–µ—Ç–æ–º —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏."""
    specs_map = {
        "algorithm": "–ê–ª–≥–æ—Ä–∏—Ç–º", "hashrate": "–•–µ—à—Ä–µ–π—Ç",
        "power": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"
    }
    specs_list = []
    for key, rus_name in specs_map.items():
        value = getattr(asic, key, None)
        if value and value != "N/A":
            unit = " –í—Ç" if key == "power" else ""
            specs_list.append(f" ‚ñ´Ô∏è <b>{rus_name}:</b> {value}{unit}")
    specs_text = "\n".join(specs_list)

    profit_text = (
        f" ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–º–∏):</b> ${getattr(asic, 'gross_profit', 0.0):.2f}/–¥–µ–Ω—å\n"
        f" ‚ñ™Ô∏è <b>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —ç/—ç:</b> ${getattr(asic, 'electricity_cost_per_day', 0.0):.2f}/–¥–µ–Ω—å\n"
        f" ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (—á–∏—Å—Ç—ã–º–∏):</b> ${getattr(asic, 'net_profit', 0.0):.2f}/–¥–µ–Ω—å\n"
        f" <i>(–ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á)</i>"
    )

    return (
        f"üìã <b>–ü–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {asic.name}</b>\n\n"
        f"<b><u>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</u></b>\n{profit_text}\n\n"
        f"<b><u>–¢–µ—Ö. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u></b>\n{specs_text}\n"
    )

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ---

def format_news_list(articles: List[NewsArticle], page: int, total_pages: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    if not articles:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."

    header = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n"
    body = []
    for article in articles:
        dt_object = datetime.fromtimestamp(article.timestamp, tz=timezone.utc)
        time_str = dt_object.strftime('%d.%m.%Y %H:%M')
        body.append(
            f"‚ñ™Ô∏è <a href='{article.url}'>{article.title}</a>\n"
            f"  <I>({article.source} - {time_str})</I>"
        )
    
    footer = f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    return header + "\n".join(body) + footer

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∫—É—Ä—Å–æ–≤ ---

def format_price_info(coin: Coin, price_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –º–æ–Ω–µ—Ç—ã."""
    price = price_data.get('price')
    price_str = f"{price:,.4f}".rstrip('0').rstrip('.') if price else "N/A"
    return (
        f"üíπ <b>–ö—É—Ä—Å {coin.name} ({coin.symbol.upper()})</b>\n\n"
        f"<b>–¶–µ–Ω–∞:</b> ${price_str}"
    )

# --- –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –§–û–†–ú–ê–¢–¢–ï–†–´ –î–õ–Ø –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–• ---

def format_halving_info(halving_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–ª–≤–∏–Ω–≥–µ Bitcoin.
    """
    progress = halving_data.get('progressPercent', 0)
    remaining_blocks = halving_data.get('remainingBlocks', 0)
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω–µ—Ç —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
    estimated_date = halving_data.get('estimated_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    return (
        f"‚è≥ <b>–•–∞–ª–≤–∏–Ω–≥ Bitcoin</b>\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞: <b>{progress:.2f}%</b>\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–æ–≤: <b>{remaining_blocks:,}</b>\n"
        f"–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞: <b>{estimated_date}</b>"
    )

def format_network_status(network_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏ Bitcoin.
    """
    hashrate_ehs = network_data.get('hashrate_ehs', 0.0)
    
    return (
        f"üì° <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin</b>\n\n"
        f"–•–µ—à—Ä–µ–π—Ç: <b>{hashrate_ehs:.2f} EH/s</b>"
    )