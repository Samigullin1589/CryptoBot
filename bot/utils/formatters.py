# =================================================================================
# –§–∞–π–ª: bot/utils/formatters.py (–í–ï–†–°–ò–Ø "Distinguished Engineer" - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫. –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
#              –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
# =================================================================================
from typing import List, Dict, Any
from datetime import datetime, timezone

from bot.utils.models import AsicMiner, NewsArticle, Coin, CalculationResult

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ASIC ---
def format_asic_list(asics: List[AsicMiner], page: int, total_pages: int) -> str:
    if not asics:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ASIC –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

    header = "‚öôÔ∏è <b>–¢–æ–ø ASIC –ø–æ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ (Net Profit)</b>\n\n"
    body = []
    for asic in asics:
        profit_str = f"{asic.net_profit:+.2f}$/–¥–µ–Ω—å" if hasattr(asic, 'net_profit') and asic.net_profit is not None else "N/A"
        power_str = f"{asic.power}W" if asic.power else "N/A"
        body.append(
            f"üîπ <b>{asic.name}</b>\n"
            f"   - –ü—Ä–∏–±—ã–ª—å: <b>{profit_str}</b>\n"
            f"   - –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {power_str}"
        )
    
    footer = f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    return header + "\n".join(body) + footer

def format_asic_passport(asic: AsicMiner, electricity_cost: float) -> str:
    specs_map = {
        "algorithm": "–ê–ª–≥–æ—Ä–∏—Ç–º", "hashrate": "–•–µ—à—Ä–µ–π—Ç",
        "power": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"
    }
    specs_list = []
    for key, rus_name in specs_map.items():
        value = getattr(asic, key, None)
        if value and value != "N/A":
            unit = " –í—Ç" if key == "power" else ""
            specs_list.append(f" ‚ñ´Ô∏è <b>{rus_name}:</b> {value}{unit}")
    specs_text = "\n".join(specs_list)

    profit_text = (
        f" ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–º–∏):</b> ${getattr(asic, 'gross_profit', 0.0):.2f}/–¥–µ–Ω—å\n"
        f" ‚ñ™Ô∏è <b>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —ç/—ç:</b> ${getattr(asic, 'electricity_cost_per_day', 0.0):.2f}/–¥–µ–Ω—å\n"
        f" ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (—á–∏—Å—Ç—ã–º–∏):</b> ${getattr(asic, 'net_profit', 0.0):.2f}/–¥–µ–Ω—å\n"
        f" <i>(–ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á)</i>"
    )

    return (
        f"üìã <b>–ü–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {asic.name}</b>\n\n"
        f"<b><u>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</u></b>\n{profit_text}\n\n"
        f"<b><u>–¢–µ—Ö. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u></b>\n{specs_text}\n"
    )

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ---
def format_news_list(articles: List[NewsArticle], page: int, total_pages: int) -> str:
    if not articles:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."

    header = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n"
    body = []
    for article in articles:
        dt_object = datetime.fromtimestamp(article.timestamp, tz=timezone.utc)
        time_str = dt_object.strftime('%d.%m.%Y %H:%M')
        body.append(
            f"‚ñ™Ô∏è <a href='{article.url}'>{article.title}</a>\n"
            f"  <I>({article.source} - {time_str})</I>"
        )
    
    footer = f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    return header + "\n".join(body) + footer

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∫—É—Ä—Å–æ–≤ ---
def format_price_info(coin: Coin, price_data: Dict[str, Any]) -> str:
    price = price_data.get('price')
    price_str = f"{price:,.4f}".rstrip('0').rstrip('.') if price else "N/A"
    return (
        f"üíπ <b>–ö—É—Ä—Å {coin.name} ({coin.symbol.upper()})</b>\n\n"
        f"<b>–¶–µ–Ω–∞:</b> ${price_str}"
    )

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
def format_halving_info(halving_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–ª–≤–∏–Ω–≥–µ Bitcoin."""
    progress = halving_data.get('progressPercent', 0)
    remaining_blocks = halving_data.get('remainingBlocks', 0)
    estimated_date = halving_data.get('estimated_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    return (
        f"‚è≥ <b>–•–∞–ª–≤–∏–Ω–≥ Bitcoin</b>\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞: <b>{progress:.2f}%</b>\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–æ–≤: <b>{remaining_blocks:,}</b>\n"
        f"–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞ —Ö–∞–ª–≤–∏–Ω–≥–∞: <b>{estimated_date}</b>"
    )

def format_network_status(network_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ç–∏ Bitcoin."""
    hashrate_ehs = network_data.get('hashrate_ehs', 0.0)
    difficulty_change = network_data.get('difficulty_change', 0.0)
    estimated_retarget_date = network_data.get('estimated_retarget_date', 'N/A')
    
    change_sign = "+" if difficulty_change > 0 else ""
    
    return (
        f"üì° <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin</b>\n\n"
        f"–•–µ—à—Ä–µ–π—Ç: <b>{hashrate_ehs:.2f} EH/s</b>\n"
        f"–°–ª–µ–¥. –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: <b>~{change_sign}{difficulty_change:.2f}%</b>\n"
        f"<i>(–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ {estimated_retarget_date})</i>"
    )

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---
def format_calculation_result(result: CalculationResult) -> str:
    net_profit_weekly = result.net_profit_usd_daily * 7
    net_profit_monthly = result.net_profit_usd_daily * 30.44
    net_profit_yearly = result.net_profit_usd_daily * 365.25
    net_profit_rub_daily = result.net_profit_usd_daily * result.usd_rub_rate
    profit_color_emoji = "üü¢" if result.net_profit_usd_daily > 0 else "üî¥"

    return (
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b>\n\n"
        f"<b><u>–î–æ—Ö–æ–¥—ã:</u></b>\n"
        f"‚ñ´Ô∏è –ì—Ä—è–∑–Ω—ã–π –¥–æ—Ö–æ–¥: <b>${result.gross_revenue_usd_daily:,.2f}</b> / –¥–µ–Ω—å\n\n"
        f"<b><u>–†–∞—Å—Ö–æ–¥—ã:</u></b>\n"
        f"‚ñ´Ô∏è –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è: ${result.electricity_cost_usd_daily:,.2f} / –¥–µ–Ω—å\n"
        f"‚ñ´Ô∏è –ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞: ${result.pool_fee_usd_daily:,.2f} / –¥–µ–Ω—å\n"
        f"‚ñ´Ô∏è <b>–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b> ${result.total_expenses_usd_daily:,.2f} / –¥–µ–Ω—å\n\n"
        f"<b><u>{profit_color_emoji} –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</u></b>\n"
        f"üíµ <b>${result.net_profit_usd_daily:,.2f} / –¥–µ–Ω—å</b>\n"
        f"üíµ ${net_profit_weekly:,.2f} / –Ω–µ–¥–µ–ª—è\n"
        f"üíµ ${net_profit_monthly:,.2f} / –º–µ—Å—è—Ü\n"
        f"üíµ ${net_profit_yearly:,.2f} / –≥–æ–¥\n\n"
        f"üá∑üá∫ –í —Ä—É–±–ª—è—Ö: ‚âà {net_profit_rub_daily:,.2f} ‚ÇΩ / –¥–µ–Ω—å\n\n"
        f"<i>–†–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ BTC ‚âà ${int(result.btc_price_usd):,} –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏. "
        f"–†–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.</i>"
    )