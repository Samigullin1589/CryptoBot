# ===============================================================
# –§–∞–π–ª: bot/utils/formatters.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—Ä–∞—Å–∏–≤—ã–µ,
# –≥–æ—Ç–æ–≤—ã–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
# ===============================================================
from textwrap import dedent
from typing import List, Dict, Any

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞ ---
from bot.utils.models import (
    PriceInfo, 
    AsicMiner,
    MiningSessionResult,
    CalculationResult,
    HalvingInfo,
    NetworkStatus,
    NewsArticle
)
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---

def format_price_info(price_info: PriceInfo) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –º–æ–Ω–µ—Ç—ã."""
    change = price_info.price_change_24h or 0
    emoji = "üìà" if change >= 0 else "üìâ"
    text = (f"<b>{price_info.name} ({price_info.symbol})</b>\n"
            f"üíπ –ö—É—Ä—Å: <b>${price_info.price:,.4f}</b>\n"
            f"{emoji} 24—á: <b>{change:.2f}%</b>\n")
    if price_info.algorithm and price_info.algorithm != "Unknown":
        text += f"‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <code>{price_info.algorithm}</code>"
    return text

def format_top_asics(asics: List[AsicMiner], electricity_cost: float, last_update_minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø ASIC-–º–∞–π–Ω–µ—Ä–æ–≤."""
    text_lines = [f"üèÜ <b>–¢–æ–ø-{len(asics)} –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC</b> (—á–∏—Å—Ç—ã–º–∏, –ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á)\n"]
    for i, miner in enumerate(asics, 1):
        line = (f"{i}. <b>{miner.name}</b>\n"
                f"   –î–æ—Ö–æ–¥: <b>${miner.profitability:.2f}/–¥–µ–Ω—å</b> | {miner.algorithm}")
        text_lines.append(line)
    
    text_lines.append(f"\n<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã {last_update_minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.</i>")
    return "\n".join(text_lines)

def format_asic_passport(asic: AsicMiner, electricity_cost: float) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è ASIC —Å —Ä–∞—Å—á–µ—Ç–æ–º —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏."""
    # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –∏–∑ Redis –≤—Å–µ–≥–¥–∞ "–≥—Ä—è–∑–Ω–∞—è", –¥–æ –≤—ã—á–µ—Ç–∞ —ç/—ç
    gross_profitability = asic.profitability
    power = asic.power or 0

    # –†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ AsicService, —Å—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–Ω–Ω–∞—è
    net_profit = asic.profitability
    
    # –°—á–∏—Ç–∞–µ–º "–≥—Ä—è–∑–Ω—É—é" –ø—Ä–∏–±—ã–ª—å, –ø—Ä–∏–±–∞–≤–ª—è—è –æ–±—Ä–∞—Ç–Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
    power_kwh_per_day = (power / 1000) * 24
    daily_cost = power_kwh_per_day * electricity_cost
    gross_profit_from_net = net_profit + daily_cost

    specs_map = {
        "algorithm": "–ê–ª–≥–æ—Ä–∏—Ç–º", "hashrate": "–•–µ—à—Ä–µ–π—Ç",
        "power": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "efficiency": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    
    specs_list = []
    for key, rus_name in specs_map.items():
        value = getattr(asic, key, None)
        if value and value != "N/A":
            unit = " –í—Ç" if key == "power" else ""
            specs_list.append(f" ‚ñ´Ô∏è <b>{rus_name}:</b> {value}{unit}")

    specs_text = "\n".join(specs_list)

    profit_text = (
        f" ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–º–∏):</b> ${gross_profit_from_net:.2f}/–¥–µ–Ω—å\n"
        f" ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (—á–∏—Å—Ç—ã–º–∏):</b> ${net_profit:.2f}/–¥–µ–Ω—å\n"
        f"    (–ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á)"
    )

    return (
        f"üìã <b>–ü–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {asic.name}</b>\n\n"
        f"<b><u>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</u></b>\n{profit_text}\n\n"
        f"<b><u>–¢–µ—Ö. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u></b>\n{specs_text}\n"
    )

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞ ---

def format_crypto_feed(feed: List[NewsArticle]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º."""
    text = "<b>‚ö°Ô∏è –õ–µ–Ω—Ç–∞ –ö—Ä–∏–ø—Ç–æ-–ù–æ–≤–æ—Å—Ç–µ–π (AI-–ê–Ω–∞–ª–∏–∑)</b>\n"
    for item in feed:
        summary = item.ai_summary or '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.'
        text += (f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                 f"‚ñ™Ô∏è <b>–ö—Ä–∞—Ç–∫–æ:</b> <i>{summary}</i>\n"
                 f"‚ñ™Ô∏è <a href='{item.url}'>{item.title}</a>")
    return text

def format_mining_signals(signals: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤."""
    text = "<b>‚õèÔ∏è –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤ (AI)</b>\n"
    for signal in signals:
        text += (f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                 f"<b>{signal.get('name', 'N/A')}</b> (–°—Ç–∞—Ç—É—Å: {signal.get('status', 'N/A')})\n"
                 f"<i>{signal.get('description', '')}</i>\n"
                 f"<b>–ê–ª–≥–æ—Ä–∏—Ç–º:</b> <code>{signal.get('algorithm', 'N/A')}</code>\n"
                 f"<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {signal.get('hardware', 'N/A')}\n"
                 f"<a href='{signal.get('guide_url', '#')}'>–ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥</a>")
    return text

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---

def format_halving_info(halving_info: HalvingInfo) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–ª–≤–∏–Ω–≥–µ."""
    return (
        f"‚è≥ <b>–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin</b>\n\n"
        f"‚óΩÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–æ–≤: <code>{halving_info.remaining_blocks:,}</code>\n"
        f"‚óΩÔ∏è –°–ª–µ–¥—É—é—â–∏–π —Ö–∞–ª–≤–∏–Ω–≥: –ø—Ä–∏–º–µ—Ä–Ω–æ <b>{halving_info.estimated_date.strftime('%d %B %Y –≥.')}</b>\n\n"
        f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫ —É–º–µ–Ω—å—à–∏—Ç—Å—è —Å <code>{halving_info.current_reward} BTC</code> –¥–æ <code>{halving_info.next_reward} BTC</code>."
    )

def format_network_status(network_status: NetworkStatus) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏ Bitcoin."""
    return (
        f"üì° <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin</b>\n\n"
        f"‚óΩÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: <code>{network_status.difficulty:,.0f}</code>\n"
        f"‚óΩÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –º–µ–º–ø—É–ª–µ: <code>{network_status.mempool_txs:,}</code>\n"
        f"‚óΩÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∏—Å—Å–∏—è (–±—ã—Å—Ç—Ä–∞—è): <code>{network_status.suggested_fee} —Å–∞—Ç/vB</code>"
    )

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ –∏–≥—Ä—ã ---

def format_morning_summary(btc_price: str, eth_price: str, fng_index: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É."""
    return (
        "‚òïÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –∫—Ä–∏–ø—Ç–æ-—Å–≤–æ–¥–∫–∞:</b>\n\n"
        f"<b>Bitcoin (BTC):</b> ${btc_price}\n"
        f"<b>Ethereum (ETH):</b> ${eth_price}\n\n"
        f"<b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏:</b> {fng_index}"
    )

def format_leaderboard(top_users: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤."""
    if not top_users:
        return "üèÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!"

    leaderboard_lines = []
    medals = ["ü•á", "ü•à", "ü•â", "4.", "5."]
    for i, user_data in enumerate(top_users):
        username = f"@{user_data['username']}" if user_data.get('username') else f"User ID {user_data['user_id']}"
        balance = user_data['balance']
        leaderboard_lines.append(f"{medals[i]} {username} - <b>{balance:.2f} –º–æ–Ω–µ—Ç</b>")
    
    leaderboard_text = "\n".join(leaderboard_lines)
    return (
        "üèÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n"
        "–í–æ—Ç –Ω–∞—à–∏ –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n\n"
        f"{leaderboard_text}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ù–æ–≤—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ ‚Äî –≤ —Å–ª–µ–¥—É—é—â—É—é –ø—è—Ç–Ω–∏—Ü—É."
    )

def format_mining_session_result(result: MiningSessionResult) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–∏."""
    return (
        f"‚úÖ –ú–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—è –Ω–∞ <b>{result.asic_name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìà –ì—Ä—è–∑–Ω—ã–π –¥–æ—Ö–æ–¥: <b>{result.gross_earned:.4f} –º–æ–Ω–µ—Ç</b>\n"
        f"‚ö°Ô∏è –†–∞—Å—Ö–æ–¥ –Ω–∞ —ç–ª-–≤–æ ({result.tariff_name}): <b>{result.electricity_cost:.4f} –º–æ–Ω–µ—Ç</b>\n\n"
        f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å: <b>{result.net_earned:.4f} –º–æ–Ω–µ—Ç</b>."
    )

# --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---

def format_calculation_result(result: CalculationResult) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏."""
    calc_data = result.calculation_data
    input_data = result.input_data
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º USD –≤ RUB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    gross_rub_day = calc_data.gross_revenue_usd_daily * input_data.usd_rub_rate
    gross_rub_month = calc_data.gross_revenue_usd_monthly * input_data.usd_rub_rate
    net_rub_day = calc_data.net_profit_usd_daily * input_data.usd_rub_rate
    net_rub_month = calc_data.net_profit_usd_monthly * input_data.usd_rub_rate
    net_rub_year = calc_data.net_profit_usd_yearly * input_data.usd_rub_rate

    result_text = dedent(f"""
        üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b>

        <b>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
        - –¶–µ–Ω–∞ BTC: <code>${input_data.btc_price_usd:,.2f}</code>
        - –ö—É—Ä—Å USD/RUB: <code>{input_data.usd_rub_rate:,.2f} ‚ÇΩ</code>
        - –•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏: <code>{input_data.network_hashrate_ths / 1_000_000:,.2f} EH/s</code>
        - –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫: <code>{input_data.block_reward_btc:.4f} BTC</code>

        ---

        <b>üí∞ –î–æ—Ö–æ–¥—ã (–≥—Ä—è–∑–Ω—ã–º–∏):</b>
        - –í –¥–µ–Ω—å: <code>${calc_data.gross_revenue_usd_daily:.2f}</code> / <code>{gross_rub_day:.2f} ‚ÇΩ</code>
        - –í –º–µ—Å—è—Ü: <code>${calc_data.gross_revenue_usd_monthly:.2f}</code> / <code>{gross_rub_month:.2f} ‚ÇΩ</code>

        <b>üîå –†–∞—Å—Ö–æ–¥—ã:</b>
        - –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ/–¥–µ–Ω—å: <code>${calc_data.electricity_cost_usd_daily:.2f}</code>
        - –ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞ ({result.pool_commission}%)/–¥–µ–Ω—å: <code>${calc_data.pool_fee_usd_daily:.2f}</code>
        - <b>–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤/–¥–µ–Ω—å:</b> <code>${calc_data.total_expenses_usd_daily:.2f}</code>

        ---

        ‚úÖ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b>
        - <b>–í –¥–µ–Ω—å:</b> <code>${calc_data.net_profit_usd_daily:.2f}</code> / <code>{net_rub_day:.2f} ‚ÇΩ</code>
        - <b>–í –º–µ—Å—è—Ü:</b> <code>${calc_data.net_profit_usd_monthly:.2f}</code> / <code>{net_rub_month:.2f} ‚ÇΩ</code>
        - <b>–í –≥–æ–¥:</b> <code>${calc_data.net_profit_usd_yearly:.2f}</code> / <code>{net_rub_year:.2f} ‚ÇΩ</code>
    """)

    if calc_data.net_profit_usd_daily < 0:
        result_text += "\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–∞–π–Ω–∏–Ω–≥ –Ω–µ–≤—ã–≥–æ–¥–µ–Ω."
        
    return result_text.strip()
