# ===============================================================
# –§–∞–π–ª: bot/utils/formatters.py (–û–ë–ù–û–í–õ–ï–ù–ò–ï)
# –û–ø–∏—Å–∞–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è format_price_info –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ
# –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
# ===============================================================
from typing import Dict, Any

from bot.services.asic_service import AsicService # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ —Ä–∞—Å—á–µ—Ç–∞
from bot.services.price_service import CryptoCoin # –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç—ã

def format_asic_passport(data: Dict[str, Any], electricity_cost: float = 0.0) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è ASIC.
    
    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± ASIC –∏–∑ Redis/API.
    :param electricity_cost: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    """
    name = data.get('name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
    gross_profitability = float(data.get('profitability', 0.0))
    power = int(data.get('power', 0))

    # –†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–µ—Ä–≤–∏—Å—É
    net_profit = AsicService.calculate_net_profit(gross_profitability, power, electricity_cost)

    specs_map = {
        "algorithm": "–ê–ª–≥–æ—Ä–∏—Ç–º",
        "hashrate": "–•–µ—à—Ä–µ–π—Ç",
        "power": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
        "efficiency": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    
    specs_list = []
    for key, rus_name in specs_map.items():
        value = data.get(key)
        if value and str(value).strip() and value != "N/A":
            unit = " –í—Ç" if key == "power" else ""
            specs_list.append(f"  ‚ñ´Ô∏è <b>{rus_name}:</b> {value}{unit}")

    specs_text = "\n".join(specs_list) if specs_list else "  ‚ñ´Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å —ç–∫–æ–Ω–æ–º–∏–∫–æ–π
    profit_text = (
        f"  ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–º–∏):</b> ${gross_profitability:.2f}/–¥–µ–Ω—å\n"
        f"  ‚ñ™Ô∏è <b>–î–æ—Ö–æ–¥ (—á–∏—Å—Ç—ã–º–∏):</b> ${net_profit:.2f}/–¥–µ–Ω—å\n"
        f"  <i>*—Ä–∞—Å—á–µ—Ç –ø—Ä–∏ —Ü–µ–Ω–µ —ç/—ç ${electricity_cost:.4f}/–∫–í—Ç¬∑—á</i>"
    )

    text = (
        f"üìã <b>–ü–∞—Å–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {name}</b>\n\n"
        f"<b><u>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</u></b>\n{profit_text}\n\n"
        f"<b><u>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u></b>\n{specs_text}\n"
    )
    return text

def format_price_info(coin: CryptoCoin) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –º–æ–Ω–µ—Ç—ã.
    
    :param coin: –û–±—ä–µ–∫—Ç CryptoCoin —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–æ–Ω–µ—Ç–µ.
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    """
    change = coin.price_change_24h or 0
    emoji = "üìà" if change >= 0 else "üìâ"
    
    text = (
        f"<b>{coin.name} ({coin.symbol})</b>\n"
        f"üíπ –ö—É—Ä—Å: <b>${coin.price:,.4f}</b>\n"
        f"{emoji} 24—á: <b>{change:.2f}%</b>\n"
    )
    if coin.algorithm:
        text += f"‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <code>{coin.algorithm}</code>"
    
    return text
