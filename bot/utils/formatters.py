# ===============================================================
# –§–∞–π–ª: bot/utils/formatters.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—Ä–∞—Å–∏–≤—ã–µ,
# –≥–æ—Ç–æ–≤—ã–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
# ===============================================================
import logging
from textwrap import dedent
from typing import List, Optional

from bot.utils.models import (
    PriceInfo, HalvingInfo, NetworkStatus, 
    MiningSessionResult, CalculationResult, AsicMiner, 
    AirdropProject, MiningSignal, NewsArticle
)
from bot.utils.text_utils import sanitize_html

logger = logging.getLogger(__name__)

# --- –§–û–†–ú–ê–¢–¢–ï–†–´ –î–õ–Ø –û–°–ù–û–í–ù–´–• –ö–û–ú–ê–ù–î ---

def format_price_info(price_info: PriceInfo) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –º–æ–Ω–µ—Ç—ã."""
    change = price_info.price_change_24h or 0
    emoji = "üìà" if change >= 0 else "üìâ"
    
    text = (
        f"<b>{price_info.name} ({price_info.symbol})</b>\n"
        f"üíπ –ö—É—Ä—Å: <b>${price_info.price:,.4f}</b>\n"
        f"{emoji} 24—á: <b>{change:.2f}%</b>\n"
    )
    if price_info.algorithm:
        text += f"‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: <code>{price_info.algorithm}</code>"
    
    return text

def format_news(articles: List[NewsArticle]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if not articles:
        return "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."

    text_lines = ["üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>"]
    for article in articles:
        safe_title = sanitize_html(article.title)
        text_lines.append(f"üîπ <a href=\"{article.url}\">{safe_title}</a>")
    
    return "\n\n".join(text_lines)

# --- –§–û–†–ú–ê–¢–¢–ï–†–´ –î–õ–Ø –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–• ---

def format_halving_info(halving_info: HalvingInfo) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–ª–≤–∏–Ω–≥–µ Bitcoin."""
    return (
        f"‚è≥ <b>–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin</b>\n\n"
        f"‚óΩÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–æ–≤: <code>{halving_info.remaining_blocks:,}</code>\n"
        f"‚óΩÔ∏è –°–ª–µ–¥—É—é—â–∏–π —Ö–∞–ª–≤–∏–Ω–≥: –ø—Ä–∏–º–µ—Ä–Ω–æ <b>{halving_info.estimated_date.strftime('%d %B %Y –≥.')}</b>\n\n"
        f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫ —É–º–µ–Ω—å—à–∏—Ç—Å—è —Å <code>{halving_info.current_reward} BTC</code> –¥–æ <code>{halving_info.next_reward} BTC</code>."
    )

def format_network_status(network_status: NetworkStatus) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏ Bitcoin."""
    return (
        f"üì° <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin</b>\n\n"
        f"‚óΩÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: <code>{network_status.difficulty:,.0f}</code>\n"
        f"‚óΩÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –º–µ–º–ø—É–ª–µ: <code>{network_status.mempool_transactions:,}</code>\n"
        f"‚óΩÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∏—Å—Å–∏—è (–±—ã—Å—Ç—Ä–∞—è): <code>{network_status.suggested_fee} —Å–∞—Ç/vB</code>"
    )

# --- –§–û–†–ú–ê–¢–¢–ï–†–´ –î–õ–Ø –ò–ì–†–´ –ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ---

def format_mining_session_result(result: MiningSessionResult) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏–∏."""
    return (
        f"‚úÖ –ú–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—è –Ω–∞ <b>{result.asic_name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìà –ì—Ä—è–∑–Ω—ã–π –¥–æ—Ö–æ–¥: <b>{result.gross_earned:.4f} –º–æ–Ω–µ—Ç</b>\n"
        f"‚ö°Ô∏è –†–∞—Å—Ö–æ–¥ –Ω–∞ —ç–ª-–≤–æ ({result.tariff_name}): <b>{result.electricity_cost:.4f} –º–æ–Ω–µ—Ç</b>\n\n"
        f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å: <b>{result.net_earned:.4f} –º–æ–Ω–µ—Ç</b>."
    )

def format_calculation_result(result: CalculationResult) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    text = dedent(f"""
        üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b>

        <b>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
        - –¶–µ–Ω–∞ BTC: <code>${result.btc_price_usd:,.2f}</code>
        - –ö—É—Ä—Å USD/RUB: <code>{result.usd_rub_rate:,.2f} ‚ÇΩ</code>
        - –•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏: <code>{result.network_hashrate_ths / 1_000_000:,.2f} EH/s</code>
        - –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫: <code>{result.block_reward_btc:.4f} BTC</code>

        ---

        <b>üí∞ –î–æ—Ö–æ–¥—ã (–≥—Ä—è–∑–Ω—ã–º–∏):</b>
        - –í –¥–µ–Ω—å: <code>${result.gross_revenue_usd_daily:.2f}</code> / <code>{result.gross_revenue_rub_daily:.2f} ‚ÇΩ</code>
        - –í –º–µ—Å—è—Ü: <code>${result.gross_revenue_usd_monthly:.2f}</code> / <code>{result.gross_revenue_rub_monthly:.2f} ‚ÇΩ</code>

        <b>üîå –†–∞—Å—Ö–æ–¥—ã:</b>
        - –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ/–¥–µ–Ω—å: <code>${result.electricity_cost_usd_daily:.2f}</code>
        - –ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞ ({result.pool_commission}%)/–¥–µ–Ω—å: <code>${result.pool_fee_usd_daily:.2f}</code>
        - <b>–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤/–¥–µ–Ω—å:</b> <code>${result.total_expenses_usd_daily:.2f}</code>

        ---

        ‚úÖ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b>
        - <b>–í –¥–µ–Ω—å:</b> <code>${result.net_profit_usd_daily:.2f}</code> / <code>{result.net_profit_rub_daily:.2f} ‚ÇΩ</code>
        - <b>–í –º–µ—Å—è—Ü:</b> <code>${result.net_profit_usd_monthly:.2f}</code> / <code>{result.net_profit_rub_monthly:.2f} ‚ÇΩ</code>
        - <b>–í –≥–æ–¥:</b> <code>${result.net_profit_usd_yearly:.2f}</code> / <code>{result.net_profit_rub_yearly:.2f} ‚ÇΩ</code>
    """)
    if result.net_profit_usd_daily < 0:
        text += "\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–∞–π–Ω–∏–Ω–≥ –Ω–µ–≤—ã–≥–æ–¥–µ–Ω."
    return text.strip()

# --- –§–û–†–ú–ê–¢–¢–ï–†–´ –î–õ–Ø –ö–†–ò–ü–¢–û-–¶–ï–ù–¢–†–ê ---

AI_DISCLAIMER = "\n\n<i>‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (DYOR).</i>"

def format_airdrops_list(airdrops: List[AirdropProject]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ Airdrop-–ø—Ä–æ–µ–∫—Ç–æ–≤."""
    text = "<b>üíß –û—Ö–æ—Ç–∞ –∑–∞ Airdrop'–∞–º–∏ (AI-–ê–Ω–∞–ª–∏–∑)</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —á–µ–∫–ª–∏—Å—Ç:"
    return text + AI_DISCLAIMER

def format_airdrop_details(project: AirdropProject) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ Airdrop."""
    text = (
        f"<b>–ü—Ä–æ–µ–∫—Ç: {project.name}</b> ({project.status})\n\n"
        f"{project.description}\n\n"
        f"<b>–ß–µ–∫–ª–∏—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Airdrop:</b>"
    )
    return text + AI_DISCLAIMER

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
def format_mining_signals(signals: List[MiningSignal]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–π–Ω–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª–æ–≤."""
    if not signals:
        text = "<b>‚õèÔ∏è –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤ (AI)</b>\n\nüòï AI –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        text = "<b>‚õèÔ∏è –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤ (AI)</b>\n"
        for signal in signals:
            text += (
                f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"<b>{signal.name}</b> (–°—Ç–∞—Ç—É—Å: {signal.status})\n"
                f"<i>{signal.description}</i>\n"
                f"<b>–ê–ª–≥–æ—Ä–∏—Ç–º:</b> <code>{signal.algorithm}</code>\n"
                f"<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {signal.hardware}\n"
                f"<a href='{signal.guide_url or '#'}'>–ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥</a>"
            )
    return text + AI_DISCLAIMER
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

def format_live_feed(feed: List[NewsArticle]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ª–µ–Ω—Ç—É —Å AI-–≤—ã–∂–∏–º–∫–æ–π."""
    if not feed:
        return "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    text = "<b>‚ö°Ô∏è –õ–µ–Ω—Ç–∞ –ö—Ä–∏–ø—Ç–æ-–ù–æ–≤–æ—Å—Ç–µ–π (AI-–ê–Ω–∞–ª–∏–∑)</b>\n"
    for item in feed:
        summary = item.ai_summary or '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.'
        text += (
            f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"‚ñ™Ô∏è <b>–ö—Ä–∞—Ç–∫–æ:</b> <i>{summary}</i>\n"
            f"‚ñ™Ô∏è <a href='{item.url}'>{item.title}</a>"
        )
    return text
