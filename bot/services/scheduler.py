import logging
from urllib.parse import urlparse
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.redis import RedisJobStore
from bot.config.settings import settings

logger = logging.getLogger(__name__)

def setup_scheduler(context: dict) -> AsyncIOScheduler:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler.
    """
    parsed_url = urlparse(settings.redis_url)
    
    jobstores = {
        'default': RedisJobStore(
            host=parsed_url.hostname,
            port=parsed_url.port,
            password=parsed_url.password,
            db=0
        )
    }
    
    scheduler = AsyncIOScheduler(
        jobstores=jobstores, 
        timezone="Europe/Moscow", # –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–∫–∞–∑–∞—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        job_defaults={'misfire_grace_time': 300},
        context=context
    )

    # –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    if settings.news_chat_id:
        scheduler.add_job(
            'bot.services.tasks:send_news_job',
            'interval',
            hours=settings.news_interval_hours,
            id='news_sending_job',
            replace_existing=True
        )
    
    # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤
    scheduler.add_job(
        'bot.services.tasks:update_asics_cache_job',
        'interval',
        hours=settings.asic_cache_update_hours,
        id='asic_cache_update_job',
        replace_existing=True
    )
    
    # üëá –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ –ú–°–ö)
    scheduler.add_job(
        'bot.services.tasks:send_morning_summary_job',
        'cron',
        day_of_week='mon-sun',
        hour=9,
        minute=0,
        id='morning_summary_job',
        replace_existing=True
    )

    # üëá –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (–∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 18:00 –ø–æ –ú–°–ö)
    scheduler.add_job(
        'bot.services.tasks:send_leaderboard_job',
        'cron',
        day_of_week='fri',
        hour=18,
        minute=0,
        id='leaderboard_job',
        replace_existing=True
    )
    
    logger.info("Scheduler configured with all jobs.")
    return scheduler