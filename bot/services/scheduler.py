import logging
from urllib.parse import urlparse # <-- –î–û–ë–ê–í–õ–ï–ù –≠–¢–û–¢ –ò–ú–ü–û–†–¢
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.redis import RedisJobStore

from bot.config.settings import settings
from bot.services.news_service import NewsService
from bot.services.asic_service import AsicService

logger = logging.getLogger(__name__)

async def send_news_job(bot: Bot, news_service: NewsService):
    if not settings.news_chat_id: return
    logger.info("Executing scheduled news job...")
    try:
        news = await news_service.fetch_latest_news()
        if not news: return
        text = "üì∞ <b>–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ (–∞–≤—Ç–æ):</b>\n\n" + "\n".join([f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news])
        await bot.send_message(settings.news_chat_id, text, disable_web_page_preview=True)
        logger.info(f"News sent to chat {settings.news_chat_id}.")
    except Exception as e:
        logger.error("Error in send_news_job", extra={'error': str(e)})

async def update_asics_cache_job(asic_service: AsicService):
    logger.info("Executing scheduled ASIC cache update job...")
    try:
        await asic_service.get_profitable_asics()
    except Exception as e:
        logger.error("Error in update_asics_cache_job", extra={'error': str(e)})

def setup_scheduler(bot: Bot, news_service: NewsService, asic_service: AsicService) -> AsyncIOScheduler:
    # –†–∞–∑–±–∏—Ä–∞–µ–º URL Redis –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    parsed_url = urlparse(settings.redis_url)

    # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –≤ Redis –¥–ª—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    jobstores = {
        'default': RedisJobStore(
            host=parsed_url.hostname,
            port=parsed_url.port,
            password=parsed_url.password,
            db=0 # –û–±—ã—á–Ω–æ –±–∞–∑–∞ 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ URL
        )
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    scheduler = AsyncIOScheduler(jobstores=jobstores, timezone="UTC")
    
    if settings.news_chat_id:
        scheduler.add_job(
            send_news_job, 
            'interval', 
            hours=settings.news_interval_hours, 
            args=(bot, news_service),
            id='news_sending_job',
            replace_existing=True
        )
    
    scheduler.add_job(
        update_asics_cache_job, 
        'interval', 
        hours=settings.asic_cache_update_hours, 
        args=(asic_service,),
        id='asic_cache_update_job',
        replace_existing=True
    )
    
    logger.info("Scheduler configured with RedisJobStore.")
    return scheduler