import logging
from urllib.parse import urlparse
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.redis import RedisJobStore

from bot.config.settings import settings
from bot.services.news_service import NewsService
from bot.services.asic_service import AsicService

logger = logging.getLogger(__name__)

# –¢–µ–ø–µ—Ä—å –º—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
# –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –∏—Ö –≤–Ω—É—Ç—Ä–∏ setup_scheduler.

def setup_scheduler(bot: Bot, news_service: NewsService, asic_service: AsicService) -> AsyncIOScheduler:
    # –†–∞–∑–±–∏—Ä–∞–µ–º URL Redis –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    parsed_url = urlparse(settings.redis_url)

    # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –≤ Redis –¥–ª—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    jobstores = {
        'default': RedisJobStore(
            host=parsed_url.hostname,
            port=parsed_url.port,
            password=parsed_url.password,
            db=0 
        )
    }
    
    scheduler = AsyncIOScheduler(jobstores=jobstores, timezone="UTC")

    # --- –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ó–ê–î–ê–ß–ò –ö–ê–ö –í–ù–£–¢–†–ï–ù–ù–ò–ï –§–£–ù–ö–¶–ò–ò ---
    # –û–Ω–∏ "–≤–∏–¥—è—Ç" bot, news_service –∏ asic_service –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏.

    async def send_news_job():
        """–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—ä–µ–∫—Ç—ã bot –∏ news_service –∏–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è."""
        if not settings.news_chat_id: return
        logger.info("Executing scheduled news job...")
        try:
            news = await news_service.fetch_latest_news()
            if not news: return
            text = "üì∞ <b>–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ (–∞–≤—Ç–æ):</b>\n\n" + "\n".join([f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news])
            await bot.send_message(settings.news_chat_id, text, disable_web_page_preview=True)
            logger.info(f"News sent to chat {settings.news_chat_id}.")
        except Exception as e:
            logger.error("Error in send_news_job", extra={'error': str(e)})

    async def update_asics_cache_job():
        """–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à ASIC, –∏—Å–ø–æ–ª—å–∑—É—è asic_service –∏–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è."""
        logger.info("Executing scheduled ASIC cache update job...")
        try:
            await asic_service.get_profitable_asics()
        except Exception as e:
            logger.error("Error in update_asics_cache_job", extra={'error': str(e)})

    # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–î–ê–ß–ò –í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ë–ï–ó –ê–†–ì–£–ú–ï–ù–¢–û–í ---
    
    if settings.news_chat_id:
        scheduler.add_job(
            send_news_job,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
            'interval', 
            hours=settings.news_interval_hours, 
            id='news_sending_job',
            replace_existing=True
            # –ê—Ä–≥—É–º–µ–Ω—Ç—ã (args) –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã!
        )
    
    scheduler.add_job(
        update_asics_cache_job, # –ü–µ—Ä–µ–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
        'interval', 
        hours=settings.asic_cache_update_hours, 
        id='asic_cache_update_job',
        replace_existing=True
        # –ê—Ä–≥—É–º–µ–Ω—Ç—ã (args) –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã!
    )
    
    logger.info("Scheduler configured with RedisJobStore and pickle-safe jobs.")
    return scheduler