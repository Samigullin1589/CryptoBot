# =================================================================================
# bot/services/ai_content_service.py
# –í–µ—Ä—Å–∏—è: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø (28.10.2025) - Distinguished Engineer
# –û–ø–∏—Å–∞–Ω–∏–µ:
#   ‚Ä¢ –ò–°–ü–†–ê–í–õ–ï–ù–û: AttributeError —Å google_exceptions
#   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
#   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback-–ª–æ–≥–∏–∫–∞
#   ‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ (settings.ai.*)
# =================================================================================

import asyncio
import json
import logging
from typing import Any, Dict, List, Optional

import backoff

# --- –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ AI ---
try:
    from openai import APIConnectionError, OpenAI, RateLimitError
    OPENAI_AVAILABLE = True
except ImportError:
    OpenAI = None
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    class APIConnectionError(Exception):
        pass
    class RateLimitError(Exception):
        pass
    OPENAI_AVAILABLE = False

try:
    import google.generativeai as genai
    from google.api_core import exceptions as google_exceptions
    from google.generativeai.types import GenerationConfig, HarmCategory, HarmBlockThreshold
    GEMINI_AVAILABLE = True
except ImportError:
    genai = None
    GenerationConfig = object
    HarmCategory = object
    HarmBlockThreshold = object
    GEMINI_AVAILABLE = False
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è google_exceptions
    # —á—Ç–æ–±—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –±–µ–∑ –æ—à–∏–±–æ–∫ AttributeError
    class _GoogleExceptionStub(Exception):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Google API –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∫–æ–≥–¥–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"""
        pass
    
    class _GoogleExceptions:
        """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è Google API –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        ResourceExhausted = _GoogleExceptionStub
        ServiceUnavailable = _GoogleExceptionStub
        GoogleAPIError = _GoogleExceptionStub
    
    google_exceptions = _GoogleExceptions()

from bot.config.settings import settings
from bot.utils.text_utils import clean_json_string, clip_text

logger = logging.getLogger(__name__)


class AIContentService:
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏.
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–ª—é—á.
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ Gemini –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö OpenAI.
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞, JSON –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""
        self.config = settings.ai
        self.oai_client: Optional[OpenAI] = None
        self.gemini_pro = None
        self.gemini_flash = None

        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI ---
        openai_api_key = settings.OPENAI_API_KEY.get_secret_value() if settings.OPENAI_API_KEY else None
        if OPENAI_AVAILABLE and openai_api_key:
            try:
                self.oai_client = OpenAI(
                    api_key=openai_api_key, 
                    timeout=self.config.request_timeout
                )
                logger.info(f"‚úÖ AIContentService: OpenAI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª—å: {self.config.openai_model})")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI: {e}")
                self.oai_client = None
        else:
            logger.info("‚ÑπÔ∏è OpenAI –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è (–∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)")

        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Gemini ---
        gemini_api_key = settings.GEMINI_API_KEY.get_secret_value() if settings.GEMINI_API_KEY else None
        if GEMINI_AVAILABLE and gemini_api_key:
            try:
                genai.configure(api_key=gemini_api_key)
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                safety_settings = {
                    HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
                    HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
                    HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
                    HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
                }
                self.gemini_pro = genai.GenerativeModel(
                    self.config.model_name, 
                    safety_settings=safety_settings
                )
                self.gemini_flash = genai.GenerativeModel(
                    self.config.flash_model_name, 
                    safety_settings=safety_settings
                )
                logger.info(
                    f"‚úÖ AIContentService: Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω "
                    f"(Pro: {self.config.model_name}, Flash: {self.config.flash_model_name})"
                )
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini: {e}")
                self.gemini_pro = None
                self.gemini_flash = None
        else:
            logger.info("‚ÑπÔ∏è Gemini –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è (–∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)")

        if not self.oai_client and not self.gemini_pro:
            logger.critical("‚ùå –ù–∏ –æ–¥–∏–Ω AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    @backoff.on_exception(
        backoff.expo, 
        (APIConnectionError, RateLimitError), 
        max_tries=3,
        on_backoff=lambda details: logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä OpenAI –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {details['tries']})")
    )
    async def _oai_request(self, messages: List[Dict[str, str]], is_json: bool) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        if not self.oai_client:
            raise RuntimeError("OpenAI-–∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        request_params = {
            "model": self.config.openai_model,
            "messages": messages,
            "temperature": 0.1 if is_json else self.config.default_temperature,
        }
        if is_json:
            request_params["response_format"] = {"type": "json_object"}

        response = await asyncio.to_thread(
            self.oai_client.chat.completions.create, 
            **request_params
        )
        return (response.choices[0].message.content or "").strip()

    @backoff.on_exception(
        backoff.expo, 
        (google_exceptions.ResourceExhausted, google_exceptions.ServiceUnavailable), 
        max_tries=3,
        on_backoff=lambda details: logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä Gemini –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {details['tries']})")
    )
    async def _gemini_request(self, model, contents: Any, is_json: bool) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        if not model:
            raise RuntimeError("–ú–æ–¥–µ–ª—å Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        gen_config = GenerationConfig(
            temperature=0.1 if is_json else self.config.default_temperature,
            response_mime_type="application/json" if is_json else "text/plain",
        )
        response = await model.generate_content_async(
            contents=contents, 
            generation_config=gen_config
        )
        return response.text.strip()

    async def get_text_response(self, prompt: str, system_prompt: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å–Ω–∞—á–∞–ª–∞ OpenAI, –∑–∞—Ç–µ–º Gemini –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑–µ—Ä–≤–∞.
        
        Args:
            prompt: –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        """
        messages = []
        if system_prompt:
            messages.append({"role": "system", "content": system_prompt})
        messages.append({"role": "user", "content": clip_text(prompt, 8000)})

        # –ü–æ–ø—ã—Ç–∫–∞ 1: OpenAI
        if self.oai_client:
            try:
                result = await self._oai_request(messages, is_json=False)
                logger.debug("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI")
                return result
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è OpenAI –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Gemini: {e}")

        # –ü–æ–ø—ã—Ç–∫–∞ 2: Gemini (fallback)
        if self.gemini_pro:
            try:
                full_prompt = f"{system_prompt}\n\n{prompt}" if system_prompt else prompt
                result = await self._gemini_request(self.gemini_pro, full_prompt, is_json=False)
                logger.debug("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç Gemini")
                return result
            except Exception as e:
                logger.error(f"‚ùå Gemini —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    async def get_structured_response(
        self, 
        prompt: str, 
        json_schema: Dict[str, Any]
    ) -> Optional[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ.
        
        Args:
            prompt: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            json_schema: –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ dict –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        system_prompt = (
            "–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ. "
            "–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown-—Ä–∞–∑–º–µ—Ç–∫–∏. "
            f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: {json.dumps(json_schema, ensure_ascii=False, indent=2)}"
        )
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": clip_text(prompt, 7000)}
        ]

        raw_json = ""
        
        # –ü–æ–ø—ã—Ç–∫–∞ 1: OpenAI
        if self.oai_client:
            try:
                raw_json = await self._oai_request(messages, is_json=True)
                logger.debug("‚úÖ JSON –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è OpenAI JSON –Ω–µ —É–¥–∞–ª—Å—è, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Gemini: {e}")

        # –ü–æ–ø—ã—Ç–∫–∞ 2: Gemini Flash (–±—ã—Å—Ç—Ä–µ–µ –¥–ª—è JSON)
        if not raw_json and self.gemini_flash:
            try:
                full_prompt = f"{system_prompt}\n\n{prompt}"
                raw_json = await self._gemini_request(self.gemini_flash, full_prompt, is_json=True)
                logger.debug("‚úÖ JSON –ø–æ–ª—É—á–µ–Ω –æ—Ç Gemini")
            except Exception as e:
                logger.error(f"‚ùå Gemini JSON —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {e}")

        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        if raw_json:
            try:
                cleaned = clean_json_string(raw_json)
                result = json.loads(cleaned)
                return result
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: {e}\n–û—Ç–≤–µ—Ç AI: {raw_json[:200]}")
        
        return None

    async def analyze_image(
        self, 
        prompt: str, 
        image_bytes: bytes
    ) -> Optional[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini Vision –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON.
        
        Args:
            prompt: –ó–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not GEMINI_AVAILABLE or not self.gemini_flash:
            logger.warning("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        try:
            image_part = {"mime_type": "image/jpeg", "data": image_bytes}
            schema_prompt = (
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏: "
                "'is_spam' (boolean), 'has_qr_code' (boolean), 'has_text_url' (boolean), "
                "'extracted_text' (string, –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤), 'description' (string, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)."
            )
            full_prompt = f"{prompt}\n\n{schema_prompt}"
            
            raw_json = await self._gemini_request(
                self.gemini_flash, 
                [full_prompt, image_part], 
                is_json=True
            )
            
            if raw_json:
                result = json.loads(clean_json_string(raw_json))
                logger.debug("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Gemini")
                return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
        return None

    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return bool(self.oai_client or self.gemini_pro)

    def get_active_provider(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if self.oai_client and self.gemini_pro:
            return "OpenAI + Gemini (fallback)"
        elif self.oai_client:
            return "OpenAI"
        elif self.gemini_pro:
            return "Gemini"
        return "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"