# ===============================================================
# –§–∞–π–ª: bot/services/mining_service.py (–ê–ª—å—Ñ–∞-–≤–µ—Ä—Å–∏—è)
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞.
# –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π
# –∑–∞–ø—è—Ç–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞.
# ===============================================================

import logging
import asyncio
from textwrap import dedent

from bot.services.market_data_service import MarketDataService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ ---
SECONDS_IN_DAY = 86400.0
# –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∞ Bitcoin –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BTC_BLOCK_TIME_SECONDS = 600.0 
# –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ –∏ –≥–æ–¥—É
DAYS_IN_MONTH = 30.44
DAYS_IN_YEAR = 365.25


class MiningService:
    """
    –°–µ—Ä–≤–∏—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Ä–∞—Å—á–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞–π–Ω–∏–Ω–≥–æ–º.
    """

    def __init__(self, market_data_service: MarketDataService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        :param market_data_service: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        self.market_data = market_data_service
        log.info("MiningService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def calculate(
        self,
        hashrate_ths: float,
        power_consumption_watts: int,
        electricity_cost: float,
        pool_commission: float
    ) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞.

        :param hashrate_ths: –•–µ—à—Ä–µ–π—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ TH/s.
        :param power_consumption_watts: –ü–æ—Ç—Ä–µ–±–ª—è–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å –≤ –í–∞—Ç—Ç–∞—Ö.
        :param electricity_cost: –°—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ USD –∑–∞ –∫–í—Ç/—á.
        :param pool_commission: –ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞.
        """
        log.info(
            f"–ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è {hashrate_ths} TH/s, {power_consumption_watts}W, "
            f"—ç/—ç: ${electricity_cost}/kWh, –∫–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞: {pool_commission}%"
        )

        # –®–∞–≥ 1: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç market_data_service
        results = await asyncio.gather(
            self.market_data.get_btc_price_usd(),
            self.market_data.get_network_hashrate_ths(),
            self.market_data.get_block_reward_btc(),
            self.market_data.get_usd_rub_rate(),
            return_exceptions=True
        )

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        btc_price_usd, network_hashrate_ths, block_reward_btc, usd_rub_rate = results

        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
        missing_data = []
        if isinstance(btc_price_usd, Exception) or not btc_price_usd:
            missing_data.append("—Ü–µ–Ω—É BTC")
            log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã BTC: {btc_price_usd}")
        if isinstance(network_hashrate_ths, Exception) or not network_hashrate_ths:
            missing_data.append("—Ö–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏")
            log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à—Ä–µ–π—Ç–∞ —Å–µ—Ç–∏: {network_hashrate_ths}")
        if isinstance(block_reward_btc, Exception) or not block_reward_btc:
            missing_data.append("–Ω–∞–≥—Ä–∞–¥—É –∑–∞ –±–ª–æ–∫")
            log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –±–ª–æ–∫: {block_reward_btc}")

        if missing_data:
            error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: {', '.join(missing_data)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            log.error(f"–†–∞—Å—á–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö: {missing_data}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_message}"

        # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã
        # 3.1 –†–∞—Å—á–µ—Ç "–≥—Ä—è–∑–Ω–æ–≥–æ" –¥–æ—Ö–æ–¥–∞
        user_share_of_network = float(hashrate_ths) / float(network_hashrate_ths)
        blocks_found_per_day = SECONDS_IN_DAY / BTC_BLOCK_TIME_SECONDS
        gross_revenue_btc_daily = user_share_of_network * blocks_found_per_day * float(block_reward_btc)
        gross_revenue_usd_daily = gross_revenue_btc_daily * float(btc_price_usd)

        # 3.2 –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
        power_kwh_daily = (float(power_consumption_watts) / 1000.0) * 24.0
        electricity_cost_usd_daily = power_kwh_daily * float(electricity_cost)
        pool_fee_decimal = float(pool_commission) / 100.0
        pool_fee_usd_daily = gross_revenue_usd_daily * pool_fee_decimal
        total_expenses_usd_daily = electricity_cost_usd_daily + pool_fee_usd_daily

        # 3.3 –†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
        net_profit_usd_daily = gross_revenue_usd_daily - total_expenses_usd_daily

        # –®–∞–≥ 4: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        result_text = dedent(f"""
            üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b>

            <b>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
            - –¶–µ–Ω–∞ BTC: <code>${btc_price_usd:,.2f}</code>
            - –ö—É—Ä—Å USD/RUB: <code>{usd_rub_rate:,.2f} ‚ÇΩ</code>
            - –•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏: <code>{network_hashrate_ths / 1_000_000:,.2f} EH/s</code>
            - –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫: <code>{block_reward_btc:.4f} BTC</code>

            ---

            <b>üí∞ –î–æ—Ö–æ–¥—ã (–≥—Ä—è–∑–Ω—ã–º–∏):</b>
            - –í –¥–µ–Ω—å: <code>${gross_revenue_usd_daily:.2f}</code> / <code>{gross_revenue_usd_daily * usd_rub_rate:.2f} ‚ÇΩ</code>
            - –í –º–µ—Å—è—Ü: <code>${gross_revenue_usd_daily * DAYS_IN_MONTH:.2f}</code> / <code>{gross_revenue_usd_daily * DAYS_IN_MONTH * usd_rub_rate:.2f} ‚ÇΩ</code>

            <b>üîå –†–∞—Å—Ö–æ–¥—ã:</b>
            - –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ/–¥–µ–Ω—å: <code>${electricity_cost_usd_daily:.2f}</code>
            - –ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞ ({pool_commission}%)/–¥–µ–Ω—å: <code>${pool_fee_usd_daily:.2f}</code>
            - <b>–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤/–¥–µ–Ω—å:</b> <code>${total_expenses_usd_daily:.2f}</code>

            ---

            ‚úÖ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b>
            - <b>–í –¥–µ–Ω—å:</b> <code>${net_profit_usd_daily:.2f}</code> / <code>{net_profit_usd_daily * usd_rub_rate:.2f} ‚ÇΩ</code>
            - <b>–í –º–µ—Å—è—Ü:</b> <code>${net_profit_usd_daily * DAYS_IN_MONTH:.2f}</code> / <code>{net_profit_usd_daily * DAYS_IN_MONTH * usd_rub_rate:.2f} ‚ÇΩ</code>
            - <b>–í –≥–æ–¥:</b> <code>${net_profit_usd_daily * DAYS_IN_YEAR:.2f}</code> / <code>{net_profit_usd_daily * DAYS_IN_YEAR * usd_rub_rate:.2f} ‚ÇΩ</code>
        """)

        if net_profit_usd_daily < 0:
            result_text += "\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–∞–π–Ω–∏–Ω–≥ –Ω–µ–≤—ã–≥–æ–¥–µ–Ω."

        log.info(f"–†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${net_profit_usd_daily:.2f}/–¥–µ–Ω—å.")
        return result_text.strip()
