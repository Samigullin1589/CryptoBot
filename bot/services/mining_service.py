# ===============================================================
# –§–∞–π–ª: bot/services/mining_service.py (–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ú–µ—Ç–æ–¥ calculate —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç
# –∫–æ–º–∏—Å—Å–∏—é –ø—É–ª–∞ (pool_commission).
# ===============================================================
import logging
from bot.services.market_data_service import MarketDataService

logger = logging.getLogger(__name__)

class MiningService:
    def __init__(self, market_data_service: MarketDataService):
        self.market_data_service = market_data_service

    async def calculate(
        self, 
        hashrate_ths: float, 
        power_consumption_watts: int, 
        electricity_cost: float,
        pool_commission: float, # <-- –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†
        coin_symbol: str = "BTC"
    ) -> str:
        """
        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é –ø—É–ª–∞.
        """
        logger.info(
            f"Calculating for {hashrate_ths} TH/s, {power_consumption_watts}W, "
            f"coin: {coin_symbol}, electricity_cost: ${electricity_cost}/kWh, pool_fee: {pool_commission}%"
        )

        network_data = await self.market_data_service.get_coin_network_data(coin_symbol)
        if not network_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        coin_price_usd = network_data["price"]
        network_hashrate_ths = network_data["network_hashrate"] / 1_000_000_000_000
        block_reward_coins = network_data["block_reward"]
        
        if network_hashrate_ths == 0 or coin_price_usd == 0:
            logger.error(f"Received zero values from API for {coin_symbol}. Hashrate: {network_hashrate_ths}, Price: {coin_price_usd}")
            return "‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API (—Ü–µ–Ω–∞ –∏–ª–∏ —Ö–µ—à—Ä–µ–π—Ç —Ä–∞–≤–Ω—ã –Ω—É–ª—é). –†–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω."

        user_share = hashrate_ths / network_hashrate_ths
        blocks_per_day = (60 / 10) * 24
        coins_per_day = user_share * block_reward_coins * blocks_per_day
        gross_income_usd_day = coins_per_day * coin_price_usd
        
        power_consumption_kwh_day = (power_consumption_watts * 24) / 1000
        electricity_cost_day = power_consumption_kwh_day * electricity_cost
        
        # --- –ù–û–í–´–ô –†–ê–°–ß–ï–¢: –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø—É–ª–∞ ---
        pool_fee_usd_day = gross_income_usd_day * (pool_commission / 100)
        net_profit_usd_day = gross_income_usd_day - electricity_cost_day - pool_fee_usd_day
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –†–ê–°–ß–ï–¢–ê ---
        
        net_profit_usd_month = net_profit_usd_day * 30

        response_message = (
            f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è {hashrate_ths} TH/s ({power_consumption_watts} –í—Ç):</b>\n\n"
            f"<b>–î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–º–∏):</b>\n"
            f"  - –í –¥–µ–Ω—å: <b>${gross_income_usd_day:.2f}</b>\n"
            f"  - –í –º–µ—Å—è—Ü: <b>${gross_income_usd_day * 30:.2f}</b>\n\n"
            f"<b>–†–∞—Å—Ö–æ–¥—ã:</b>\n"
            f"  - –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: <b>${electricity_cost_day:.2f}/–¥–µ–Ω—å</b> (–ø—Ä–∏ ${electricity_cost:.4f}/–∫–í—Ç—á)\n"
            f"  - –ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞: <b>${pool_fee_usd_day:.2f}/–¥–µ–Ω—å</b> ({pool_commission}%)\n\n"
            f"<b>‚úÖ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b>\n"
            f"  - –í –¥–µ–Ω—å: <b>${net_profit_usd_day:.2f}</b>\n"
            f"  - –í –º–µ—Å—è—Ü: <b>${net_profit_usd_month:.2f}</b>\n\n"
            f"<pre>–†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
            f"–¶–µ–Ω–∞ {coin_symbol}: ${coin_price_usd:,.2f}\n"
            f"–•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏: {network_hashrate_ths:,.0f} TH/s</pre>"
        )
        
        return response_message
