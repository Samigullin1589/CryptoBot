# ===============================================================
# –§–∞–π–ª: bot/services/mining_service.py (–ê–õ–¨–§–ê-–†–ï–®–ï–ù–ò–ï)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ú–µ—Ç–æ–¥ calculate –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
# Blockchain.com –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
# ===============================================================

import logging
from bot.services.market_data_service import MarketDataService

logger = logging.getLogger(__name__)

class MiningService:
    def __init__(self, market_data_service: MarketDataService):
        self.market_data_service = market_data_service

    async def calculate(
        self, 
        hashrate_ths: float, 
        power_consumption_watts: int, 
        electricity_cost: float,
        pool_commission: float,
        coin_symbol: str = "BTC",
        force_refresh: bool = True
    ) -> str:
        """
        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é –ø—É–ª–∞.
        force_refresh: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à.
        """
        logger.info(
            f"Calculating for {hashrate_ths} TH/s, {power_consumption_watts}W, "
            f"coin: {coin_symbol}, electricity_cost: ${electricity_cost}/kWh, pool_fee: {pool_commission}%, "
            f"force_refresh={force_refresh}"
        )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if hashrate_ths <= 0 or power_consumption_watts <= 0 or electricity_cost < 0 or pool_commission < 0:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (hashrate, –º–æ—â–Ω–æ—Å—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –∏ –∫–æ–º–∏—Å—Å–∏—é –ø—É–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏)."

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–∏ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        network_data = await self.market_data_service.get_coin_network_data(coin_symbol, force_refresh)
        if not network_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API."

        coin_price_usd = network_data.get("price", 0.0)
        network_hashrate_ths = network_data.get("network_hashrate", 0.0)
        block_reward_coins = network_data.get("block_reward", 0.0)
        
        if network_hashrate_ths <= 0 or coin_price_usd <= 0 or block_reward_coins <= 0:
            logger.error(
                f"Received zero or invalid values from API for {coin_symbol}. "
                f"Hashrate: {network_hashrate_ths} TH/s, Price: ${coin_price_usd}, Block Reward: {block_reward_coins} BTC"
            )
            return "‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API (—Ü–µ–Ω–∞, —Ö–µ—à—Ä–µ–π—Ç –∏–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫ —Ä–∞–≤–Ω—ã –Ω—É–ª—é –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã). –†–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω."

        # –†–∞—Å—á–µ—Ç –¥–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Ç–∏
        user_share = hashrate_ths / network_hashrate_ths
        blocks_per_day = (60 / 10) * 24  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è BTC
        coins_per_day = user_share * block_reward_coins * blocks_per_day
        gross_income_usd_day = coins_per_day * coin_price_usd
        
        # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é
        power_consumption_kwh_day = (power_consumption_watts * 24) / 1000
        electricity_cost_day = power_consumption_kwh_day * electricity_cost
        
        # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –ø—É–ª–∞
        pool_fee_usd_day = gross_income_usd_day * (pool_commission / 100)
        net_profit_usd_day = gross_income_usd_day - electricity_cost_day - pool_fee_usd_day
        
        net_profit_usd_month = net_profit_usd_day * 30

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response_message = (
            f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è {hashrate_ths} TH/s ({power_consumption_watts} –í—Ç):</b>\n\n"
            f"<b>–î–æ—Ö–æ–¥ (–≥—Ä—è–∑–Ω—ã–º–∏):</b>\n"
            f"  - –í –¥–µ–Ω—å: <b>${gross_income_usd_day:.2f}</b>\n"
            f"  - –í –º–µ—Å—è—Ü: <b>${gross_income_usd_day * 30:.2f}</b>\n\n"
            f"<b>–†–∞—Å—Ö–æ–¥—ã:</b>\n"
            f"  - –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: <b>${electricity_cost_day:.2f}/–¥–µ–Ω—å</b> (–ø—Ä–∏ ${electricity_cost:.4f}/–∫–í—Ç—á)\n"
            f"  - –ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞: <b>${pool_fee_usd_day:.2f}/–¥–µ–Ω—å</b> ({pool_commission}%)\n\n"
            f"<b>‚úÖ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b>\n"
            f"  - –í –¥–µ–Ω—å: <b>${net_profit_usd_day:.2f}</b>\n"
            f"  - –í –º–µ—Å—è—Ü: <b>${net_profit_usd_month:.2f}</b>\n\n"
            f"<pre>–†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
            f"–¶–µ–Ω–∞ {coin_symbol}: ${coin_price_usd:,.2f}\n"
            f"–•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏: {network_hashrate_ths:,.4f} TH/s\n"
            f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫: {block_reward_coins:.8f} {coin_symbol}</pre>"
        )
        
        return response_message