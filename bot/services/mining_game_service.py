# =================================================================================
# –§–∞–π–ª: bot/services/mining_game_service.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø, –ê–í–ì–£–°–¢ 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é TYPE_CHECKING.
# =================================================================================

import time
import json
import logging
from typing import Optional, Tuple, Dict, List, TYPE_CHECKING
from datetime import datetime, timedelta, timezone

import redis.asyncio as redis
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup

from bot.config.settings import Settings
from bot.services.user_service import UserService
from bot.services.event_service import MiningEventService
from bot.services.achievement_service import AchievementService
from bot.utils.models import MiningSessionResult, AsicMiner, User, UserGameProfile
from bot.keyboards.game_keyboards import get_game_main_menu_keyboard, get_electricity_menu_keyboard
from bot.utils.lua_scripts import LuaScripts
from bot.utils.keys import KeyFactory

if TYPE_CHECKING:
    from bot.services.market_service import AsicMarketService

logger = logging.getLogger(__name__)

class MiningGameService:
    def __init__(self,
                 redis: redis.Redis,
                 scheduler: AsyncIOScheduler,
                 settings: Settings,
                 user_service: UserService,
                 market_service: "AsicMarketService",
                 event_service: MiningEventService,
                 achievement_service: AchievementService,
                 bot: Bot):
        self.redis = redis
        self.scheduler = scheduler
        self.settings = settings
        self.user_service = user_service
        self.market = market_service
        self.events = event_service
        self.achievements = achievement_service
        self.bot = bot
        self.keys = KeyFactory
        self.lua_start_session = None
        self.lua_end_session = None

    async def setup(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç LUA-—Å–∫—Ä–∏–ø—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞."""
        self.lua_start_session = await self.redis.script_load(LuaScripts.START_MINING_SESSION)
        self.lua_end_session = await self.redis.script_load(LuaScripts.END_MINING_SESSION)
        logger.info("LUA-—Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è MiningGameService —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    async def get_user_game_profile(self, user_id: int) -> UserGameProfile:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤–∞—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        profile_key = self.keys.user_game_profile(user_id)
        profile_data = await self.redis.hgetall(profile_key)

        if not profile_data:
            default_tariff = self.settings.game.default_electricity_tariff
            initial_data = {
                "balance": "0.0",
                "total_earned": "0.0",
                "current_tariff": default_tariff,
                "owned_tariffs": default_tariff,
            }
            await self.redis.hmset(profile_key, initial_data)
            profile_data.update(initial_data)
        
        current_tariff = profile_data.get("current_tariff")
        if not current_tariff:
            current_tariff = self.settings.game.default_electricity_tariff
            await self.redis.hset(profile_key, "current_tariff", current_tariff)

        game_profile = UserGameProfile(
            balance=float(profile_data.get("balance", 0.0)),
            total_earned=float(profile_data.get("total_earned", 0.0)),
            current_tariff=current_tariff,
            owned_tariffs=profile_data.get("owned_tariffs", "").split(',')
        )
        
        await self.redis.zadd(self.keys.game_leaderboard(), {str(user_id): game_profile.balance})
        return game_profile

    async def get_user_asics(self, user_id: int) -> List[AsicMiner]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ASIC'–æ–≤ –≤ –∞–Ω–≥–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        hangar_key = self.keys.user_hangar(user_id)
        asics_json = await self.redis.hvals(hangar_key)
        return [AsicMiner.model_validate_json(asic_str) for asic_str in asics_json]

    async def start_session(self, user_id: int, asic_id: str) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ASIC –∏–∑ –∞–Ω–≥–∞—Ä–∞."""
        if await self.redis.exists(self.keys.active_session(user_id)):
            return "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –º–∞–π–Ω–∏–Ω–≥–∞!"
        
        hangar_key = self.keys.user_hangar(user_id)
        asic_data_json = await self.redis.hget(hangar_key, asic_id)
        if not asic_data_json:
            return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–≥–∞—Ä–µ."
            
        asic = AsicMiner.model_validate_json(asic_data_json)
        profile = await self.get_user_game_profile(user_id)
        current_tariff_cost = self.settings.game.electricity_tariffs[profile.current_tariff].cost_per_kwh
        session_duration = self.settings.game.session_duration_minutes * 60
        end_time = datetime.now(timezone.utc) + timedelta(seconds=session_duration)
        
        keys = [self.keys.active_session(user_id), hangar_key, self.keys.game_stats()]
        args = [asic_id, asic.name, asic.power or 0, asic.profitability or 0, int(time.time()), end_time.isoformat(), profile.current_tariff, current_tariff_cost]
        
        if await self.redis.evalsha(self.lua_start_session, len(keys), *keys, *args) == 0:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –∞—Å–∏–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."
        
        from bot.jobs.game_tasks import scheduled_end_session
        self.scheduler.add_job(scheduled_end_session, trigger='date', run_date=end_time, args=[user_id, self], id=f"end_session_for_{user_id}", replace_existing=True)
        
        logger.info(f"User {user_id} started session with ASIC ID {asic_id}. Ends at {end_time}.")
        return (f"‚úÖ –°–µ—Å—Å–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ <b>{asic.name}</b> –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
                f"–û–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>{self.settings.game.session_duration_minutes / 60:.0f} —á–∞—Å–æ–≤</b>.")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥
    async def start_session_with_new_asic(self, user_id: int, asic: AsicMiner) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π ASIC –≤ –∞–Ω–≥–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ "–ø–æ–∫—É–ø–∫–µ" –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
        """
        # –í —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ —Ü–µ–Ω–∞ ASIC –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –æ–Ω –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è.
        hangar_key = self.keys.user_hangar(user_id)
        await self.redis.hset(hangar_key, asic.id, asic.model_dump_json())
        logger.info(f"User {user_id} acquired new ASIC '{asic.name}' from shop.")
        
        # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–Ω–≥–∞—Ä, –≤—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏.
        return await self.start_session(user_id, asic.id)

    async def end_session(self, user_id: int) -> Optional[MiningSessionResult]:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—é, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º."""
        logger.info(f"Ending mining session for user {user_id}")
        event = self.events.get_random_event()
        
        keys = [self.keys.active_session(user_id), self.keys.user_game_profile(user_id), self.keys.user_hangar(user_id), self.keys.game_stats()]
        args = [
            int(time.time()), self.settings.game.session_duration_minutes * 60,
            event.profit_multiplier if event else 1.0, event.cost_multiplier if event else 1.0
        ]
        
        result_json = await self.redis.evalsha(self.lua_end_session, len(keys), *keys, *args)
        if not result_json:
            logger.warning(f"No active session found for user {user_id} during scheduled end.")
            return None
            
        result_data = json.loads(result_json)
        result = MiningSessionResult(**result_data['result'])
        if event:
            result.event_description = event.description
        
        unlocked_ach = await self.achievements.process_static_event(user_id, "session_completed")
        if unlocked_ach:
            result.unlocked_achievement = unlocked_ach
        
        logger.info(f"User {user_id} session ended. Net profit: {result.net_earned:.4f}.")
        return result

    async def get_farm_and_stats_info(self, user_id: int) -> Tuple[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞."""
        session_data = await self.redis.hgetall(self.keys.active_session(user_id))

        if session_data:
            end_time = datetime.fromisoformat(session_data['end_time_iso'])
            remaining_seconds = max(0, (end_time - datetime.now(end_time.tzinfo)).total_seconds())
            farm_info = (f"üè† <b>–í–∞—à–∞ —Ñ–µ—Ä–º–∞ (–≤ —Ä–∞–±–æ—Ç–µ)</b>\n"
                         f"<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {session_data['asic_name']}\n"
                         f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑:</b> {remaining_seconds / 3600:.1f} —á.")
        else:
            farm_info = "üè† <b>–í–∞—à–∞ —Ñ–µ—Ä–º–∞ –ø—É—Å—Ç–∞</b>\n\n–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç –≤ –∞–Ω–≥–∞—Ä–µ."

        user_asics = await self.get_user_asics(user_id)
        if user_asics:
            farm_info += "\n\nüõ† <b>–í–∞—à –∞–Ω–≥–∞—Ä (–¥–æ—Å—Ç—É–ø–Ω–æ):</b>\n" + "\n".join([f"‚Ä¢ {asic.name}" for asic in user_asics])
        else:
            farm_info += "\n\nüõ† <b>–í–∞—à –∞–Ω–≥–∞—Ä –ø—É—Å—Ç.</b>"

        profile = await self.get_user_game_profile(user_id)
        stats_info = (f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                      f"<b>–ë–∞–ª–∞–Ω—Å:</b> {profile.balance:,.2f} –º–æ–Ω–µ—Ç üí∞\n"
                      f"<b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {profile.total_earned:,.2f} –º–æ–Ω–µ—Ç\n"
                      f"<b>–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> {profile.current_tariff}")
        return farm_info, stats_info

    async def process_withdrawal(self, user: User) -> Tuple[str, bool]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤."""
        profile_key = self.keys.user_game_profile(user.id)
        profile = await self.get_user_game_profile(user.id)
        balance = profile.balance
        min_withdrawal_amount = self.settings.game.min_withdrawal_amount
        if balance < min_withdrawal_amount:
            return f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{min_withdrawal_amount}</b> –º–æ–Ω–µ—Ç. –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {balance:,.2f}.", False
        
        async with self.redis.pipeline(transaction=True) as pipe:
            pipe.hincrbyfloat(profile_key, "balance", -balance)
            pipe.hincrby(self.keys.global_stats(), "pending_withdrawals", 1)
            await pipe.execute()
        
        if self.settings.ADMIN_CHAT_ID:
            await self.bot.send_message(
                self.settings.ADMIN_CHAT_ID,
                f"‚ö†Ô∏è <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user.id}'>{user.first_name}</a> (@{user.username})\n"
                f"ID: <code>{user.id}</code>\n"
                f"–°—É–º–º–∞: <b>{balance:,.2f} –º–æ–Ω–µ—Ç</b>"
            )
        logger.info(f"User {user.id} created a withdrawal request for {balance} coins.")
        return "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.", True

    async def get_electricity_menu(self, user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏."""
        profile = await self.get_user_game_profile(user_id)
        text = f"üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–µ–π</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: <b>{profile.current_tariff}</b>"
        keyboard = get_electricity_menu_keyboard(self.settings.game.electricity_tariffs, profile.owned_tariffs, profile.current_tariff)
        return text, keyboard

    async def select_tariff(self, user_id: int, tariff_name: str) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        profile = await self.get_user_game_profile(user_id)
        if tariff_name in profile.owned_tariffs:
            await self.redis.hset(self.keys.user_game_profile(user_id), "current_tariff", tariff_name)
            logger.info(f"User {user_id} switched tariff to {tariff_name}")
            return f"‚úÖ –¢–∞—Ä–∏—Ñ '{tariff_name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!"
        return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∞—Ä–∏—Ñ—É."

    async def buy_tariff(self, user_id: int, tariff_name: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."""
        profile_key = self.keys.user_game_profile(user_id)
        profile = await self.get_user_game_profile(user_id)
        if tariff_name in profile.owned_tariffs:
            return "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ."
        
        tariff_info = self.settings.game.electricity_tariffs.get(tariff_name)
        if not tariff_info: return "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        price = tariff_info.unlock_price
        if profile.balance < price:
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {price:,.2f} –º–æ–Ω–µ—Ç, —É –≤–∞—Å {profile.balance:,.2f}."
        
        new_owned_list = profile.owned_tariffs + [tariff_name]
        async with self.redis.pipeline(transaction=True) as pipe:
            pipe.hincrbyfloat(profile_key, "balance", -price)
            pipe.hset(profile_key, "owned_tariffs", ",".join(new_owned_list))
            await pipe.execute()
        
        unlocked_ach = await self.achievements.process_static_event(
            user_id, "tariff_bought", {"tariff_name": tariff_name}
        )
        if unlocked_ach:
            try:
                await self.bot.send_message(
                    user_id,
                    f"üèÜ <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</b>\n\n"
                    f"<b>{unlocked_ach.name}</b>: {unlocked_ach.description}\n"
                    f"<i>–ù–∞–≥—Ä–∞–¥–∞: +{unlocked_ach.reward_coins} –º–æ–Ω–µ—Ç.</i>"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"User {user_id} bought tariff {tariff_name}")
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ '{tariff_name}'."

    async def get_leaderboard(self, top_n: int = 10) -> Dict[int, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É –∏–∑ Redis Sorted Set."""
        leaderboard_raw = await self.redis.zrevrange(self.keys.game_leaderboard(), 0, top_n - 1, withscores=True)
        return {int(user_id): score for user_id, score in leaderboard_raw}