# ===============================================================
# –§–∞–π–ª: bot/services/mining_game_service.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥"
# —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–π –∏ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.
# ===============================================================

import time
import logging
from typing import Optional, Tuple, List
from datetime import datetime, timedelta

import redis.asyncio as redis
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.config.settings import AppSettings
from bot.services.admin_service import AdminService
from bot.utils.models import MiningSessionResult, AsicMiner, UserProfile
from bot.keyboards.mining_keyboards import get_electricity_menu_keyboard
from bot.services.user_service import RedisLock

logger = logging.getLogger(__name__)

class _KeyFactory:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª—é—á–µ–π –¥–ª—è Redis, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –∏–≥—Ä—ã."""
    @staticmethod
    def user_game_profile(user_id: int) -> str:
        return f"game:profile:{user_id}"

    @staticmethod
    def active_session(user_id: int) -> str:
        return f"game:session:{user_id}"
    
    @staticmethod
    def global_stats() -> str:
        return "game:stats"

class MiningGameService:
    """–°–µ—Ä–≤–∏—Å, –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—â–∏–π –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏–≥—Ä—ã '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥'."""
    
    def __init__(self, redis_client: redis.Redis, admin_service: AdminService, scheduler: AsyncIOScheduler, settings: AppSettings):
        self.redis = redis_client
        self.admin = admin_service
        self.scheduler = scheduler
        self.settings = settings
        self.keys = _KeyFactory

    async def _get_user_game_profile(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π."""
        profile_key = self.keys.user_game_profile(user_id)
        profile = await self.redis.hgetall(profile_key)
        if not profile:
            default_tariff = self.settings.game.default_electricity_tariff.value
            new_profile = {
                "balance": 0.0,
                "total_earned": 0.0,
                "current_tariff": default_tariff,
                "owned_tariffs": default_tariff,
            }
            await self.redis.hmset(profile_key, new_profile)
            return new_profile
        return profile

    async def start_session(self, user_id: int, asic: AsicMiner) -> str:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—é –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
        session_key = self.keys.active_session(user_id)
        if await self.redis.exists(session_key):
            return "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –º–∞–π–Ω–∏–Ω–≥–∞!"

        profile = await self._get_user_game_profile(user_id)
        session_duration = self.settings.game.mining_duration_seconds
        end_time = datetime.now() + timedelta(seconds=session_duration)
        
        session_data = {
            "start_time": int(time.time()),
            "end_time_iso": end_time.isoformat(),
            "asic_name": asic.name,
            "asic_power": asic.power or 0,
            "asic_profitability_per_day": asic.profitability or 0.0,
            "user_tariff": profile['current_tariff']
        }
        job_id = f"end_session_for_user_{user_id}"
        async with self.redis.pipeline(transaction=True) as pipe:
            await pipe.hmset(session_key, session_data)
            await pipe.hincrby(self.keys.global_stats(), "active_sessions", 1)
            await pipe.execute()

        self.scheduler.add_job(
            "bot.services.mining_game_service:scheduled_end_session", # –ü—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            trigger='date', run_date=end_time,
            args=[user_id], id=job_id, replace_existing=True
        )
        
        logger.info(f"User {user_id} started a mining session with {asic.name}. Scheduled to end at {end_time}.")
        return (f"‚úÖ –°–µ—Å—Å–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ <b>{asic.name}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
                f"–û–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>{session_duration / 3600:.0f} —á–∞—Å–æ–≤</b>. "
                f"–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.")

    async def end_session(self, user_id: int) -> Optional[MiningSessionResult]:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É."""
        logger.info(f"Processing end of mining session for user {user_id}")
        session_key = self.keys.active_session(user_id)
        
        lock_key = f"lock:{session_key}"
        async with RedisLock(self.redis, lock_key, timeout=20):
            session_data = await self.redis.hgetall(session_key)
            if not session_data:
                logger.warning(f"No active mining session found for user {user_id} to end.")
                return None

            profile_key = self.keys.user_game_profile(user_id)
            profile = await self._get_user_game_profile(user_id)
            
            tariff_details = self.settings.game.electricity_tariffs.get(profile['current_tariff'])
            power_watts = int(session_data.get("asic_power", 0))
            profitability_per_day = float(session_data.get("asic_profitability_per_day", 0))
            start_time = int(session_data.get("start_time", int(time.time())))
            
            actual_duration = min(int(time.time()) - start_time, self.settings.game.mining_duration_seconds)
            gross_earned = (profitability_per_day / 86400) * actual_duration
            power_kwh = (power_watts / 1000) * (actual_duration / 3600)
            total_electricity_cost = power_kwh * tariff_details.cost_per_hour
            net_earned = max(0, gross_earned - total_electricity_cost)

            async with self.redis.pipeline(transaction=True) as pipe:
                pipe.delete(session_key)
                pipe.hincrbyfloat(profile_key, "balance", net_earned)
                pipe.hincrbyfloat(profile_key, "total_earned", net_earned)
                pipe.hincrby(self.keys.global_stats(), "active_sessions", -1)
                pipe.hincrbyfloat(self.keys.global_stats(), "total_balance", net_earned)
                await pipe.execute()
        
        logger.info(f"User {user_id} session ended. Net profit: {net_earned:.4f}.")
        return MiningSessionResult(
            asic_name=session_data.get('asic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ASIC'),
            user_tariff_name=profile['current_tariff'],
            gross_earned=gross_earned, total_electricity_cost=total_electricity_cost, net_earned=net_earned
        )

    async def get_farm_and_stats_info(self, user_id: int) -> Tuple[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–µ—Ä–º–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        session_data = await self.redis.hgetall(self.keys.active_session(user_id))
        
        if session_data:
            end_time = datetime.fromisoformat(session_data['end_time_iso'])
            remaining_seconds = max(0, (end_time - datetime.now(timezone.utc)).total_seconds())
            farm_info = (f"üè† <b>–í–∞—à–∞ —Ñ–µ—Ä–º–∞</b>\n\n"
                         f"<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {session_data['asic_name']}\n"
                         f"<b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–±–æ—Ç–µ ‚úÖ\n"
                         f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑:</b> {remaining_seconds / 3600:.1f} —á.")
        else:
            farm_info = "üè† <b>–í–∞—à–∞ —Ñ–µ—Ä–º–∞ –ø—É—Å—Ç–∞</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –º–∞–≥–∞–∑–∏–Ω–µ."

        profile = await self._get_user_game_profile(user_id)
        stats_info = (f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                      f"<b>–ë–∞–ª–∞–Ω—Å:</b> {float(profile['balance']):,.2f} –º–æ–Ω–µ—Ç üí∞\n"
                      f"<b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {float(profile['total_earned']):,.2f} –º–æ–Ω–µ—Ç\n"
                      f"<b>–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> {profile['current_tariff']}")
        
        return farm_info, stats_info

    async def process_withdrawal(self, user_id: int, user_profile: UserProfile) -> Tuple[str, bool]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤."""
        profile_key = self.keys.user_game_profile(user_id)
        profile = await self._get_user_game_profile(user_id)
        balance = float(profile.get('balance', 0.0))
        
        min_withdrawal_amount = self.settings.game.min_withdrawal_amount
        if balance < min_withdrawal_amount:
            return f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{min_withdrawal_amount}</b> –º–æ–Ω–µ—Ç. –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {balance:,.2f}.", False

        # –ê—Ç–æ–º–∞—Ä–Ω–æ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        async with self.redis.pipeline(transaction=True) as pipe:
            pipe.hincrbyfloat(profile_key, "balance", -balance)
            pipe.hincrby(self.keys.global_stats(), "pending_withdrawals", 1)
            await pipe.execute()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"‚ö†Ô∏è <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{user_profile.full_name}</a> (@{user_profile.username})\n"
            f"ID: <code>{user_id}</code>\n"
            f"–°—É–º–º–∞: <b>{balance:,.2f} –º–æ–Ω–µ—Ç</b>"
        )
        await self.admin.notify_admins(admin_message)

        logger.info(f"User {user_id} created a withdrawal request for {balance} coins.")
        return "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.", True

    async def get_electricity_menu(self, user_id: int) -> Tuple[str, 'InlineKeyboardMarkup']:
        profile = await self._get_user_game_profile(user_id)
        current_tariff = profile['current_tariff']
        owned_tariffs = profile.get('owned_tariffs', current_tariff).split(',')
        text = (f"üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–µ–π</b>\n\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: <b>{current_tariff}</b>")
        keyboard = get_electricity_menu_keyboard(self.settings.game.electricity_tariffs, owned_tariffs, current_tariff)
        return text, keyboard

    async def select_tariff(self, user_id: int, tariff_name: str) -> str:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π."""
        profile = await self._get_user_game_profile(user_id)
        owned_tariffs = profile.get('owned_tariffs', '').split(',')
        if tariff_name in owned_tariffs:
            await self.redis.hset(self.keys.user_game_profile(user_id), "current_tariff", tariff_name)
            logger.info(f"User {user_id} switched tariff to {tariff_name}")
            return f"‚úÖ –¢–∞—Ä–∏—Ñ '{tariff_name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!"
        return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∞—Ä–∏—Ñ—É."

    async def buy_tariff(self, user_id: int, tariff_name: str) -> str:
        """–ü–æ–∫—É–ø–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."""
        profile_key = self.keys.user_game_profile(user_id)
        profile = await self._get_user_game_profile(user_id)
        balance = float(profile.get('balance', 0.0))
        owned_tariffs = profile.get('owned_tariffs', '').split(',')
        if tariff_name in owned_tariffs:
            return "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ."
            
        tariff_info = self.settings.game.electricity_tariffs.get(tariff_name)
        if not tariff_info: return "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω."

        price = tariff_info.unlock_price
        if balance < price:
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {price} –º–æ–Ω–µ—Ç, —É –≤–∞—Å {balance:,.2f}."
            
        new_owned_tariffs = ",".join(owned_tariffs + [tariff_name])
        async with self.redis.pipeline(transaction=True) as pipe:
            pipe.hincrbyfloat(profile_key, "balance", -price)
            pipe.hset(profile_key, "owned_tariffs", new_owned_tariffs)
            await pipe.execute()
            
        logger.info(f"User {user_id} bought tariff {tariff_name} for {price}")
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ '{tariff_name}'."


async def scheduled_end_session(user_id: int):
    """
    –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ APScheduler.
    –û–Ω–∞ –∑–∞–Ω–æ–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    from bot.utils.dependencies import deps
    if not deps.bot:
        await deps.initialize()
    
    result = await deps.mining_game_service.end_session(user_id)
    
    if result:
        text = (f"‚úÖ –°–µ—Å—Å–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ <b>{result.asic_name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"–î–æ—Ö–æ–¥: {result.gross_earned:.2f} –º–æ–Ω–µ—Ç\n"
                f"–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —ç/—ç: {result.total_electricity_cost:.2f} –º–æ–Ω–µ—Ç\n"
                f"<b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {result.net_earned:.2f} –º–æ–Ω–µ—Ç</b>")
        try:
            await deps.bot.send_message(user_id, text)
        except Exception as e:
            logger.error(f"Failed to send session end notification to user {user_id}: {e}")