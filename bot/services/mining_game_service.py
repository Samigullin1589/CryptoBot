# bot/services/mining_game_service.py
# –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 23.08.2025
# –í–µ—Ä—Å–∏—è: 2.1.0
# –û–ø–∏—Å–∞–Ω–∏–µ: –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞".

import json
import time
from typing import Dict, List, Optional, Tuple

from aiogram.types import User as TelegramUser
from loguru import logger
from pydantic import ValidationError
from redis.asyncio import Redis

from bot.config.settings import settings
from bot.services.achievement_service import AchievementService
from bot.services.asic_service import AsicService
from bot.services.user_service import UserService
from bot.utils.keys import KeyFactory
from bot.utils.models import AsicMiner, ElectricityTariff, MiningSession, UserGameStats
from bot.utils.redis_lock import LockAcquisitionError, RedisLock
from bot.config.settings import MiningGameServiceConfig


class MiningGameService:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–π –¥–æ–º–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥".
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø —Å–µ—Å—Å–∏–π, –ø–æ–∫—É–ø–∫—É/–≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """

    def __init__(
        self,
        user_service: UserService,
        asic_service: AsicService,
        achievement_service: AchievementService,
        redis_client: Redis,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
        """
        self.redis = redis_client
        self.user_service = user_service
        self.asic_service = asic_service
        self.achievement_service = achievement_service
        self.config: MiningGameServiceConfig = settings.game
        self.keys = KeyFactory
        logger.info("–°–µ—Ä–≤–∏—Å MiningGameService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def get_active_session(self, user_id: int) -> Optional[MiningSession]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å."""
        session_data = await self.redis.hgetall(self.keys.active_session(user_id))
        if not session_data:
            return None
        try:
            return MiningSession.model_validate(session_data)
        except ValidationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è user_id={user_id}: {e}. –î–∞–Ω–Ω—ã–µ: {session_data}")
            await self.redis.delete(self.keys.active_session(user_id))
            return None

    async def get_user_game_stats(self, user_id: int) -> UserGameStats:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        stats_data = await self.redis.hgetall(self.keys.user_game_stats(user_id))
        return UserGameStats.model_validate(stats_data or {})

    async def purchase_and_start_session(self, user_id: int, selected_asic: AsicMiner) -> Tuple[str, bool]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–∫—É–ø–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—é.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Å–æ–æ–±—â–µ–Ω–∏–µ_–¥–ª—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–ª–∞–≥_—É—Å–ø–µ—Ö–∞).
        """
        lock_key = f"lock:session:{user_id}"
        try:
            async with RedisLock(self.redis, lock_key, timeout=5):
                return await self._atomic_start_session(user_id, selected_asic)
        except LockAcquisitionError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é.")
            return "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.", False
        except Exception as e:
            logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è user_id={user_id}: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", False

    async def _atomic_start_session(self, user_id: int, selected_asic: AsicMiner) -> Tuple[str, bool]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
        if await self.redis.exists(self.keys.active_session(user_id)):
            return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –º–∞–π–Ω–∏–Ω–≥–∞.", False

        price = selected_asic.price or 0.0
        if price < 0:
            return "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.", False

        if price > 0:
            debit_success, _ = await self.user_service.debit_balance(
                user_id, price, reason=f"–ü–æ–∫—É–ø–∫–∞ ASIC: {selected_asic.name}"
            )
            if not debit_success:
                price_f = f"{price:,.2f}".replace(",", " ")
                return f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ <b>{selected_asic.name}</b> (–Ω—É–∂–Ω–æ {price_f} –º–æ–Ω–µ—Ç).", False

        now = time.time()
        current_tariff = await self._get_current_tariff_object(user_id)
        
        session = MiningSession(
            asic_json=selected_asic.model_dump_json(),
            started_at=now,
            ends_at=now + self.config.session_duration_minutes * 60,
            tariff_json=current_tariff.model_dump_json()
        )

        try:
            pipe = self.redis.pipeline()
            pipe.hset(self.keys.active_session(user_id), mapping=session.model_dump(mode="json"))
            pipe.expire(self.keys.active_session(user_id), self.config.session_duration_minutes * 60 + 10)
            pipe.hincrby(self.keys.user_game_stats(user_id), "sessions_total", 1)
            if price > 0:
                pipe.hincrbyfloat(self.keys.user_game_stats(user_id), "spent_total", price)
            await pipe.execute()

            await self.achievement_service.process_static_event(user_id, "mining_session_started")
            
            duration_min = self.config.session_duration_minutes
            msg = (
                f"üéâ –°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
                f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: <b>{selected_asic.name}</b>\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration_min} –º–∏–Ω.</b>"
            )
            return msg, True
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –≤ Redis –¥–ª—è user_id={user_id}: {e}")
            await self.user_service.credit_balance(user_id, price, reason="–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å–ª–µ —Å–±–æ—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", False

    async def get_electricity_tariffs(self) -> List[ElectricityTariff]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return [ElectricityTariff(name=name, **data.model_dump()) for name, data in self.config.electricity_tariffs.items()]

    async def get_user_tariffs_info(self, user_id: int) -> Tuple[List[str], str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ."""
        owned_key = self.keys.owned_tariffs(user_id)
        profile_key = self.keys.user_profile(user_id)
        
        owned_raw, current_raw = await asyncio.gather(
            self.redis.smembers(owned_key),
            self.redis.hget(profile_key, "current_tariff")
        )
        
        owned = list(owned_raw or [])
        if self.config.default_electricity_tariff not in owned:
            owned.append(self.config.default_electricity_tariff)
            
        current = current_raw or self.config.default_electricity_tariff
        return sorted(owned), current

    async def _get_current_tariff_object(self, user_id: int) -> ElectricityTariff:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Pydantic-–æ–±—ä–µ–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        _, current_tariff_name = await self.get_user_tariffs_info(user_id)
        tariff_data = self.config.electricity_tariffs.get(current_tariff_name)
        
        if not tariff_data:
            default_name = self.config.default_electricity_tariff
            tariff_data = self.config.electricity_tariffs[default_name]
            return ElectricityTariff(name=default_name, **tariff_data.model_dump())
            
        return ElectricityTariff(name=current_tariff_name, **tariff_data.model_dump())

    async def select_tariff(self, user_id: int, tariff_name: str) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—É—â–µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –∫—É–ø–ª–µ–Ω."""
        all_tariffs = self.config.electricity_tariffs.keys()
        if tariff_name not in all_tariffs:
            return "–¢–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

        owned, _ = await self.get_user_tariffs_info(user_id)
        if tariff_name not in owned:
            return "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ."

        await self.redis.hset(self.keys.user_profile(user_id), "current_tariff", tariff_name)
        return f"üîå –¢–∞—Ä–∏—Ñ <b>{tariff_name}</b> —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω."

    async def buy_tariff(self, user_id: int, tariff_name: str) -> str:
        """–ü–æ–∫—É–ø–∞–µ—Ç —Ç–∞—Ä–∏—Ñ, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∫—É–ø–ª–µ–Ω –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."""
        tariff = self.config.electricity_tariffs.get(tariff_name)
        if not tariff:
            return "–¢–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

        owned, _ = await self.get_user_tariffs_info(user_id)
        if tariff_name in owned:
            return "–≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ —É–∂–µ –∫—É–ø–ª–µ–Ω."

        price = tariff.unlock_price
        if price > 0:
            debit_success, _ = await self.user_service.debit_balance(
                user_id, price, reason=f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_name}"
            )
            if not debit_success:
                price_f = f"{price:,.0f}".replace(",", " ")
                return f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ <b>{tariff_name}</b> (–Ω—É–∂–Ω–æ {price_f} –º–æ–Ω–µ—Ç)."
        
        pipe = self.redis.pipeline()
        pipe.sadd(self.keys.owned_tariffs(user_id), tariff_name)
        pipe.hset(self.keys.user_profile(user_id), "current_tariff", tariff_name)
        if price > 0:
            pipe.hincrbyfloat(self.keys.user_game_stats(user_id), "spent_total", price)
        await pipe.execute()

        return f"üéâ –¢–∞—Ä–∏—Ñ <b>{tariff_name}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω –∏ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–º!"