# bot/services/image_guard_service.py
# –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 20.08.2025
# –í–µ—Ä—Å–∏—è: 2.0.0
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–µ—Ä–≤–∏—Å –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π
# –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, AI-–∞–Ω–∞–ª–∏–∑ (OCR) –∏ —Å–∏—Å—Ç–µ–º—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π.

import asyncio
import contextlib
import io
import re
from typing import Iterable, List, Optional, Tuple

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, PhotoSize, User
from loguru import logger
from PIL import Image, ImageOps
from redis.asyncio import Redis

from bot.config.settings import settings
from bot.services.ai_content_service import AIContentService
from bot.utils.dependencies import get_bot_instance, get_redis_client
from bot.utils.keys import KeyFactory
from bot.utils.models import ImageVerdict

# –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–≥. –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
_SPAM_RX = re.compile("|".join(settings.SECURITY.IMAGE_SPAM_PATTERNS), re.IGNORECASE)


def dhash(image: Image.Image) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç 64-–±–∏—Ç–Ω—ã–π –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ã–π dHash –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    img = ImageOps.exif_transpose(image.convert("L"))
    img = img.resize((9, 8), Image.Resampling.LANCZOS)
    pixels = list(img.getdata())
    hash_val = 0
    for row in range(8):
        for col in range(8):
            left = pixels[row * 9 + col]
            right = pixels[row * 9 + col + 1]
            hash_val = (hash_val << 1) | (1 if left > right else 0)
    return hash_val

def hamming_distance(hash1: int, hash2: int) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –•—ç–º–º–∏–Ω–≥–∞ –º–µ–∂–¥—É –¥–≤—É–º—è 64-–±–∏—Ç–Ω—ã–º–∏ —Ö—ç—à–∞–º–∏."""
    return (hash1 ^ hash2).bit_count()


class ImageGuardService:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ã—Ö —Ö—ç—à–µ–π,
    OCR —á–µ—Ä–µ–∑ AI –∏ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞.
    """

    def __init__(self, ai_service: AIContentService):
        self.redis: Redis = get_redis_client()
        self.bot: Bot = get_bot_instance()
        self.ai_service = ai_service
        self.config = settings.SECURITY
        self.keys = KeyFactory
        logger.info("–°–µ—Ä–≤–∏—Å ImageGuardService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def check_message_with_photo(self, message: Message) -> ImageVerdict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä–¥–∏–∫—Ç —Å —Ä–µ—à–µ–Ω–∏–µ–º –∏ –ø—Ä–∏—á–∏–Ω–æ–π.
        """
        if not message.from_user or not (message.photo or (message.document and message.document.mime_type and "image" in message.document.mime_type)):
            return ImageVerdict(action="allow")

        img_bytes = await self._download_photo(message)
        if not img_bytes:
            return ImageVerdict(action="allow", reason="download_failed")

        # –£—Ä–æ–≤–µ–Ω—å 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–∞–∑–µ —Ö—ç—à–µ–π –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ø–∞–º-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_hash = await asyncio.to_thread(dhash, Image.open(io.BytesIO(img_bytes)))
        is_known_spam, reason = await self._is_known_spam_hash(image_hash)
        if is_known_spam:
            return await self._escalate_punishment(message, reason)

        # –£—Ä–æ–≤–µ–Ω—å 2: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–¥–ø–∏—Å—å + OCR)
        full_text = (message.caption or "").strip()
        ocr_text = await self.ai_service.analyze_image("–ò–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏.", img_bytes)
        if isinstance(ocr_text, dict) and ocr_text.get("extracted_text"):
             full_text = f"{full_text}\n{ocr_text['extracted_text']}".strip()

        if self._text_looks_like_spam(full_text):
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à –≤ –±–∞–∑—É –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            await self.mark_hash_as_spam(image_hash)
            return await self._escalate_punishment(message, "suspicious_text_on_image")

        return ImageVerdict(action="allow")

    async def mark_photo_as_spam(self, message: Message) -> str:
        """–ê–¥–º–∏–Ω—Å–∫–∏–π –º–µ—Ç–æ–¥: –¥–æ–±–∞–≤–∏—Ç—å —Ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫."""
        img_bytes = await self._download_photo(message)
        if not img_bytes:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        
        image_hash = await asyncio.to_thread(dhash, Image.open(io.BytesIO(img_bytes)))
        if image_hash is None:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            
        await self.mark_hash_as_spam(image_hash)
        return "–•—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å–ø–∞–º–∞."
    
    async def mark_hash_as_spam(self, image_hash: Optional[int]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ö—ç—à –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–∞–∫–µ—Ç –≤ Redis."""
        if image_hash is None:
            return
        try:
            prefix = image_hash >> (64 - self.config.PHASH_PREFIX_BITS)
            bucket_key = self.keys.image_hash_bucket(prefix)
            pipe = self.redis.pipeline()
            pipe.sadd(bucket_key, str(image_hash))
            pipe.expire(bucket_key, self.config.PHASH_TTL_SECONDS)
            await pipe.execute()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ö—ç—à {image_hash} –≤ Redis: {e}")

    async def _is_known_spam_hash(self, image_hash: Optional[int]) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ö—ç—à –Ω–∞ –æ–¥–∏–Ω –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ø–∞–º-—Ö—ç—à–µ–π."""
        if image_hash is None:
            return False, "hash_calculation_failed"
        try:
            prefix = image_hash >> (64 - self.config.PHASH_PREFIX_BITS)
            bucket_key = self.keys.image_hash_bucket(prefix)
            
            candidate_hashes = await self.redis.smembers(bucket_key)
            if not candidate_hashes:
                return False, "no_matches"

            for ch_str in candidate_hashes:
                distance = hamming_distance(image_hash, int(ch_str))
                if distance <= self.config.PHASH_DISTANCE:
                    return True, f"similar_hash(dist={distance})"
            return False, "no_similar_hashes"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ö—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Redis: {e}")
            return False, "redis_error"

    def _text_looks_like_spam(self, text: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞ –≤ —Ç–µ–∫—Å—Ç–µ."""
        if not text:
            return False
        if _SPAM_RX.search(text):
            return True
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–ø–∞–º–∞
        money_marks = len(re.findall(r"[üí∞üíµü™ô\$‚Ç¨‚ÇΩ‚Çø‚ÇÆ]", text))
        links = len(re.findall(r"https?://|t\.me/", text, re.IGNORECASE))
        mentions = len(re.findall(r"@\w{4,}", text))
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤
        score = (money_marks * 2) + (links * 1.5) + mentions
        return score >= self.config.IMAGE_TEXT_SPAM_SCORE

    async def _escalate_punishment(self, message: Message, reason: str) -> ImageVerdict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ä—É –Ω–∞–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π."""
        if not message.from_user:
            return ImageVerdict("delete", reason)
            
        try:
            key = self.keys.user_spam_image_count(message.from_user.id)
            violations_count = await self.redis.incr(key)
            await self.redis.expire(key, self.config.WINDOW_SECONDS)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–ª—è user_id={message.from_user.id}: {e}")
            violations_count = 1

        if violations_count >= self.config.IMAGE_SPAM_AUTOBAN_THRESHOLD:
            return ImageVerdict("ban", f"{reason} (–Ω–∞—Ä—É—à–µ–Ω–∏–µ #{violations_count})")
        
        return ImageVerdict("delete", f"{reason} (–Ω–∞—Ä—É—à–µ–Ω–∏–µ #{violations_count})")

    async def _download_photo(self, message: Message) -> Optional[bytes]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã."""
        photo_size = None
        if message.photo:
            photo_size = max(message.photo, key=lambda p: p.file_size or 0)
        elif message.document:
            photo_size = message.document

        if not photo_size:
            return None

        try:
            buffer = io.BytesIO()
            await self.bot.download(photo_size, destination=buffer)
            return buffer.getvalue()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ file_id={photo_size.file_id}: {e}")
            return None