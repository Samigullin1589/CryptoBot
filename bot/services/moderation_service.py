# ===============================================================
# –§–∞–π–ª: bot/services/moderation_service.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π –¥–ª—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
# –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API Telegram, UserService –∏ AIService.
# –•—ç–Ω–¥–ª–µ—Ä—ã –≤—ã–∑—ã–≤–∞—é—Ç –º–µ—Ç–æ–¥—ã —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –ª–æ–≥–∏–∫—É —Å–∞–º–∏.
# ===============================================================
import logging
from datetime import timedelta, datetime
from typing import Optional, Tuple

from aiogram import Bot
from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest

from bot.services.user_service import UserService
from bot.services.ai_service import AIService
from bot.utils.helpers import sanitize_html

logger = logging.getLogger(__name__)

class ModerationService:
    """
    –°–µ—Ä–≤–∏—Å, –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—â–∏–π –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.
    """
    def __init__(self, bot: Bot, user_service: UserService, ai_service: AIService):
        self.bot = bot
        self.user_service = user_service
        self.ai_service = ai_service

    async def ban_user(
        self,
        admin_id: int,
        target_user_id: int,
        target_chat_id: int,
        reason: str,
        spam_message_text: Optional[str] = None
    ) -> Tuple[bool, str]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è.
        
        :return: (–£—Å–ø–µ—Ö, –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        """
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
        try:
            bot_member = await self.bot.get_chat_member(target_chat_id, self.bot.id)
            if not bot_member.status == ChatMemberStatus.ADMINISTRATOR or not bot_member.can_restrict_members:
                return False, f"‚ùå –Ø –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ <code>{target_chat_id}</code> –∏–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤–∞ –±–∞–Ω–∏—Ç—å."
            can_delete_messages = bot_member.can_delete_messages
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {target_chat_id}: {e}")
            return False, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ <code>{target_chat_id}</code>."

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        try:
            target_member = await self.bot.get_chat_member(target_chat_id, target_user_id)
            if target_member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
                return False, "üòÖ –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞."
        except TelegramBadRequest as e:
            if "user not found" not in e.message.lower():
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {target_user_id} –≤ —á–∞—Ç–µ {target_chat_id}: {e}")
                return False, f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–∏: {e.message}"
        
        # 3. –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: –±–∞–Ω
        try:
            await self.bot.ban_chat_member(
                chat_id=target_chat_id, 
                user_id=target_user_id, 
                revoke_messages=can_delete_messages
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}", exc_info=True)
            return False, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}"

        # 4. –ü–æ—Å—Ç-–¥–µ–π—Å—Ç–≤–∏—è: –æ–±—É—á–µ–Ω–∏–µ AI, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if spam_message_text:
            await self.ai_service.learn_from_spam(spam_message_text)
        
        await self.user_service.update_user_status(user_id=target_user_id, chat_id=target_chat_id, is_banned=True)
        logger.info(f"Admin {admin_id} banned {target_user_id} in chat {target_chat_id}. Reason: {reason}")

        # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await self._notify_parties_about_ban(
            target_chat_id, target_user_id, reason, can_delete_messages
        )

        return True, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_user_id}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ <code>{target_chat_id}</code>."

    async def _notify_parties_about_ban(
        self, target_chat_id: int, target_user_id: int, reason: str, can_delete: bool
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –∏ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–º—É
        try:
            chat_info = await self.bot.get_chat(target_chat_id)
            await self.bot.send_message(
                target_user_id,
                f"‚ùóÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —á–∞—Ç–µ ¬´<b>{sanitize_html(chat_info.title)}</b>¬ª.\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}"
            )
        except Exception:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ –±–∞–Ω–µ.")

        # –ü—É–±–ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        try:
            user_info = await self.bot.get_chat(target_user_id)
            target_link = f"<a href='tg://user?id={user_info.id}'>{sanitize_html(user_info.full_name or f'User {user_info.id}')}</a>"
        except Exception:
            target_link = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_user_id}</code>"
        
        deletion_info = "<i>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.</i>" if can_delete else "<i>–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.</i>"
        
        public_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_link} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}\n\n"
            f"{deletion_info}"
        )
        await self.bot.send_message(target_chat_id, public_text)

    async def mute_user(
        self, admin_id: int, target_user_id: int, chat_id: int, duration: timedelta, reason: str
    ) -> Tuple[bool, str]:
        """–ú—É—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ."""
        mute_end_timestamp = datetime.now() + duration
        try:
            await self.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=target_user_id,
                permissions=types.ChatPermissions(), # –ü—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∞ = –º—É—Ç
                until_date=mute_end_timestamp
            )
            
            # –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            admin_info = await self.bot.get_chat(admin_id)
            target_info = await self.bot.get_chat(target_user_id)
            admin_link = f"<a href='tg://user?id={admin_info.id}'>{sanitize_html(admin_info.full_name)}</a>"
            target_link = f"<a href='tg://user?id={target_info.id}'>{sanitize_html(target_info.full_name)}</a>"
            
            public_text = (
                f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_link} –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –ø—Ä–∞–≤–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_link} "
                f"–¥–æ {mute_end_timestamp.strftime('%Y-%m-%d %H:%M:%S')} UTC.\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {sanitize_html(reason)}"
            )
            await self.bot.send_message(chat_id, public_text)
            logger.info(f"Admin {admin_id} muted {target_user_id} in {chat_id} for {duration}. Reason: {reason}")
            
            return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–º—É—á–µ–Ω."
        except Exception as e:
            logger.error(f"Failed to mute {target_user_id} in {chat_id}: {e}", exc_info=True)
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}"
