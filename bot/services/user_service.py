# ===============================================================
# –§–∞–π–ª: bot/services/user_service.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π,
# —Ä–æ–ª—è–º–∏, –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
# ===============================================================

import json
import logging
import time
from typing import List, Dict, Optional

import redis.asyncio as redis
from aiogram import Bot

from bot.config.settings import AppSettings
from bot.utils.models import UserProfile, UserRole

logger = logging.getLogger(__name__)

class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    def __init__(self, redis_client: redis.Redis, settings: AppSettings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å.

        :param redis_client: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Redis.
        :param settings: –û–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        self.redis = redis_client
        self.settings = settings
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
        self.super_admins = set(self.settings.admin.super_admin_user_ids)
        self.admins = set(self.settings.admin.admin_user_ids)
        self.moderators = set(self.settings.admin.moderator_user_ids)
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    def _get_user_profile_key(self, user_id: int, chat_id: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis."""
        return f"user_profile:{chat_id}:{user_id}"

    async def get_user_role(self, user_id: int) -> UserRole:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ ID."""
        if user_id in self.super_admins:
            return UserRole.SUPER_ADMIN
        if user_id in self.admins:
            return UserRole.ADMIN
        if user_id in self.moderators:
            return UserRole.MODERATOR
        return UserRole.USER

    async def get_or_create_user(self, user_id: int, chat_id: int) -> UserProfile:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis. –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.
        """
        profile_key = self._get_user_profile_key(user_id, chat_id)
        saved_profile_data = await self.redis.get(profile_key)

        if saved_profile_data:
            profile = UserProfile.model_validate_json(saved_profile_data)
        else:
            profile = UserProfile(
                user_id=user_id,
                chat_id=chat_id,
                join_timestamp=time.time()
            )
            await self._save_user_profile(profile)

        # –†–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        profile.role = await self.get_user_role(user_id)
        return profile

    async def _save_user_profile(self, profile: UserProfile):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis."""
        profile_key = self._get_user_profile_key(profile.user_id, profile.chat_id)
        # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ 'role' –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        await self.redis.set(profile_key, profile.model_dump_json(exclude={'role'}))

    async def register_new_user(self, user_id: int, full_name: str, username: Optional[str]) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π.
        """
        is_new = await self.redis.sadd("system:known_users", user_id)
        if is_new:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
            user_info = {"full_name": full_name, "username": username or ""}
            await self.redis.set(f"user_info:{user_id}", json.dumps(user_info, ensure_ascii=False))
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ AdminService –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞
            # await self.admin_service.track_new_user() # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ AdminService
        return bool(is_new)

    async def process_referral(self, new_user_id: int, referrer_id: int, new_user_username: Optional[str], bot: Bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É."""
        if new_user_id == referrer_id:
            return

        is_already_referred = await self.redis.sismember("system:referred_users", new_user_id)
        if is_already_referred:
            logger.info(f"User {new_user_id} tried to use referral link from {referrer_id}, but is already referred.")
            return

        bonus = self.settings.game.referral_bonus_amount
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AdminService –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
        # await self.admin_service.track_referral_registration()
        # await self.admin_service.track_balance_change(bonus)

        async with self.redis.pipeline() as pipe:
            pipe.incrbyfloat(f"user_game_profile:{referrer_id}:balance", bonus)
            pipe.sadd("system:referred_users", new_user_id)
            pipe.sadd(f"user_game_profile:{referrer_id}:referrals", new_user_id)
            await pipe.execute()

        logger.info(f"User {new_user_id} joined via referral from {referrer_id}. Referrer received {bonus} coins.")

        try:
            await bot.send_message(
                referrer_id,
                f"ü§ù –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –¥—Ä—É–≥ @{new_user_username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{bonus} –º–æ–Ω–µ—Ç</b>!"
            )
        except Exception as e:
            logger.error(f"Failed to send referral notification to user {referrer_id}: {e}")

    async def log_violation(self, user_id: int, chat_id: int, reason: str, penalty: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏ —Å–Ω–∏–∂–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è."""
        profile = await self.get_or_create_user(user_id, chat_id)
        profile.trust_score = max(0, profile.trust_score - penalty)
        profile.violations_count += 1
        await self._save_user_profile(profile)
        logger.warning(f"VIOLATION: User {user_id} in chat {chat_id}. Reason: {reason}. New score: {profile.trust_score}.")

    async def update_user_activity(self, user_id: int, chat_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –Ω–µ–µ."""
        profile = await self.get_or_create_user(user_id, chat_id)
        profile.last_activity_timestamp = time.time()
        profile.message_count += 1

        reward_config = self.settings.activity_rewards
        if profile.message_count >= reward_config.reward_threshold:
            profile.trust_score += reward_config.reward_points
            profile.message_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            logger.info(f"User {user_id} rewarded for activity in chat {chat_id}. New trust score: {profile.trust_score}")
        
        await self._save_user_profile(profile)

    async def get_conversation_history(self, user_id: int, chat_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º."""
        profile = await self.get_or_create_user(user_id, chat_id)
        return profile.conversation_history

    async def add_to_conversation_history(self, user_id: int, chat_id: int, user_text: str, model_text: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞."""
        profile = await self.get_or_create_user(user_id, chat_id)
        
        history = profile.conversation_history
        history.append({"role": "user", "parts": [{"text": user_text}]})
        history.append({"role": "model", "parts": [{"text": model_text}]})
        
        max_len = self.settings.app.ai_history_limit * 2
        if len(history) > max_len:
            history = history[-max_len:]
            
        profile.conversation_history = history
        await self._save_user_profile(profile)
