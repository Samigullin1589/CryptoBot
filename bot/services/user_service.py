# ===============================================================
# –§–∞–π–ª: bot/services/user_service.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏,
# —Ä–æ–ª—è–º–∏, —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# ===============================================================

import time
import json
import logging
from typing import List, Dict, Optional

import redis.asyncio as redis
from aiogram import Bot
from aiogram.types import Message

from bot.config.settings import AppSettings
from bot.utils.models import UserProfile, UserRole

logger = logging.getLogger(__name__)

class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    def __init__(self, redis_client: redis.Redis, settings: AppSettings):
        self.redis = redis_client
        self.settings = settings
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–æ–ª–µ–π
        self.super_admins = set(self.settings.admin.super_admin_ids)
        self.admins = set(self.settings.admin.admin_ids)
        self.moderators = set(self.settings.admin.moderator_ids)

    def _get_user_profile_key(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis."""
        return f"user_profile:{user_id}"

    async def get_or_create_user(self, user_id: int, full_name: str = "", username: str = "") -> UserProfile:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.
        
        :param user_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        :param full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param username: –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: –≠–∫–∑–µ–º–ø–ª—è—Ä UserProfile.
        """
        profile_key = self._get_user_profile_key(user_id)
        saved_profile_data = await self.redis.get(profile_key)

        if saved_profile_data:
            try:
                profile = UserProfile.model_validate_json(saved_profile_data)
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
                profile.role = self._get_user_role(user_id)
                return profile
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å.")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        new_profile = UserProfile(
            user_id=user_id,
            full_name=full_name,
            username=username,
            join_timestamp=time.time(),
            role=self._get_user_role(user_id)
        )
        await self._save_user_profile(new_profile)
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        return new_profile

    def _get_user_role(self, user_id: int) -> UserRole:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ ID."""
        if user_id in self.super_admins:
            return UserRole.SUPER_ADMIN
        if user_id in self.admins:
            return UserRole.ADMIN
        if user_id in self.moderators:
            return UserRole.MODERATOR
        return UserRole.USER

    async def _save_user_profile(self, profile: UserProfile):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis."""
        profile_key = self._get_user_profile_key(profile.user_id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É
        await self.redis.set(profile_key, profile.model_dump_json())

    async def register_new_user(self, user_id: int):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ."""
        is_new = await self.redis.sadd("system:known_users", user_id)
        if is_new:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.redis.incr("stats:total_users")
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ sorted set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await self.redis.zadd("stats:user_join_dates", {str(user_id): int(time.time())})

    async def process_referral(self, message: Message, referrer_id: int, bot: Bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É."""
        new_user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
        is_already_referred = await self.redis.sismember("system:referred_users", new_user_id)
        if is_already_referred:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.")
            return

        bonus = self.settings.game.referral_bonus
        
        # –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        async with self.redis.pipeline() as pipe:
            pipe.incrbyfloat(f"user_profile:{referrer_id}:balance", bonus)
            pipe.incr(f"user_profile:{referrer_id}:referrals_count")
            pipe.sadd("system:referred_users", new_user_id)
            results = await pipe.execute()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}. –†–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–∏–ª {bonus} –º–æ–Ω–µ—Ç.")

        try:
            await bot.send_message(
                referrer_id,
                f"ü§ù –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –¥—Ä—É–≥ @{message.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{bonus} –º–æ–Ω–µ—Ç</b>!"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer_id}: {e}")

    async def log_violation(self, user_id: int, reason: str, penalty: int, details: Optional[dict] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –ø–æ–Ω–∏–∂–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è."""
        profile = await self.get_or_create_user(user_id)
        profile.trust_score = max(0, profile.trust_score - penalty)
        profile.violations_count += 1
        await self._save_user_profile(profile)
        logger.warning(f"–ù–ê–†–£–®–ï–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –ü—Ä–∏—á–∏–Ω–∞: {reason}. –ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {profile.trust_score}. –î–µ—Ç–∞–ª–∏: {details}")

    async def update_user_activity(self, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –∑–∞ –Ω–µ–µ."""
        profile = await self.get_or_create_user(user_id)
        profile.last_activity_timestamp = time.time()
        profile.message_count += 1

        reward_threshold = self.settings.user.activity_reward_threshold
        if profile.message_count >= reward_threshold:
            profile.trust_score += self.settings.user.activity_reward_points
            profile.message_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {profile.trust_score}")
        
        await self._save_user_profile(profile)
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ sorted set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—ã–±–æ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await self.redis.zadd("stats:user_activity_dates", {str(user_id): int(time.time())})

    async def get_conversation_history(self, user_id: int) -> List[Dict[str, any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å AI."""
        profile = await self.get_or_create_user(user_id)
        try:
            return json.loads(profile.conversation_history_json)
        except json.JSONDecodeError:
            return []

    async def add_to_conversation_history(self, user_id: int, user_text: str, model_text: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞."""
        history = await self.get_conversation_history(user_id)
        
        history.append({"role": "user", "parts": [{"text": user_text}]})
        history.append({"role": "model", "parts": [{"text": model_text}]})
        
        max_len = self.settings.ai_consultant.max_history_length * 2
        if len(history) > max_len:
            history = history[-max_len:]
            
        profile = await self.get_or_create_user(user_id)
        profile.conversation_history_json = json.dumps(history, ensure_ascii=False)
        await self._save_user_profile(profile)
