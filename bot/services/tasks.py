import logging
from bot.utils import dependencies
from bot.config.settings import settings

logger = logging.getLogger(__name__)

async def send_news_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    logger.info("Executing scheduled news job...")
    try:
        bot = dependencies.bot
        news_service = dependencies.news_service
        if not bot or not news_service:
            logger.warning("send_news_job skipped: dependencies not initialized.")
            return
        if not settings.news_chat_id:
            return
        news = await news_service.fetch_latest_news()
        if not news:
            return
        text = "üì∞ <b>–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ (–∞–≤—Ç–æ):</b>\n\n" + "\n".join(
            [f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news]
        )
        await bot.send_message(settings.news_chat_id, text, disable_web_page_preview=True)
        logger.info(f"News sent to chat {settings.news_chat_id}.")
    except Exception as e:
        logger.error("Error in send_news_job", exc_info=True)


async def update_asics_cache_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ ASIC."""
    logger.info("Executing scheduled ASIC cache update job...")
    try:
        asic_service = dependencies.asic_service
        if not asic_service:
            logger.warning("update_asics_cache_job skipped: asic_service not initialized.")
            return
        await asic_service.get_profitable_asics()
    except Exception as e:
        logger.error("Error in update_asics_cache_job", exc_info=True)


# --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
async def send_morning_summary_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ (–ö—É—Ä—Å—ã + –ò–Ω–¥–µ–∫—Å F&G)."""
    logger.info("--- Starting morning summary job ---")
    try:
        bot = dependencies.bot
        price_service = dependencies.price_service
        market_data_service = dependencies.market_data_service

        if not all([bot, price_service, market_data_service, settings.news_chat_id]):
            logger.warning("send_morning_summary_job skipped: dependencies or chat_id not available.")
            return

        logger.info("All dependencies found. Fetching data...")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∫–∞–∂–¥—É—é —Ü–µ–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ
        btc_coin = await price_service.get_crypto_price('BTC')
        eth_coin = await price_service.get_crypto_price('ETH')
        logger.info(f"Prices fetched: BTC {'OK' if btc_coin else 'Failed'}, ETH {'OK' if eth_coin else 'Failed'}")
        
        fng_index = await market_data_service.get_fear_and_greed_index()
        logger.info(f"F&G Index fetched: {'OK' if fng_index else 'Failed'}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        btc_price = f"{btc_coin.price:,.2f}" if btc_coin else "N/A"
        eth_price = f"{eth_coin.price:,.2f}" if eth_coin else "N/A"
        fng_value = fng_index.get('value', 'N/A') if fng_index else 'N/A'
        fng_text = fng_index.get('value_classification', 'N/A') if fng_index else 'N/A'

        text = (
            "‚òïÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –∫—Ä–∏–ø—Ç–æ-—Å–≤–æ–¥–∫–∞:</b>\n\n"
            f"<b>Bitcoin (BTC):</b> ${btc_price}\n"
            f"<b>Ethereum (ETH):</b> ${eth_price}\n\n"
            f"<b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏:</b> {fng_value} ({fng_text})"
        )

        await bot.send_message(settings.news_chat_id, text)
        logger.info(f"--- Morning summary sent successfully to chat {settings.news_chat_id} ---")
    except Exception as e:
        logger.error("--- CRITICAL ERROR in send_morning_summary_job ---", exc_info=True)


async def send_leaderboard_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ –º–∞–π–Ω–∏–Ω–≥—É."""
    logger.info("Executing weekly leaderboard job...")
    try:
        bot = dependencies.bot
        admin_service = dependencies.admin_service
        if not all([bot, admin_service, settings.news_chat_id]):
            logger.warning("send_leaderboard_job skipped: dependencies or chat_id not available.")
            return

        top_users = await admin_service.get_top_users_by_balance(limit=5)
        
        if not top_users:
            text = "üèÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!"
        else:
            leaderboard_lines = []
            medals = ["ü•á", "ü•à", "ü•â", "4.", "5."]
            for i, user_data in enumerate(top_users):
                username = f"@{user_data['username']}" if user_data.get('username') else f"User ID {user_data['user_id']}"
                balance = user_data['balance']
                leaderboard_lines.append(f"{medals[i]} {username} - <b>{balance:.2f} –º–æ–Ω–µ—Ç</b>")
            
            leaderboard_text = "\n".join(leaderboard_lines)
            text = (
                "üèÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n"
                "–í–æ—Ç –Ω–∞—à–∏ –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n\n"
                f"{leaderboard_text}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ù–æ–≤—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ ‚Äî –≤ —Å–ª–µ–¥—É—é—â—É—é –ø—è—Ç–Ω–∏—Ü—É."
            )
        await bot.send_message(settings.news_chat_id, text)
        logger.info(f"Leaderboard sent to chat {settings.news_chat_id}.")
    except Exception as e:
        logger.error("Error in send_leaderboard_job", exc_info=True)


async def health_check_job():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    logger.info("--- SCHEDULER HEALTH CHECK: Job is running! ---")
    try:
        bot = dependencies.bot
        if bot and settings.admin_chat_id:
            await bot.send_message(settings.admin_chat_id, "Scheduler health check: OK. –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
            logger.info(f"Health check message sent to admin {settings.admin_chat_id}.")
        else:
            logger.warning("Health check: Bot or admin_chat_id not available to send message.")
    except Exception as e:
        logger.error("--- CRITICAL ERROR in health_check_job ---", exc_info=True)