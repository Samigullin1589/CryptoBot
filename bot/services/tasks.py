import logging
import aiohttp
import redis.asyncio as redis
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties

from bot.config.settings import settings
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á
from bot.services.news_service import NewsService
from bot.services.asic_service import AsicService
from bot.services.price_service import PriceService
from bot.services.market_data_service import MarketDataService
from bot.services.admin_service import AdminService
from bot.services.coin_list_service import CoinListService

logger = logging.getLogger(__name__)

# --- "–ê–õ–¨–§–ê" –ü–ê–¢–¢–ï–†–ù: –°–û–ó–î–ê–ù–ò–ï –ò –ó–ê–ö–†–´–¢–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –í–ù–£–¢–†–ò –ó–ê–î–ê–ß–ò ---

async def with_task_dependencies(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏,
    –≤—ã–ø–æ–ª–Ω—è–µ—Ç –µ–µ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    """
    async def wrapper():
        session = aiohttp.ClientSession()
        redis_client = redis.from_url(settings.redis_url, decode_responses=False)
        bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode='HTML'))
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
            coin_list_service = CoinListService()
            news_service = NewsService()
            market_data_service = MarketDataService()
            asic_service = AsicService(redis_client=redis_client)
            price_service = PriceService(
                coin_list_service=coin_list_service, 
                redis_client=redis_client, 
                http_session=session
            )
            admin_service = AdminService(redis_client=redis_client)
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Å–∞–º—É —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–¥–∞—á–∏
            await func(
                bot=bot,
                news_service=news_service,
                asic_service=asic_service,
                price_service=price_service,
                market_data_service=market_data_service,
                admin_service=admin_service
            )
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await session.close()
            await redis_client.close()
            await bot.session.close()
    return wrapper


@with_task_dependencies
async def send_news_job(bot, news_service, **kwargs):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    logger.info("Executing scheduled news job...")
    if not settings.news_chat_id: return
    news = await news_service.fetch_latest_news()
    if not news: return
    text = "üì∞ <b>–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ (–∞–≤—Ç–æ):</b>\n\n" + "\n".join(
        [f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news]
    )
    await bot.send_message(settings.news_chat_id, text, disable_web_page_preview=True)
    logger.info(f"News sent to chat {settings.news_chat_id}.")


@with_task_dependencies
async def update_asics_cache_job(asic_service, **kwargs):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ASIC –≤ Redis."""
    logger.info("Executing scheduled ASIC DB update job...")
    await asic_service.update_asics_db()


@with_task_dependencies
async def send_morning_summary_job(bot, price_service, market_data_service, **kwargs):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏."""
    logger.info("--- Starting morning summary job ---")
    if not settings.news_chat_id: return

    btc_coin = await price_service.get_crypto_price('BTC')
    eth_coin = await price_service.get_crypto_price('ETH')
    fng_index = await market_data_service.get_fear_and_greed_index()

    btc_price = f"{btc_coin.price:,.2f}" if btc_coin else "N/A"
    eth_price = f"{eth_coin.price:,.2f}" if eth_coin else "N/A"
    fng_value = fng_index.get('value', 'N/A') if fng_index else 'N/A'
    fng_text = fng_index.get('value_classification', 'N/A') if fng_index else 'N/A'

    text = (
        "‚òïÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –∫—Ä–∏–ø—Ç–æ-—Å–≤–æ–¥–∫–∞:</b>\n\n"
        f"<b>Bitcoin (BTC):</b> ${btc_price}\n"
        f"<b>Ethereum (ETH):</b> ${eth_price}\n\n"
        f"<b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏:</b> {fng_value} ({fng_text})"
    )
    await bot.send_message(settings.news_chat_id, text)
    logger.info(f"--- Morning summary sent successfully to chat {settings.news_chat_id} ---")


@with_task_dependencies
async def send_leaderboard_job(bot, admin_service, **kwargs):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ –º–∞–π–Ω–∏–Ω–≥—É."""
    logger.info("Executing weekly leaderboard job...")
    if not settings.news_chat_id: return
    
    top_users = await admin_service.get_top_users_by_balance(limit=5)
    
    if not top_users:
        text = "üèÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤."
    else:
        leaderboard_lines = [f"{'ü•áü•àü•â'[i]} {f\"@{d['username']}\" if d.get('username') else f\"User ID {d['user_id']}\"} - <b>{d['balance']:.2f} –º–æ–Ω–µ—Ç</b>" for i, d in enumerate(top_users)]
        leaderboard_text = "\n".join(leaderboard_lines)
        text = f"üèÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n{leaderboard_text}"
        
    await bot.send_message(settings.news_chat_id, text)
    logger.info(f"Leaderboard sent to chat {settings.news_chat_id}.")


@with_task_dependencies
async def health_check_job(bot, **kwargs):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    logger.info("--- SCHEDULER HEALTH CHECK: Job is running! ---")
    if settings.admin_chat_id:
        await bot.send_message(settings.admin_chat_id, "Scheduler health check: OK.")
        logger.info(f"Health check message sent to admin {settings.admin_chat_id}.")
