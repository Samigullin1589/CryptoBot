import logging
import aiohttp
import redis.asyncio as redis
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties

from bot.config.settings import settings
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á
from bot.services.news_service import NewsService
from bot.services.asic_service import AsicService
from bot.services.price_service import PriceService
from bot.services.market_data_service import MarketDataService
from bot.services.admin_service import AdminService
from bot.services.coin_list_service import CoinListService

logger = logging.getLogger(__name__)

# --- "–ê–õ–¨–§–ê" –ü–ê–¢–¢–ï–†–ù: –ö–ê–ñ–î–ê–Ø –ó–ê–î–ê–ß–ê –ü–û–õ–ù–û–°–¢–¨–Æ –°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–ê ---

async def send_news_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –°–∞–º–∞ —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    logger.info("Executing scheduled news job...")
    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode='HTML'))
    session = aiohttp.ClientSession()
    try:
        if not settings.news_chat_id: return
        
        # NewsService –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å http_session –¥–ª—è —Ä–∞–±–æ—Ç—ã
        news_service = NewsService(http_session=session)
        news = await news_service.fetch_latest_news()
        if not news: return
        
        text = "üì∞ <b>–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ (–∞–≤—Ç–æ):</b>\n\n" + "\n".join(
            [f"üîπ <a href=\"{n['link']}\">{n['title']}</a>" for n in news]
        )
        await bot.send_message(settings.news_chat_id, text, disable_web_page_preview=True)
        logger.info(f"News sent to chat {settings.news_chat_id}.")
    except Exception as e:
        logger.error(f"Error in send_news_job: {e}", exc_info=True)
    finally:
        await session.close()
        await bot.session.close()


async def update_asics_cache_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ASIC –≤ Redis."""
    logger.info("Executing scheduled ASIC DB update job...")
    redis_client = redis.from_url(settings.redis_url, decode_responses=False)
    session = aiohttp.ClientSession()
    try:
        # AsicService –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å http_session –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        asic_service = AsicService(redis_client=redis_client, http_session=session)
        await asic_service.update_asics_db()
    except Exception as e:
        logger.error(f"Error in update_asics_cache_job: {e}", exc_info=True)
    finally:
        await session.close()
        await redis_client.close()


async def send_morning_summary_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏."""
    logger.info("--- Starting morning summary job ---")
    if not settings.news_chat_id: return
    
    session = aiohttp.ClientSession()
    redis_client = redis.from_url(settings.redis_url, decode_responses=False)
    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode='HTML'))
    try:
        coin_list_service = CoinListService(http_session=session)
        price_service = PriceService(coin_list_service, redis_client, session)
        market_data_service = MarketDataService(http_session=session)

        btc_coin = await price_service.get_crypto_price('BTC')
        eth_coin = await price_service.get_crypto_price('ETH')
        fng_index = await market_data_service.get_fear_and_greed_index()

        btc_price = f"{btc_coin.price:,.2f}" if btc_coin else "N/A"
        eth_price = f"{eth_coin.price:,.2f}" if eth_coin else "N/A"
        fng_value = fng_index.get('value', 'N/A') if fng_index else 'N/A'
        fng_text = fng_index.get('value_classification', 'N/A') if fng_index else 'N/A'

        text = (
            "‚òïÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –∫—Ä–∏–ø—Ç–æ-—Å–≤–æ–¥–∫–∞:</b>\n\n"
            f"<b>Bitcoin (BTC):</b> ${btc_price}\n"
            f"<b>Ethereum (ETH):</b> ${eth_price}\n\n"
            f"<b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏:</b> {fng_value} ({fng_text})"
        )
        await bot.send_message(settings.news_chat_id, text)
        logger.info(f"--- Morning summary sent successfully to chat {settings.news_chat_id} ---")
    except Exception as e:
        logger.error(f"--- CRITICAL ERROR in send_morning_summary_job: {e} ---", exc_info=True)
    finally:
        await session.close()
        await redis_client.close()
        await bot.session.close()


async def send_leaderboard_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ –º–∞–π–Ω–∏–Ω–≥—É."""
    logger.info("Executing weekly leaderboard job...")
    if not settings.news_chat_id: return
    
    redis_client = redis.from_url(settings.redis_url, decode_responses=False)
    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode='HTML'))
    try:
        admin_service = AdminService(redis_client=redis_client)
        top_users = await admin_service.get_top_users_by_balance(limit=5)
        
        if not top_users:
            text = "üèÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!"
        else:
            leaderboard_lines = []
            medals = ["ü•á", "ü•à", "ü•â", "4.", "5."]
            for i, user_data in enumerate(top_users):
                username = f"@{user_data['username']}" if user_data.get('username') else f"User ID {user_data['user_id']}"
                balance = user_data['balance']
                leaderboard_lines.append(f"{medals[i]} {username} - <b>{balance:.2f} –º–æ–Ω–µ—Ç</b>")
            
            leaderboard_text = "\n".join(leaderboard_lines)
            text = (
                "üèÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∞–π–Ω–µ—Ä–æ–≤</b>\n\n"
                "–í–æ—Ç –Ω–∞—à–∏ –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n\n"
                f"{leaderboard_text}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ù–æ–≤—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ ‚Äî –≤ —Å–ª–µ–¥—É—é—â—É—é –ø—è—Ç–Ω–∏—Ü—É."
            )
        await bot.send_message(settings.news_chat_id, text)
        logger.info(f"Leaderboard sent to chat {settings.news_chat_id}.")
    except Exception as e:
        logger.error(f"Error in send_leaderboard_job: {e}", exc_info=True)
    finally:
        await redis_client.close()
        await bot.session.close()


async def health_check_job():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    logger.info("--- SCHEDULER HEALTH CHECK: Job is running! ---")
    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode='HTML'))
    try:
        if settings.admin_chat_id:
            await bot.send_message(settings.admin_chat_id, "Scheduler health check: OK.")
            logger.info(f"Health check message sent to admin {settings.admin_chat_id}.")
    except Exception as e:
        logger.error(f"--- CRITICAL ERROR in health_check_job: {e} ---", exc_info=True)
    finally:
        await bot.session.close()
