import logging
import time
from bot.utils import dependencies
from bot.config.settings import settings

logger = logging.getLogger(__name__)

async def end_mining_session(user_id: int):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—é, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    (–∑–∞ –≤—ã—á–µ—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞) –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –µ–≥–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    bot = dependencies.bot
    redis_client = dependencies.redis_client
    
    logger.info(f"Ending mining session for user {user_id}")

    session_data = await redis_client.hgetall(f"mining:session:{user_id}")
    if not session_data:
        logger.warning(f"No active mining session found for user {user_id} to end.")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ---

    # –¢–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é
    user_tariff_name = await redis_client.get(f"user:{user_id}:tariff") or settings.DEFAULT_ELECTRICITY_TARIFF
    tariff_details = settings.ELECTRICITY_TARIFFS.get(user_tariff_name, {"cost_per_hour": 0.05})
    electricity_cost_per_second = tariff_details["cost_per_hour"] / 3600
    
    # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    profitability_per_day = float(session_data.get("asic_profitability_per_day", 0))
    profit_per_second = profitability_per_day / (24 * 3600)

    # --- –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã ---
    start_time = int(session_data.get("start_time", int(time.time())))
    session_duration_real = int(time.time()) - start_time
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã –Ω–µ –Ω–∞—Å—á–∏—Ç–∞–µ–º –±–æ–ª—å—à–µ, —á–µ–º –∑–∞ –ø–æ–ª–æ–∂–µ–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
    actual_duration_seconds = min(session_duration_real, settings.MINING_DURATION_SECONDS)

    # --- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å ---
    gross_earned = actual_duration_seconds * profit_per_second
    total_electricity_cost = actual_duration_seconds * electricity_cost_per_second
    net_earned = max(0, gross_earned - total_electricity_cost)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    async with redis_client.pipeline() as pipe:
        pipe.delete(f"mining:session:{user_id}")
        pipe.incrbyfloat(f"user:{user_id}:balance", net_earned)
        pipe.incrbyfloat(f"user:{user_id}:total_earned", net_earned)
        await pipe.execute()

    logger.info(f"User {user_id} finished session. Gross: {gross_earned:.4f}, Cost: {total_electricity_cost:.4f}, Net: {net_earned:.4f}.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –ú–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—è –Ω–∞ <b>{session_data.get('asic_name')}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìà –ì—Ä—è–∑–Ω—ã–π –¥–æ—Ö–æ–¥: <b>{gross_earned:.4f} –º–æ–Ω–µ—Ç</b>\n"
            f"‚ö°Ô∏è –†–∞—Å—Ö–æ–¥ –Ω–∞ —ç–ª-–≤–æ ({user_tariff_name}): <b>{total_electricity_cost:.4f} –º–æ–Ω–µ—Ç</b>\n\n"
            f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å: <b>{net_earned:.4f} –º–æ–Ω–µ—Ç</b>."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user_id}: {e}")