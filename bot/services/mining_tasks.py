import logging
import time
from bot.utils import dependencies
from bot.config.settings import settings

logger = logging.getLogger(__name__)

async def end_mining_session(user_id: int):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—é, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (–∑–∞ –≤—ã—á–µ—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞) 
    –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –µ–≥–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    bot = dependencies.bot
    redis_client = dependencies.redis_client
    
    logger.info(f"Ending mining session for user {user_id}")

    session_data = await redis_client.hgetall(f"mining:session:{user_id}")
    if not session_data:
        logger.warning(f"No active mining session found for user {user_id} to end.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tariff_name = await redis_client.get(f"user:{user_id}:tariff")
    if not user_tariff_name:
        user_tariff_name = settings.DEFAULT_ELECTRICITY_TARIFF
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –≤ —á–∞—Å
    electricity_cost_per_hour = settings.ELECTRICITY_TARIFFS.get(user_tariff_name, 0.05)
    
    # –†–∞—Å—á–µ—Ç "–≥—Ä—è–∑–Ω–æ–≥–æ" –¥–æ—Ö–æ–¥–∞
    profitability_per_day = float(session_data.get("asic_profitability_per_day", 0))
    profit_per_hour = profitability_per_day / 24
    session_duration_hours = settings.MINING_DURATION_SECONDS / 3600
    gross_earned = session_duration_hours * profit_per_hour
    
    # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
    total_electricity_cost = session_duration_hours * electricity_cost_per_hour
    
    # –†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
    net_earned = gross_earned - total_electricity_cost

    # –ù–µ –¥–∞–µ–º –±–∞–ª–∞–Ω—Å—É —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å, –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –¥–æ—Ä–æ–∂–µ –¥–æ—Ö–æ–¥–∞
    net_earned = max(0, net_earned)

    async with redis_client.pipeline() as pipe:
        pipe.delete(f"mining:session:{user_id}")
        pipe.incrbyfloat(f"user:{user_id}:balance", net_earned)
        pipe.incrbyfloat(f"user:{user_id}:total_earned", net_earned)
        await pipe.execute()

    logger.info(f"User {user_id} finished session. Gross: {gross_earned:.4f}, Cost: {total_electricity_cost:.4f}, Net: {net_earned:.4f}.")

    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –ú–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—è –Ω–∞ <b>{session_data.get('asic_name')}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìà –ì—Ä—è–∑–Ω—ã–π –¥–æ—Ö–æ–¥: <b>{gross_earned:.4f} –º–æ–Ω–µ—Ç</b>\n"
            f"‚ö°Ô∏è –†–∞—Å—Ö–æ–¥ –Ω–∞ —ç–ª-–≤–æ: <b>{total_electricity_cost:.4f} –º–æ–Ω–µ—Ç</b>\n"
            f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å: <b>{net_earned:.4f} –º–æ–Ω–µ—Ç</b>."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user_id}: {e}")