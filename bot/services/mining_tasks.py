import logging
import time
from bot.utils import dependencies
from bot.config.settings import settings

logger = logging.getLogger(__name__)

async def end_mining_session(user_id: int):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—é, –Ω–∞—á–∏—Å–ª—è–µ—Ç –¥–æ—Ö–æ–¥ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    bot = dependencies.bot
    redis_client = dependencies.redis_client
    
    logger.info(f"Ending mining session for user {user_id}")

    session_data = await redis_client.hgetall(f"mining:session:{user_id}")
    if not session_data:
        logger.warning(f"No active mining session found for user {user_id} to end.")
        return

    # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –∑–∞ —Å–µ—Å—Å–∏—é
    profitability_per_day = float(session_data.get("asic_profitability_per_day", 0))
    profit_per_second = profitability_per_day / (24 * 3600)
    session_duration = int(time.time()) - int(session_data.get("start_time", int(time.time())))
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ–µ–≤
    actual_duration = min(session_duration, settings.MINING_DURATION_SECONDS)
    earned_amount = actual_duration * profit_per_second

    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –Ω–∞ –±–∞–ª–∞–Ω—Å
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    async with redis_client.pipeline() as pipe:
        pipe.delete(f"mining:session:{user_id}")
        pipe.incrbyfloat(f"user:{user_id}:balance", earned_amount)
        await pipe.execute()

    logger.info(f"User {user_id} finished session and earned {earned_amount:.4f} coins.")

    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –ú–∞–π–Ω–∏–Ω–≥-—Å–µ—Å—Å–∏—è –Ω–∞ <b>{session_data.get('asic_name')}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{earned_amount:.4f} –º–æ–Ω–µ—Ç</b>.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user_id}: {e}")