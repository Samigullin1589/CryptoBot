import asyncio
import logging
from typing import Optional

import aiohttp
from async_lru import alru_cache

from bot.config.settings import settings
from bot.utils.helpers import make_request

logger = logging.getLogger(__name__)

# --- –ù–û–í–´–ô –†–ï–ó–ï–†–í–ù–´–ô URL ---
BLOCKCHAIN_INFO_BLOCK_COUNT_URL = "https://blockchain.info/q/getblockcount"

class MarketDataService:
    @alru_cache(maxsize=1, ttl=14400)
    async def get_fear_and_greed_index(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        logger.info("Fetching Fear & Greed Index...")
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å CoinMarketCap, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
            if settings.cmc_api_key:
                headers = {'X-CMC_PRO_API_KEY': settings.cmc_api_key}
                data = await make_request(session, settings.cmc_fear_and_greed_url, headers=headers)
                if data and 'data' in data and data['data']:
                    fng_data = data['data'][0] # CMC returns a list
                    logger.info("Fetched F&G index from CoinMarketCap")
                    return {
                        'value': fng_data['score'],
                        'value_classification': fng_data['rating']
                    }
                logger.warning("Failed to fetch from CMC, falling back to Alternative.me")
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            data = await make_request(session, settings.fear_and_greed_api_url)
            if data and 'data' in data and data['data']:
                logger.info("Fetched F&G index from Alternative.me")
                return data['data'][0]
        
        logger.error("Failed to fetch F&G index from all sources.")
        return None

    @alru_cache(maxsize=1, ttl=43200)
    async def get_usd_rub_rate(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å USD/RUB –æ—Ç –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–§."""
        logger.info("Fetching USD/RUB exchange rate.")
        async with aiohttp.ClientSession() as session:
            data = await make_request(session, settings.cbr_daily_json_url)
            if data and "Valute" in data and "USD" in data["Valute"]:
                rate = data["Valute"]["USD"]["Value"]
                logger.info(f"Current USD/RUB rate: {rate}")
                return float(rate)
        logger.warning("Could not fetch USD/RUB rate. Using fallback rate 90.0.")
        return 90.0

    async def get_halving_info(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–ª–≤–∏–Ω–≥–µ Bitcoin —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
        """
        logger.info("Fetching Bitcoin halving info...")
        current_block = None
        
        async with aiohttp.ClientSession() as session:
            # 1. –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: mempool.space
            logger.info("Trying primary source for block height: mempool.space")
            height_str = await make_request(session, settings.btc_halving_url, response_type='text', timeout=5)
            if height_str and height_str.isdigit():
                current_block = int(height_str)
                logger.info(f"Fetched block height from mempool.space: {current_block}")
            else:
                logger.warning("Primary source failed. Trying fallback source: blockchain.info")
                # 2. –†–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: blockchain.info
                height_str_fallback = await make_request(session, BLOCKCHAIN_INFO_BLOCK_COUNT_URL, response_type='text', timeout=10)
                if height_str_fallback and height_str_fallback.isdigit():
                    current_block = int(height_str_fallback)
                    logger.info(f"Fetched block height from blockchain.info: {current_block}")

        if current_block is None:
            logger.error("Failed to fetch block height from all sources.")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ. –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        
        halving_interval = 210000
        blocks_left = halving_interval - (current_block % halving_interval)
        days_left = blocks_left / 144
        
        return (f"‚è≥ <b>–î–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\n"
                f"üß± <b>–ë–ª–æ–∫–æ–≤:</b> <code>{blocks_left:,}</code>\n"
                f"üóì <b>–ü—Ä–∏–º–µ—Ä–Ω–æ –¥–Ω–µ–π:</b> <code>{days_left:.1f}</code>")

    async def get_btc_network_status(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin (–∫–æ–º–∏—Å—Å–∏–∏ –∏ –º–µ–º–ø—É–ª) —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        """
        logger.info("Fetching Bitcoin network status...")
        try:
            async with aiohttp.ClientSession() as session:
                tasks = [
                    make_request(session, settings.btc_fees_url, timeout=10),
                    make_request(session, settings.btc_mempool_url, timeout=10)
                ]
                results = await asyncio.gather(*tasks)
                fees_data, mempool_data = results

            if not fees_data or not mempool_data:
                logger.error("Failed to fetch BTC network status, one of the sources returned empty data.")
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ BTC. –í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
            
            return (f"üì° <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin:</b>\n\n"
                    f"üìà <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –º–µ–º–ø—É–ª–µ:</b> <code>{mempool_data.get('count', 'N/A'):,}</code>\n\n"
                    f"üí∏ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (sat/vB):</b>\n"
                    f" ¬†- üöÄ –í—ã—Å–æ–∫–∏–π: <code>{fees_data.get('fastestFee', 'N/A')}</code>\n"
                    f" ¬†- üö∂‚Äç‚ôÇÔ∏è –°—Ä–µ–¥–Ω–∏–π: <code>{fees_data.get('halfHourFee', 'N/A')}</code>\n"
                    f" ¬†- üê¢ –ù–∏–∑–∫–∏–π: <code>{fees_data.get('hourFee', 'N/A')}</code>")
        
        except asyncio.TimeoutError:
            logger.error("TimeoutError while fetching BTC network status from mempool.space.")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ BTC. –í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å (mempool.space) –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç."
        except Exception as e:
            logger.error(f"An unexpected error occurred while fetching BTC network status: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ BTC."
