# ===============================================================
# –§–∞–π–ª: bot/services/admin_service.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–≥—Ä–æ–≤–æ–π
#              —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
# ===============================================================
import logging
from datetime import datetime
from typing import Dict, Any, Tuple, List, Optional

import redis.asyncio as redis
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup

from bot.config.settings import Settings
from bot.utils.models import UserRole
from bot.keyboards.admin_keyboards import (
    get_admin_menu_keyboard, get_stats_menu_keyboard,
    get_system_actions_keyboard, get_back_to_admin_menu_keyboard
)
from bot.utils.keys import KeyFactory

logger = logging.getLogger(__name__)

class AdminService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.
    """
    def __init__(self, redis: redis.Redis, settings: Settings, bot: Bot):
        self.redis = redis
        self.settings = settings
        self.bot = bot
        self.admin_ids: List[int] = settings.admin_ids
        self.keys = KeyFactory

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    async def track_action(self, user_id: int, action_name: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
        await self.redis.zincrby("stats:actions", 1, action_name)

    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    async def notify_admins(self, message: str, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
        for admin_id in self.admin_ids:
            try:
                await self.bot.send_message(admin_id, message, **kwargs)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    async def get_stats_page_content(self, stats_type: str) -> Tuple[str, InlineKeyboardMarkup]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞.
        """
        if stats_type == "general":
            stats = await self.get_global_stats()
            text = (
                "<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['users_total']}</b>\n"
                f"‚òÄÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: <b>{stats['users_active_day']}</b>\n"
                f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{stats['users_active_week']}</b>"
            )
        elif stats_type == "mining":
            stats = await self.get_game_stats()
            text = (
                "<b>üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"üïπ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: <b>{stats.get('active_sessions', 0)}</b>\n"
                f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤: <b>{stats.get('total_balance', 0.0):,.2f} –º–æ–Ω–µ—Ç</b>\n"
                f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∞: <b>{stats.get('pending_withdrawals', 0)}</b>"
            )
        elif stats_type == "commands":
            top_actions = await self.get_action_stats()
            header = "<b>üìà –¢–æ–ø-10 –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            if not top_actions:
                text = header + "<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö.</i>"
            else:
                actions_list = [f"<code>{action}</code> - {count} —Ä–∞–∑" for action, count in top_actions]
                text = header + "\n".join(actions_list)
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
            logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_type}")
            return "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", get_stats_menu_keyboard()
        
        return text, get_back_to_admin_menu_keyboard()

    # --- –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
    async def get_global_stats(self) -> dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        users_total = await self.redis.scard(self.keys.all_users_set())
        now = datetime.utcnow()
        today_str = now.strftime('%Y-%m-%d')
        week_str = now.strftime('%Y-%U')
        day_key = f"users:active:day:{today_str}"
        week_key = f"users:active:week:{week_str}"
        users_active_day = await self.redis.scard(day_key)
        users_active_week = await self.redis.scard(week_key)
        return {
            "users_total": users_total,
            "users_active_day": users_active_day,
            "users_active_week": users_active_week,
        }

    async def get_game_stats(self) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –º–æ–¥—É–ª—é."""
        stats_key = self.keys.game_stats()
        game_stats = await self.redis.hgetall(stats_key)
        
        # –°—É–º–º–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        total_balance = await self.redis.zscore(self.keys.game_leaderboard(), "global_sum") or 0.0
        
        return {
            "active_sessions": int(game_stats.get("active_sessions", 0)),
            "pending_withdrawals": int(game_stats.get("pending_withdrawals", 0)),
            "total_balance": float(total_balance)
        }

    async def get_action_stats(self, top_n: int = 10) -> List[Tuple[str, int]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-N —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        actions_raw = await self.redis.zrevrange("stats:actions", 0, top_n - 1, withscores=True)
        return [(action, int(score)) for action, score in actions_raw]

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
    async def get_main_menu_content(self, user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏, —Ç.–∫. —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
        user_role = UserRole.SUPER_ADMIN if user_id in self.settings.admin_ids else UserRole.ADMIN
        text = "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        keyboard = get_admin_menu_keyboard(user_role)
        return text, keyboard
        
    # --- –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ---
    async def change_user_game_balance(self, user_id: int, amount: float) -> Optional[float]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        profile_key = self.keys.user_game_profile(user_id)
        if not await self.redis.exists(profile_key):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: user_id={user_id}")
            return None

        # –ê—Ç–æ–º–∞—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        new_balance = await self.redis.hincrbyfloat(profile_key, "balance", amount)
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
        await self.redis.zadd(self.keys.game_leaderboard(), {str(user_id): new_balance})
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –±–∞–ª–∞–Ω—Å user_id={user_id} –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        return new_balance

    # --- –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    async def clear_asic_cache(self) -> int:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à ASIC-–º–∞–π–Ω–µ—Ä–æ–≤."""
        # –ò—â–µ–º –≤—Å–µ –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞—Å–∏–∫–∞–º–∏
        cursor = '0'
        deleted_count = 0
        while cursor != 0:
            cursor, keys = await self.redis.scan(cursor, match=f"{self.keys.asic_hash('*')}", count=1000)
            if keys:
                deleted_count += await self.redis.delete(*keys)
        
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ç –∏ –∫–ª—é—á –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        deleted_count += await self.redis.delete(self.keys.asics_sorted_set(), self.keys.asics_last_update())
        
        logger.info(f"ASIC cache cleared. Deleted {deleted_count} keys.")
        return deleted_count