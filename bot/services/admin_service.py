# ===============================================================
# –§–∞–π–ª: bot/services/admin_service.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, —Å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
# —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π KeyFactory.
# ===============================================================
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Tuple, List

import redis.asyncio as redis
from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
from aiogram.types import InlineKeyboardMarkup

from bot.config.settings import AdminConfig
from bot.utils.keys import KeyFactory
from bot.utils.models import UserRole
from bot.keyboards.admin_keyboards import (
    get_admin_menu_keyboard, get_stats_menu_keyboard,
    get_system_actions_keyboard, get_back_to_admin_menu_keyboard
)

logger = logging.getLogger(__name__)

class AdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."""
    def __init__(self, bot: Bot, redis_client: redis.Redis, settings: AdminConfig):
        self.bot = bot
        self.redis = redis_client
        self.settings = settings
        self.keys = KeyFactory

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑–≤–Ω–µ) ---
    async def log_user_action(self, user_id: int, full_name: str, action: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞, –∫–Ω–æ–ø–∫–∞)."""
        await self.redis.zincrby(self.keys.stats_actions_zset(), 1, action)
        logger.debug(f"User {full_name} ({user_id}) performed action: {action}")

    async def track_new_user(self, user_id: int):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if await self.redis.sadd(self.keys.known_users_set(), user_id):
            timestamp = int(datetime.now(timezone.utc).timestamp())
            await self.redis.zadd(self.keys.user_first_seen_zset(), {str(user_id): timestamp})

    async def notify_admins(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω—ã–π —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
        try:
            await self.bot.send_message(
                self.settings.admin_chat_id,
                message,
                parse_mode="HTML"
            )
        except TelegramAPIError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ({self.settings.admin_chat_id}): {e}")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    async def get_stats_page_content(self, stats_type: str) -> Tuple[str, InlineKeyboardMarkup]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        keyboard = get_back_to_admin_menu_keyboard()
        if stats_type == "general":
            stats = await self._get_general_stats()
            text = (f"<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
                    f"üöÄ –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: <b>{stats['new_24h']}</b>\n"
                    f"üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: <b>{stats['active_24h']}</b>")
        elif stats_type == "mining":
            stats = await self._get_mining_stats()
            text = (f"<b>üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ú–∞–π–Ω–∏–Ω–≥–∞'</b>\n\n"
                    f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å–µ–π—á–∞—Å: <b>{stats.get('active_sessions', 0)}</b>\n"
                    f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö: <b>{float(stats.get('total_balance', 0.0)):,.2f}</b>\n"
                    f"üì§ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: <b>{stats.get('pending_withdrawals', 0)}</b>")
        elif stats_type == "commands":
            top_commands = await self._get_command_stats()
            stats_text = "\n".join([f"üîπ <code>{cmd}</code> - {score} —Ä–∞–∑" for cmd, score in top_commands]) if top_commands else "–ï—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
            text = f"<b>üìà –¢–æ–ø-10 –¥–µ–π—Å—Ç–≤–∏–π</b>\n\n{stats_text}"
        else:
            raise KeyError(f"Unknown stats type: {stats_type}")
            
        return text, keyboard

    # --- –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
    async def _get_general_stats(self) -> Dict[str, Any]:
        one_day_ago = int((datetime.now(timezone.utc) - timedelta(days=1)).timestamp())
        async with self.redis.pipeline() as pipe:
            pipe.scard(self.keys.known_users_set())
            pipe.zcount(self.keys.user_last_activity_zset(), min=one_day_ago, max=-1)
            pipe.zcount(self.keys.user_first_seen_zset(), min=one_day_ago, max=-1)
            results = await pipe.execute()
        return {"total_users": results[0], "active_24h": results[1], "new_24h": results[2]}

    async def _get_mining_stats(self) -> Dict[str, Any]:
        return await self.redis.hgetall(self.keys.game_global_stats())

    async def _get_command_stats(self) -> List[Tuple[str, int]]:
        top_actions = await self.redis.zrevrange(self.keys.stats_actions_zset(), 0, 9, withscores=True)
        return [(cmd, int(score)) for cmd, score in top_actions]

    # --- –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    async def clear_asic_cache(self) -> int:
        keys_to_delete = [self.keys.asics_last_update(), self.keys.asics_sorted_set()]
        async for key in self.redis.scan_iter(f"asic:*"):
            keys_to_delete.append(key)
        return await self.redis.delete(*keys_to_delete) if keys_to_delete else 0

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
    async def get_main_menu_content(self, user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
        user_role = UserRole.USER
        if user_id in self.settings.super_admin_ids:
            user_role = UserRole.SUPER_ADMIN
        elif user_id in self.settings.admin_ids:
            user_role = UserRole.ADMIN
        
        text = "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        keyboard = get_admin_menu_keyboard(user_role)
        return text, keyboard

    async def get_stats_menu_content(self) -> Tuple[str, InlineKeyboardMarkup]:
        text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –æ—Ç—á–µ—Ç:"
        keyboard = get_stats_menu_keyboard()
        return text, keyboard

    async def get_system_menu_content(self) -> Tuple[str, InlineKeyboardMarkup]:
        text = "<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞."
        keyboard = get_system_actions_keyboard()
        return text, keyboard