# ===============================================================
# –§–∞–π–ª: bot/services/admin_service.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
# –ó–∞–º–µ–Ω—è–µ—Ç AdminStatsService, —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã KEYS
# –∏ –≤–Ω–µ–¥—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏
# –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
# ===============================================================
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Tuple, List

import redis.asyncio as redis
from aiogram.types import InlineKeyboardMarkup

from bot.filters.access_filters import UserRole
from bot.keyboards.admin_keyboards import (
    get_admin_menu_keyboard, get_stats_menu_keyboard, 
    get_system_actions_keyboard, get_back_to_admin_menu_keyboard
)

logger = logging.getLogger(__name__)

class AdminService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å Redis.
    """
    def __init__(self, redis_client: redis.Redis):
        self.redis = redis_client

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑–≤–Ω–µ) ---

    async def track_action(self, user_id: int, action_name: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ZINCRBY –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–µ—Ç–µ
        await self.redis.zincrby("stats:actions", 1, action_name)

    async def track_new_user(self, user_id: int):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        timestamp = int(datetime.now(timezone.utc).timestamp())
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SADD –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if await self.redis.sadd("users:known", user_id):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ ZSET –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–µ
            await self.redis.zadd("stats:user_first_seen", {str(user_id): timestamp})

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---

    async def get_stats_page_content(self, stats_type: str) -> Tuple[str, InlineKeyboardMarkup]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        """
        if stats_type == "general":
            stats = await self._get_general_stats()
            text = (
                "<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
                f"üöÄ –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: <b>{stats['new_24h']}</b>\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: <b>{stats['active_24h']}</b>"
            )
        elif stats_type == "mining":
            stats = await self._get_mining_stats()
            text = (
                "<b>üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ú–∞–π–Ω–∏–Ω–≥–∞'</b>\n\n"
                f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å–µ–π—á–∞—Å: <b>{stats['active_sessions']}</b>\n"
                f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö: <b>{stats['total_balance']:.2f}</b>\n"
                f"üì§ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: <b>{stats['total_withdrawn']:.2f}</b>\n"
                f"ü§ù –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{stats['total_referrals']}</b>"
            )
        elif stats_type == "commands":
            top_commands = await self._get_command_stats()
            if not top_commands:
                stats_text = "–ï—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
            else:
                stats_text = "\n".join([f"üîπ <code>{cmd}</code> - {score} —Ä–∞–∑" for cmd, score in top_commands])
            text = f"<b>üìà –¢–æ–ø-10 –¥–µ–π—Å—Ç–≤–∏–π</b>\n\n{stats_text}"
        else:
            raise KeyError(f"Unknown stats type: {stats_type}")
            
        return text, get_back_to_admin_menu_keyboard()

    # --- –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ) ---

    async def _get_general_stats(self) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
        one_day_ago = int((datetime.now(timezone.utc) - timedelta(days=1)).timestamp())
        
        async with self.redis.pipeline() as pipe:
            pipe.scard("users:known")
            pipe.zcount("stats:user_activity", min=one_day_ago, max=-1)
            pipe.zcount("stats:user_first_seen", min=one_day_ago, max=-1)
            results = await pipe.execute()
            
        return {
            "total_users": results[0],
            "active_24h": results[1],
            "new_24h": results[2],
        }

    async def _get_mining_stats(self) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∞—Ç–æ–º–∞—Ä–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏."""
        keys = [
            "stats:mining:active_sessions",
            "stats:mining:total_balance",
            "stats:mining:total_withdrawn",
            "stats:mining:total_referrals"
        ]
        # MGET - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π
        values = await self.redis.mget(keys)
        
        return {
            "active_sessions": int(values[0] or 0),
            "total_balance": float(values[1] or 0.0),
            "total_withdrawn": float(values[2] or 0.0),
            "total_referrals": int(values[3] or 0),
        }

    async def _get_command_stats(self) -> List[Tuple[str, int]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-10 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        # ZREVRANGE - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞
        top_actions = await self.redis.zrevrange("stats:actions", 0, 9, withscores=True)
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return [(cmd.decode('utf-8'), int(score)) for cmd, score in top_actions]

    # --- –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---

    async def clear_asic_cache(self) -> int:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–∞–µ—Ç –∫—ç—à ASIC, –∏—Å–ø–æ–ª—å–∑—É—è SCAN –≤–º–µ—Å—Ç–æ KEYS.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.
        """
        keys_to_delete = []
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–ª—é—á–∞–º, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è Redis
        async for key in self.redis.scan_iter("asic_passport:*"):
            keys_to_delete.append(key)
        
        last_update_key = "asics_last_update_utc"
        if await self.redis.exists(last_update_key):
            keys_to_delete.append(last_update_key)
            
        if not keys_to_delete:
            return 0
            
        return await self.redis.delete(*keys_to_delete)

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤) ---
    
    async def get_main_menu_content(self, user_id: int, user_role: UserRole) -> Tuple[str, InlineKeyboardMarkup]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏."""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        text = "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        keyboard = get_admin_menu_keyboard(user_role)
        return text, keyboard

    async def get_stats_menu_content(self) -> Tuple[str, InlineKeyboardMarkup]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –æ—Ç—á–µ—Ç:"
        keyboard = get_stats_menu_keyboard()
        return text, keyboard

    async def get_system_menu_content(self) -> Tuple[str, InlineKeyboardMarkup]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–µ–Ω—é —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        text = "<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞."
        keyboard = get_system_actions_keyboard()
        return text, keyboard
