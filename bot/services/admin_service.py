# ===============================================================
# –§–∞–π–ª: bot/services/admin_service.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025 - –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–≤—É—Ö –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–∞,
# –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è track_action –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å DI.
# ===============================================================
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Tuple, List

import redis.asyncio as redis
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup

from bot.config.settings import Settings
from bot.utils.models import UserRole # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
from bot.keyboards.admin_keyboards import (
    get_admin_menu_keyboard, get_stats_menu_keyboard,
    get_system_actions_keyboard, get_back_to_admin_menu_keyboard
)
from bot.utils.keys import KeyFactory

logger = logging.getLogger(__name__)

class AdminService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.
    """
    def __init__(self, redis: redis.Redis, settings: Settings, bot: Bot):
        self.redis = redis
        self.settings = settings
        self.bot = bot
        self.admin_ids: List[int] = settings.admin_ids
        self.keys = KeyFactory

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û) ---
    async def track_action(self, user_id: int, action_name: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
        await self.redis.zincrby("stats:actions", 1, action_name)
        
    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    async def notify_admins(self, message: str, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
        for admin_id in self.admin_ids:
            try:
                await self.bot.send_message(admin_id, message, **kwargs)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    async def get_stats_page_content(self, stats_type: str) -> Tuple[str, InlineKeyboardMarkup]:
        if stats_type == "general":
            stats = await self.get_global_stats()
            text = (
                "<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['users_total']}</b>\n"
                f"‚òÄÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: <b>{stats['users_active_day']}</b>\n"
                f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{stats['users_active_week']}</b>"
            )
        # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        else:
            raise KeyError(f"Unknown stats type: {stats_type}")
        
        return text, get_back_to_admin_menu_keyboard()

    # --- –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
    async def get_global_stats(self) -> dict:
        users_total = await self.redis.scard(self.keys.all_users_set())
        now = datetime.utcnow()
        today_str = now.strftime('%Y-%m-%d')
        week_str = now.strftime('%Y-%U')
        day_key = f"users:active:day:{today_str}"
        week_key = f"users:active:week:{week_str}"
        users_active_day = await self.redis.scard(day_key)
        users_active_week = await self.redis.scard(week_key)
        return {
            "users_total": users_total,
            "users_active_day": users_active_day,
            "users_active_week": users_active_week,
        }

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
    async def get_main_menu_content(self, user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
        user_role = UserRole.SUPER_ADMIN if user_id in self.settings.admin_ids else UserRole.ADMIN
        text = "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        keyboard = get_admin_menu_keyboard(user_role)
        return text, keyboard