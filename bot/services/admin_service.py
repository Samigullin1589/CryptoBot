# bot/services/admin_service.py
# –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 19.08.2025
# –í–µ—Ä—Å–∏—è: 2.0.0
# –û–ø–∏—Å–∞–Ω–∏–µ: –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.

from contextlib import suppress
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup
from loguru import logger
from redis.asyncio import Redis

from bot.config.settings import settings
from bot.keyboards.admin_keyboards import (get_admin_menu_keyboard,
                                           get_back_to_admin_menu_keyboard,
                                           get_stats_menu_keyboard)
from bot.utils.dependencies import get_bot_instance, get_redis_client
from bot.utils.keys import KeyFactory
from bot.utils.models import UserRole


class AdminService:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏, –≤–∫–ª—é—á–∞—è:
    - –°–±–æ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏–≥—Ä–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    - –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞).
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å, –ø–æ–ª—É—á–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
        """
        self.redis: Redis = get_redis_client()
        self.bot: Bot = get_bot_instance()
        self.keys = KeyFactory

    async def track_action(self, user_id: int, action_name: str):
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥—É, –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏) –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        """
        try:
            await self.redis.zincrby(self.keys.actions_stats(), 1, action_name)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ '{action_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def notify_admins(self, message: str, **kwargs):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
        """
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: '{message[:50]}...'")
        for admin_id in settings.ADMIN_IDS:
            with suppress(Exception):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                await self.bot.send_message(admin_id, message, **kwargs)

    async def get_stats_page_content(self, stats_type: str) -> Tuple[str, InlineKeyboardMarkup]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        """
        formatters = {
            "general": self._format_general_stats,
            "mining": self._format_game_stats,
            "commands": self._format_action_stats,
        }
        formatter = formatters.get(stats_type)

        if formatter:
            text = await formatter()
            keyboard = get_back_to_admin_menu_keyboard()
        else:
            logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_type}")
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            keyboard = get_stats_menu_keyboard()
        
        return text, keyboard

    async def _format_general_stats(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
        stats = await self._get_global_stats()
        return (
            "<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['users_total']}</b>\n"
            f"‚òÄÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: <b>{stats['users_active_day']}</b>\n"
            f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{stats['users_active_week']}</b>"
        )

    async def _format_game_stats(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ —Å –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
        stats = await self._get_game_stats()
        total_balance_formatted = f"{stats.get('total_balance', 0.0):,.2f}".replace(",", " ")
        return (
            "<b>üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üïπ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: <b>{stats.get('active_sessions', 0)}</b>\n"
            f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤: <b>{total_balance_formatted} –º–æ–Ω–µ—Ç</b>\n"
            f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∞: <b>{stats.get('pending_withdrawals', 0)}</b>"
        )

    async def _format_action_stats(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        top_actions = await self._get_action_stats()
        header = "<b>üìà –¢–æ–ø-10 –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        if not top_actions:
            return header + "<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö.</i>"
        
        actions_list = [f"<code>{action}</code> - {count} —Ä–∞–∑" for action, count in top_actions]
        return header + "\n".join(actions_list)

    async def _get_global_stats(self) -> Dict[str, int]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–∑ Redis –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        now = datetime.utcnow()
        day_key = self.keys.daily_active_users(now)
        week_key = self.keys.weekly_active_users(now)

        async with self.redis.pipeline(transaction=False) as pipe:
            pipe.scard(self.keys.all_users_set())
            pipe.scard(day_key)
            pipe.scard(week_key)
            results = await pipe.execute()

        return {
            "users_total": results[0],
            "users_active_day": results[1],
            "users_active_week": results[2],
        }

    async def _get_game_stats(self) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–∑ Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –º–æ–¥—É–ª—é."""
        async with self.redis.pipeline(transaction=False) as pipe:
            pipe.hgetall(self.keys.game_stats())
            pipe.get(self.keys.game_total_balance())
            results = await pipe.execute()
            
        game_stats_raw = results[0]
        total_balance = float(results[1] or 0.0)

        return {
            "active_sessions": int(game_stats_raw.get("active_sessions", 0)),
            "pending_withdrawals": int(game_stats_raw.get("pending_withdrawals", 0)),
            "total_balance": total_balance,
        }

    async def _get_action_stats(self, top_n: int = 10) -> List[Tuple[str, int]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-N —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Redis."""
        actions_raw = await self.redis.zrevrange(
            self.keys.actions_stats(), 0, top_n - 1, withscores=True
        )
        return [(action, int(score)) for action, score in actions_raw]

    async def get_main_menu_content(self, user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
        user_role = UserRole.SUPER_ADMIN if user_id in settings.ADMIN_IDS else UserRole.ADMIN
        text = "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        keyboard = get_admin_menu_keyboard(user_role)
        return text, keyboard

    async def change_user_game_balance(self, user_id: int, amount: float, admin_id: int) -> Optional[float]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.
        –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤.
        """
        profile_key = self.keys.user_game_profile(user_id)
        if not await self.redis.exists(profile_key):
            logger.warning(f"–ê–¥–º–∏–Ω {admin_id} –ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {user_id}")
            return None

        try:
            async with self.redis.pipeline(transaction=True) as pipe:
                pipe.hincrbyfloat(profile_key, "balance", amount)
                pipe.zincrby(self.keys.game_leaderboard(), amount, str(user_id))
                pipe.incrbyfloat(self.keys.game_total_balance(), amount)
                results = await pipe.execute()
            
            new_balance = results[0]
            logger.success(
                f"–ê–¥–º–∏–Ω {admin_id} –∏–∑–º–µ–Ω–∏–ª –±–∞–ª–∞–Ω—Å user_id={user_id} –Ω–∞ {amount}. "
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
            )
            return new_balance
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id={user_id} –∞–¥–º–∏–Ω–æ–º {admin_id}: {e}")
            return None

    async def clear_asic_cache(self) -> int:
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –∫—ç—à ASIC-–º–∞–π–Ω–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π.
        """
        logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ ASIC.")
        deleted_count = 0
        async for key in self.redis.scan_iter(match="asic:*"):
            deleted_count += await self.redis.delete(key)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏
        service_keys = [self.keys.asics_sorted_set(), self.keys.asics_last_update()]
        deleted_count += await self.redis.delete(*service_keys)
        
        logger.success(f"–ö—ç—à ASIC –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {deleted_count}.")
        return deleted_count