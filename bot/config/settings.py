# ===============================================================
# –§–∞–π–ª: bot/config/settings.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Pydantic
# –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞.
# –†–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.
# ===============================================================
import json
from pathlib import Path
from typing import List, Dict, Any, Optional, Set

from pydantic import Field, computed_field
from pydantic_settings import BaseSettings, SettingsConfigDict

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = Path(__file__).parent.parent.parent

def load_fallback_asics() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ ASIC'–æ–≤ –∏–∑ data/fallback_asics.json."""
    file_path = BASE_DIR / "data" / "fallback_asics.json"
    if not file_path.exists():
        return []
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)

# --- –í–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ ---

class AppConfig(BaseSettings):
    """–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    log_level: str = "INFO"
    log_format: str = "text"  # "text" –∏–ª–∏ "json"
    ticker_aliases: Dict[str, str] = {
        '–±—Ç–∫': 'BTC', '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', '–±–∏—Ç–æ–∫': 'BTC', 'eth': 'ETH', '—ç—Ñ–∏—Ä': 'ETH', '—ç—Ñ–∏—Ä–∏—É–º': 'ETH'
    }
    popular_tickers: List[str] = ['BTC', 'ETH', 'SOL', 'TON', 'KAS', 'ARB']

class ApiKeysConfig(BaseSettings):
    """–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏ ID."""
    bot_token: str
    redis_url: str
    admin_chat_id: int
    news_chat_id: Optional[int] = None
    admin_user_ids_str: str = Field(alias='ADMIN_USER_IDS', default='')
    super_admin_user_ids_str: str = Field(alias='SUPER_ADMIN_USER_IDS', default='')
    moderator_user_ids_str: str = Field(alias='MODERATOR_USER_IDS', default='')
    
    gemini_api_key: Optional[str] = None
    openai_api_key: Optional[str] = None
    cmc_api_key: Optional[str] = None
    cryptocompare_api_key: Optional[str] = None

class ApiEndpointsConfig(BaseSettings):
    """URL-–∞–¥—Ä–µ—Å–∞ –≤–Ω–µ—à–Ω–∏—Ö API."""
    coingecko_api_base: str = "https://api.coingecko.com/api/v3"
    minerstat_api_base: str = "https://api.minerstat.com/v2"
    whattomine_asics_url: str = "https://whattomine.com/coins.json"
    asicminervalue_url: str = "https://www.asicminervalue.com/miners"
    fear_and_greed_api_url: str = "https://api.alternative.me/fng/?limit=1"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    btc_fees_url: str = "https://mempool.space/api/v1/fees/recommended"
    btc_fees_fallback_url: str = "https://api.blockcypher.com/v1/btc/main"
    mempool_stats_url: str = "https://mempool.space/api/mempool"
    mempool_stats_fallback_url: str = "https://api.blockchain.info/charts/mempool-count?format=json"

class NewsConfig(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
    rss_feeds: List[str] = [
        "https://forklog.com/feed",
        "https://beincrypto.ru/feed/",
        "https://cointelegraph.com/rss/tag/russia",
        "https://www.theblock.co/rss.xml", # L2, DeFi
        "https://thedefiant.io/feed"      # Web3
    ]

class MiningGameConfig(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–≥—Ä—ã '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥'."""
    session_duration_seconds: int = 8 * 3600  # 8 —á–∞—Å–æ–≤
    referral_bonus_amount: float = 50.0
    electricity_tariffs: Dict[str, Dict[str, float]] = {
        "–î–æ–º–∞—à–Ω–∏–π üí°": {"cost_per_hour": 0.05, "unlock_price": 0},
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π üè≠": {"cost_per_hour": 0.02, "unlock_price": 200},
        "–ì–∏–¥—Ä–æ—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è üíß": {"cost_per_hour": 0.01, "unlock_price": 500}
    }
    default_electricity_tariff: str = "–î–æ–º–∞—à–Ω–∏–π üí°"

class CryptoCenterConfig(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ö—Ä–∏–ø—Ç–æ-–¶–µ–Ω—Ç—Ä–∞."""
    news_api_url: str = "https://min-api.cryptocompare.com/data/v2/news/?lang=EN&categories=Airdrop,Mining,DeFi,L1,L2,Altcoin,RWA,GameFi"
    alpha_rss_feeds: List[str] = [
        "https://thedefiant.io/feed",
        "https://bankless.substack.com/feed",
    ]

class ModerationConfig(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∞–Ω—Ç–∏-—Å–ø–∞–º–∞."""
    allowed_link_user_ids: List[int] = []

class SchedulerSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á."""
    asic_update_hours: int = 1
    news_interval_hours: int = 3
    morning_summary_hour: int = 9
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ---
    leaderboard_day: str = Field(default='fri', alias='leaderboard_day_of_week')
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    leaderboard_hour: int = 18
    health_check_minutes: int = 5

class ThrottlingSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–Ω—Ç–∏-—Ñ–ª—É–¥ —Å–∏—Å—Ç–µ–º—ã."""
    default_rate_limit: float = 1.0
    trusted_rate_limit: float = 0.5
    low_trust_rate_limit: float = 2.5
    trusted_user_threshold: int = 150
    low_trust_user_threshold: int = 50

class ActivitySettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    throttle_seconds: int = 60
    reward_threshold: int = 50
    reward_points: int = 5

class PriceServiceSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ü–µ–Ω."""
    cache_ttl: int = 120
    not_found_cache_ttl: int = 300

class AsicServiceSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ASIC'–æ–≤."""
    cache_ttl: int = 3600
    specs_cache_ttl: int = 3600 * 6
    fuzzy_score_cutoff: int = 90

class SecurityServiceSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    cache_ttl: int = 300
    backoff_max_tries: int = 3

class AIContentServiceSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    backoff_max_tries: int = 3
    timeout: int = 90
    model: str = "gemini-1.5-pro-latest"

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

class AppSettings(BaseSettings):
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    app: AppConfig = AppConfig()
    api_keys: ApiKeysConfig = ApiKeysConfig()
    api_endpoints: ApiEndpointsConfig = ApiEndpointsConfig()
    news: NewsConfig = NewsConfig()
    game: MiningGameConfig = MiningGameConfig()
    crypto_center: CryptoCenterConfig = CryptoCenterConfig()
    moderation: ModerationConfig = ModerationConfig()
    scheduler: SchedulerSettings = SchedulerSettings()
    throttling: ThrottlingSettings = ThrottlingSettings()
    activity: ActivitySettings = ActivitySettings()
    price_service: PriceServiceSettings = PriceServiceSettings()
    asic_service: AsicServiceSettings = AsicServiceSettings()
    security_service: SecurityServiceSettings = SecurityServiceSettings()
    ai_content_service: AIContentServiceSettings = AIContentServiceSettings()
    
    fallback_asics: List[Dict[str, Any]] = Field(default_factory=load_fallback_asics, exclude=True)

    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=False,
        env_nested_delimiter='__'
    )

    @staticmethod
    def _parse_user_ids(id_string: str) -> Set[int]:
        if not id_string.strip():
            return set()
        try:
            return {int(item.strip()) for item in id_string.split(',') if item.strip()}
        except (ValueError, TypeError):
            return set()

    @computed_field
    @property
    def ADMIN_USER_IDS(self) -> Set[int]:
        return self._parse_user_ids(self.api_keys.admin_user_ids_str)

    @computed_field
    @property
    def SUPER_ADMIN_USER_IDS(self) -> Set[int]:
        return self._parse_user_ids(self.api_keys.super_admin_user_ids_str)

    @computed_field
    @property
    def MODERATOR_USER_IDS(self) -> Set[int]:
        return self._parse_user_ids(self.api_keys.moderator_user_ids_str)

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
settings = AppSettings()
