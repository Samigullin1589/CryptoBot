# ===============================================================
# –§–∞–π–ª: bot/config/settings.py (–ü–†–û–î–ê–ö–®–ù-–í–ï–†–°–ò–Ø 2025)
# –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
# –í–Ω–µ–¥—Ä–µ–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
# API, –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏ –≤–≤–µ–¥–µ–Ω—ã —Ñ–ª–∞–≥–∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏.
# ===============================================================

import json
from pathlib import Path
from typing import List, Dict, Any, Optional

from pydantic import model_validator, Field, computed_field
from pydantic_settings import BaseSettings, SettingsConfigDict

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏
BASE_DIR = Path(__file__).parent.parent.parent

def load_fallback_asics() -> List[Dict[str, Any]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞ 2025 –≥–æ–¥ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    """
    file_path = BASE_DIR / "data" / "fallback_asics.json"
    if not file_path.exists():
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞ 2025 –≥–æ–¥ ASIC-–º–∞–π–Ω–µ—Ä–∞–º–∏
        return [
            {"name": "Antminer S21 Pro", "profitability": 25.5, "power": 3550, "hashrate": "234 TH/s", "algorithm": "SHA-256", "efficiency": "15.1 J/TH"},
            {"name": "WhatsMiner M63S", "profitability": 30.0, "power": 3900, "hashrate": "190 TH/s", "algorithm": "SHA-256", "efficiency": "20.5 J/TH"},
            {"name": "Iceriver KS5L", "profitability": 18.0, "power": 3400, "hashrate": "12 TH/s", "algorithm": "KHeavyHash", "efficiency": "283 J/GH"}
        ]
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)

# --- –í–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

class ApiKeysSettings(BaseSettings):
    """–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API."""
    bot_token: str = Field(alias='BOT_TOKEN')
    gemini_api_key: str = Field(alias='GEMINI_API_KEY')
    admin_chat_id: int = Field(alias='ADMIN_CHAT_ID')
    news_chat_id: int = Field(alias='NEWS_CHAT_ID')

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    openai_api_key: Optional[str] = Field(alias='OPENAI_API_KEY', default=None)
    cmc_api_key: Optional[str] = Field(alias='CMC_API_KEY', default=None)
    cryptocompare_api_key: Optional[str] = Field(alias='CRYPTOCOMPARE_API_KEY', default=None)
    blockchair_api_key: Optional[str] = Field(alias='BLOCKCHAIR_API_KEY', default=None)
    glassnode_api_key: Optional[str] = Field(alias='GLASSNODE_API_KEY', default=None)

class DatabaseSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à—É."""
    redis_url: str = Field(alias='REDIS_URL', default='redis://localhost:6379/0')

class AdminSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è."""
    admin_user_ids_str: str = Field(alias='ADMIN_USER_IDS', default='')

    @computed_field
    @property
    def ADMIN_USER_IDS(self) -> List[int]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª."""
        if not self.admin_user_ids_str.strip():
            return []
        try:
            return [int(item.strip()) for item in self.admin_user_ids_str.split(',') if item.strip()]
        except (ValueError, TypeError):
            return []

class DataSourceEndpoints(BaseSettings):
    """URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    coingecko_api_base: str = "https://api.coingecko.com/api/v3"
    coinpaprika_api_base: str = "https://api.coinpaprika.com/v1"
    cryptocompare_api_base: str = "https://min-api.cryptocompare.com"
    minerstat_api_base: str = "https://api.minerstat.com/v2"
    whattomine_asics_url: str = "https://whattomine.com/coins.json"
    asicminervalue_url: str = "https://www.asicminervalue.com/miners"
    fear_and_greed_api_url: str = "https://api.alternative.me/fng/?limit=1"
    cbr_daily_json_url: str = "https://www.cbr-xml-daily.ru/daily_json.js"

    # –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ Bitcoin —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    btc_halving_url: str = "https://mempool.space/api/blocks/tip/height"
    btc_halving_fallback_url: str = "https://blockstream.info/api/blocks/tip/height"
    btc_fees_url: str = "https://mempool.space/api/v1/fees/recommended"
    btc_fees_fallback_url: str = "https://blockstream.info/api/v1/fees/recommended"
    btc_mempool_url: str = "https://mempool.space/api/mempool"
    btc_mempool_fallback_url: str = "https://blockstream.info/api/mempool"

class NewsSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ RSS-—Ñ–∏–¥—ã
    general_rss_feeds: List[str] = [
        "https://forklog.com/feed",
        "https://beincrypto.ru/feed/",
        "https://cointelegraph.com/rss/tag/russia"
    ]
    # –ü–µ—Ä–µ–¥–æ–≤—ã–µ "–∞–ª—å—Ñ–∞" –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    alpha_rss_feeds: List[str] = [
        "https://thedefiant.io/feed",
        "https://bankless.substack.com/feed",
        "https://www.theblock.co/rss.xml",
        "https://messari.io/rss",
        "https://blog.l2beat.com/rss"
    ]
    # API –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    crypto_center_news_api_url: str = "https://min-api.cryptocompare.com/data/v2/news/?lang=EN&categories=Airdrop,Mining,DeFi,L1,L2,Altcoin,RWA,GameFi"
    news_interval_hours: int = 3

class MiningSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞–π–Ω–∏–Ω–≥–æ–º –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏."""
    asic_cache_update_hours: int = 1
    # –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
    ticker_aliases: Dict[str, str] = {
        '–±—Ç–∫': 'BTC', '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', '–±–∏—Ç–æ–∫': 'BTC',
        'eth': 'ETH', '—ç—Ñ–∏—Ä': 'ETH', '—ç—Ñ–∏—Ä–∏—É–º': 'ETH',
        '–∫–∞—Å–ø–∞': 'KAS', '—Å–æ–ª–∞–Ω–∞': 'SOL', '—Ç–æ–Ω': 'TON'
    }
    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤, –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞ 2025 –≥–æ–¥
    popular_tickers: List[str] = ['BTC', 'ETH', 'SOL', 'TON', 'KAS', 'ARB']
    fallback_asics: List[Dict[str, Any]] = Field(default_factory=load_fallback_asics)

class GameSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏ '—Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –º–∞–π–Ω–∏–Ω–≥–∞'."""
    MINING_DURATION_SECONDS: int = 8 * 3600  # 8 —á–∞—Å–æ–≤
    REFERRAL_BONUS_AMOUNT: float = 50.0
    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –∏–≥—Ä–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    ELECTRICITY_TARIFFS: Dict[str, Dict[str, float]] = {
        "–î–æ–º–∞—à–Ω–∏–π üí°": {"cost_per_hour": 0.05, "unlock_price": 0},
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π üè≠": {"cost_per_hour": 0.02, "unlock_price": 200},
        "–ó–µ–ª–µ–Ω—ã–π üå±": {"cost_per_hour": 0.08, "unlock_price": 50},
        "–ì–∏–¥—Ä–æ—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è üíß": {"cost_per_hour": 0.015, "unlock_price": 1000}
    }
    DEFAULT_ELECTRICITY_TARIFF: str = "–î–æ–º–∞—à–Ω–∏–π üí°"

class ModerationSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —á–∞—Ç–∞—Ö."""
    STOP_WORDS: List[str] = [
        "–∫–∞–∑–∏–Ω–æ", "—Å—Ç–∞–≤–∫–∏", "–±–æ–Ω—É—Å", "—Ñ—Ä–∏—Å–ø–∏–Ω", "–¥–µ–ø–æ–∑–∏—Ç",
        "—Ä–∞–±–æ—Ç–∞", "–≤–∞–∫–∞–Ω—Å–∏—è", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫"
    ]
    # –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏
    ALLOWED_LINK_USER_IDS: List[int] = []

class FeatureFlags(BaseSettings):
    """
    –§–ª–∞–≥–∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —á–∞—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
    """
    ENABLE_ADVANCED_ANALYTICS: bool = Field(alias="FEATURE_ENABLE_ADVANCED_ANALYTICS", default=True)
    ENABLE_GAME_LEADERBOARD: bool = Field(alias="FEATURE_ENABLE_GAME_LEADERBOARD", default=True)
    ENABLE_ZK_PROOFS_INFO: bool = Field(alias="FEATURE_ENABLE_ZK_PROOFS_INFO", default=False)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

class AppSettings(BaseSettings):
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
    """
    api_keys: ApiKeysSettings = Field(default_factory=ApiKeysSettings)
    database: DatabaseSettings = Field(default_factory=DatabaseSettings)
    admin: AdminSettings = Field(default_factory=AdminSettings)
    data_sources: DataSourceEndpoints = Field(default_factory=DataSourceEndpoints)
    news: NewsSettings = Field(default_factory=NewsSettings)
    mining: MiningSettings = Field(default_factory=MiningSettings)
    game: GameSettings = Field(default_factory=GameSettings)
    moderation: ModerationSettings = Field(default_factory=ModerationSettings)
    features: FeatureFlags = Field(default_factory=FeatureFlags)

    model_config = SettingsConfigDict(
        env_file=(".env", ".env.prod"), # –ò—â–µ—Ç .env, –∑–∞—Ç–µ–º .env.prod
        env_nested_delimiter='__', # –î–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–∏–ø–∞ API_KEYS__BOT_TOKEN
        env_file_encoding="utf-8",
        case_sensitive=False
    )

    @model_validator(mode='after')
    def set_allowed_users(self) -> 'AppSettings':
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        allowed_ids = set(self.moderation.ALLOWED_LINK_USER_IDS)
        
        if self.api_keys.admin_chat_id:
            allowed_ids.add(self.api_keys.admin_chat_id)
        
        for admin_id in self.admin.ADMIN_USER_IDS:
            allowed_ids.add(admin_id)
            
        self.moderation.ALLOWED_LINK_USER_IDS = sorted(list(allowed_ids))
        return self

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
settings = AppSettings()

# –ü—Ä–∏–º–µ—Ä –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:
# from bot.config.settings import settings
# token = settings.api_keys.bot_token
# popular = settings.mining.popular_tickers
